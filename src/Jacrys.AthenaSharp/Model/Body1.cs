/* 
 * athenahealth More Disruption Please (MDP) API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Jacrys.AthenaSharp.Client.SwaggerDateConverter;

namespace Jacrys.AthenaSharp.Model
{
    /// <summary>
    /// Body1
    /// </summary>
    [DataContract]
        public partial class Body1 :  IEquatable<Body1>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Body1" /> class.
        /// </summary>
        /// <param name="accessionid">A unique identifier given to a document to track it over time..</param>
        /// <param name="analytes">message.</param>
        /// <param name="attachmentcontents">The file contents that will be attached to this document. Currently PDFs and PNGs are supported. PNG files must be Base64 encoded..</param>
        /// <param name="attachmenttype">The file type of the attachment. Currently PDFs and PNGs are supported. Defaults to PDF..</param>
        /// <param name="autoclose">Documents will, normally, automatically appear in the clinical inbox for providers to review.  In some cases, you might want to force the document to skip the clinical inbox, and go directly to the patient chart with a \&quot;closed\&quot; status. For that case, set this to true.  .</param>
        /// <param name="departmentid">The athenaNet department ID associated with the uploaded document..</param>
        /// <param name="documenttypeid">A specific document type identifier..</param>
        /// <param name="facilityid">The ID of the facility or clinical provider who received the order..</param>
        /// <param name="internalnote">An internal note for the provider or staff. Updating this will append to any previous notes..</param>
        /// <param name="interpretation">The practice entered interpretation of this result. Updating this will append to any previous values..</param>
        /// <param name="observationdate">The date an observation was made (mm/dd/yyyy)..</param>
        /// <param name="observationtime">The time an observation was made (hh24:mi). 24 hour time..</param>
        /// <param name="priority">Priority of this result. 1 is high; 2 is normal..</param>
        /// <param name="providerid">The ID of the ordering provider..</param>
        /// <param name="reportstatus">The status of the report..</param>
        /// <param name="resultstatus">The status of the result..</param>
        /// <param name="specimenreceiveddatetime">Date-time indicating when the specimen was received in format (yyyy-mm-ddThh:mm:ss)..</param>
        /// <param name="specimenreporteddatetime">Date-time indicating when the specimen was reported in format (yyyy-mm-ddThh:mm:ss)..</param>
        /// <param name="tietoorderid">Tie the result document to this order..</param>
        public Body1(string accessionid = default(string), string analytes = default(string), string attachmentcontents = default(string), string attachmenttype = default(string), string autoclose = default(string), int? departmentid = default(int?), int? documenttypeid = default(int?), int? facilityid = default(int?), string internalnote = default(string), string interpretation = default(string), string observationdate = default(string), string observationtime = default(string), string priority = default(string), int? providerid = default(int?), string reportstatus = default(string), string resultstatus = default(string), string specimenreceiveddatetime = default(string), string specimenreporteddatetime = default(string), int? tietoorderid = default(int?))
        {
            this.Accessionid = accessionid;
            this.Analytes = analytes;
            this.Attachmentcontents = attachmentcontents;
            this.Attachmenttype = attachmenttype;
            this.Autoclose = autoclose;
            this.Departmentid = departmentid;
            this.Documenttypeid = documenttypeid;
            this.Facilityid = facilityid;
            this.Internalnote = internalnote;
            this.Interpretation = interpretation;
            this.Observationdate = observationdate;
            this.Observationtime = observationtime;
            this.Priority = priority;
            this.Providerid = providerid;
            this.Reportstatus = reportstatus;
            this.Resultstatus = resultstatus;
            this.Specimenreceiveddatetime = specimenreceiveddatetime;
            this.Specimenreporteddatetime = specimenreporteddatetime;
            this.Tietoorderid = tietoorderid;
        }
        
        /// <summary>
        /// A unique identifier given to a document to track it over time.
        /// </summary>
        /// <value>A unique identifier given to a document to track it over time.</value>
        [DataMember(Name="accessionid", EmitDefaultValue=false)]
        public string Accessionid { get; set; }

        /// <summary>
        /// message
        /// </summary>
        /// <value>message</value>
        [DataMember(Name="analytes", EmitDefaultValue=false)]
        public string Analytes { get; set; }

        /// <summary>
        /// The file contents that will be attached to this document. Currently PDFs and PNGs are supported. PNG files must be Base64 encoded.
        /// </summary>
        /// <value>The file contents that will be attached to this document. Currently PDFs and PNGs are supported. PNG files must be Base64 encoded.</value>
        [DataMember(Name="attachmentcontents", EmitDefaultValue=false)]
        public string Attachmentcontents { get; set; }

        /// <summary>
        /// The file type of the attachment. Currently PDFs and PNGs are supported. Defaults to PDF.
        /// </summary>
        /// <value>The file type of the attachment. Currently PDFs and PNGs are supported. Defaults to PDF.</value>
        [DataMember(Name="attachmenttype", EmitDefaultValue=false)]
        public string Attachmenttype { get; set; }

        /// <summary>
        /// Documents will, normally, automatically appear in the clinical inbox for providers to review.  In some cases, you might want to force the document to skip the clinical inbox, and go directly to the patient chart with a \&quot;closed\&quot; status. For that case, set this to true.  
        /// </summary>
        /// <value>Documents will, normally, automatically appear in the clinical inbox for providers to review.  In some cases, you might want to force the document to skip the clinical inbox, and go directly to the patient chart with a \&quot;closed\&quot; status. For that case, set this to true.  </value>
        [DataMember(Name="autoclose", EmitDefaultValue=false)]
        public string Autoclose { get; set; }

        /// <summary>
        /// The athenaNet department ID associated with the uploaded document.
        /// </summary>
        /// <value>The athenaNet department ID associated with the uploaded document.</value>
        [DataMember(Name="departmentid", EmitDefaultValue=false)]
        public int? Departmentid { get; set; }

        /// <summary>
        /// A specific document type identifier.
        /// </summary>
        /// <value>A specific document type identifier.</value>
        [DataMember(Name="documenttypeid", EmitDefaultValue=false)]
        public int? Documenttypeid { get; set; }

        /// <summary>
        /// The ID of the facility or clinical provider who received the order.
        /// </summary>
        /// <value>The ID of the facility or clinical provider who received the order.</value>
        [DataMember(Name="facilityid", EmitDefaultValue=false)]
        public int? Facilityid { get; set; }

        /// <summary>
        /// An internal note for the provider or staff. Updating this will append to any previous notes.
        /// </summary>
        /// <value>An internal note for the provider or staff. Updating this will append to any previous notes.</value>
        [DataMember(Name="internalnote", EmitDefaultValue=false)]
        public string Internalnote { get; set; }

        /// <summary>
        /// The practice entered interpretation of this result. Updating this will append to any previous values.
        /// </summary>
        /// <value>The practice entered interpretation of this result. Updating this will append to any previous values.</value>
        [DataMember(Name="interpretation", EmitDefaultValue=false)]
        public string Interpretation { get; set; }

        /// <summary>
        /// The date an observation was made (mm/dd/yyyy).
        /// </summary>
        /// <value>The date an observation was made (mm/dd/yyyy).</value>
        [DataMember(Name="observationdate", EmitDefaultValue=false)]
        public string Observationdate { get; set; }

        /// <summary>
        /// The time an observation was made (hh24:mi). 24 hour time.
        /// </summary>
        /// <value>The time an observation was made (hh24:mi). 24 hour time.</value>
        [DataMember(Name="observationtime", EmitDefaultValue=false)]
        public string Observationtime { get; set; }

        /// <summary>
        /// Priority of this result. 1 is high; 2 is normal.
        /// </summary>
        /// <value>Priority of this result. 1 is high; 2 is normal.</value>
        [DataMember(Name="priority", EmitDefaultValue=false)]
        public string Priority { get; set; }

        /// <summary>
        /// The ID of the ordering provider.
        /// </summary>
        /// <value>The ID of the ordering provider.</value>
        [DataMember(Name="providerid", EmitDefaultValue=false)]
        public int? Providerid { get; set; }

        /// <summary>
        /// The status of the report.
        /// </summary>
        /// <value>The status of the report.</value>
        [DataMember(Name="reportstatus", EmitDefaultValue=false)]
        public string Reportstatus { get; set; }

        /// <summary>
        /// The status of the result.
        /// </summary>
        /// <value>The status of the result.</value>
        [DataMember(Name="resultstatus", EmitDefaultValue=false)]
        public string Resultstatus { get; set; }

        /// <summary>
        /// Date-time indicating when the specimen was received in format (yyyy-mm-ddThh:mm:ss).
        /// </summary>
        /// <value>Date-time indicating when the specimen was received in format (yyyy-mm-ddThh:mm:ss).</value>
        [DataMember(Name="specimenreceiveddatetime", EmitDefaultValue=false)]
        public string Specimenreceiveddatetime { get; set; }

        /// <summary>
        /// Date-time indicating when the specimen was reported in format (yyyy-mm-ddThh:mm:ss).
        /// </summary>
        /// <value>Date-time indicating when the specimen was reported in format (yyyy-mm-ddThh:mm:ss).</value>
        [DataMember(Name="specimenreporteddatetime", EmitDefaultValue=false)]
        public string Specimenreporteddatetime { get; set; }

        /// <summary>
        /// Tie the result document to this order.
        /// </summary>
        /// <value>Tie the result document to this order.</value>
        [DataMember(Name="tietoorderid", EmitDefaultValue=false)]
        public int? Tietoorderid { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Body1 {\n");
            sb.Append("  Accessionid: ").Append(Accessionid).Append("\n");
            sb.Append("  Analytes: ").Append(Analytes).Append("\n");
            sb.Append("  Attachmentcontents: ").Append(Attachmentcontents).Append("\n");
            sb.Append("  Attachmenttype: ").Append(Attachmenttype).Append("\n");
            sb.Append("  Autoclose: ").Append(Autoclose).Append("\n");
            sb.Append("  Departmentid: ").Append(Departmentid).Append("\n");
            sb.Append("  Documenttypeid: ").Append(Documenttypeid).Append("\n");
            sb.Append("  Facilityid: ").Append(Facilityid).Append("\n");
            sb.Append("  Internalnote: ").Append(Internalnote).Append("\n");
            sb.Append("  Interpretation: ").Append(Interpretation).Append("\n");
            sb.Append("  Observationdate: ").Append(Observationdate).Append("\n");
            sb.Append("  Observationtime: ").Append(Observationtime).Append("\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("  Providerid: ").Append(Providerid).Append("\n");
            sb.Append("  Reportstatus: ").Append(Reportstatus).Append("\n");
            sb.Append("  Resultstatus: ").Append(Resultstatus).Append("\n");
            sb.Append("  Specimenreceiveddatetime: ").Append(Specimenreceiveddatetime).Append("\n");
            sb.Append("  Specimenreporteddatetime: ").Append(Specimenreporteddatetime).Append("\n");
            sb.Append("  Tietoorderid: ").Append(Tietoorderid).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Body1);
        }

        /// <summary>
        /// Returns true if Body1 instances are equal
        /// </summary>
        /// <param name="input">Instance of Body1 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Body1 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Accessionid == input.Accessionid ||
                    (this.Accessionid != null &&
                    this.Accessionid.Equals(input.Accessionid))
                ) && 
                (
                    this.Analytes == input.Analytes ||
                    (this.Analytes != null &&
                    this.Analytes.Equals(input.Analytes))
                ) && 
                (
                    this.Attachmentcontents == input.Attachmentcontents ||
                    (this.Attachmentcontents != null &&
                    this.Attachmentcontents.Equals(input.Attachmentcontents))
                ) && 
                (
                    this.Attachmenttype == input.Attachmenttype ||
                    (this.Attachmenttype != null &&
                    this.Attachmenttype.Equals(input.Attachmenttype))
                ) && 
                (
                    this.Autoclose == input.Autoclose ||
                    (this.Autoclose != null &&
                    this.Autoclose.Equals(input.Autoclose))
                ) && 
                (
                    this.Departmentid == input.Departmentid ||
                    (this.Departmentid != null &&
                    this.Departmentid.Equals(input.Departmentid))
                ) && 
                (
                    this.Documenttypeid == input.Documenttypeid ||
                    (this.Documenttypeid != null &&
                    this.Documenttypeid.Equals(input.Documenttypeid))
                ) && 
                (
                    this.Facilityid == input.Facilityid ||
                    (this.Facilityid != null &&
                    this.Facilityid.Equals(input.Facilityid))
                ) && 
                (
                    this.Internalnote == input.Internalnote ||
                    (this.Internalnote != null &&
                    this.Internalnote.Equals(input.Internalnote))
                ) && 
                (
                    this.Interpretation == input.Interpretation ||
                    (this.Interpretation != null &&
                    this.Interpretation.Equals(input.Interpretation))
                ) && 
                (
                    this.Observationdate == input.Observationdate ||
                    (this.Observationdate != null &&
                    this.Observationdate.Equals(input.Observationdate))
                ) && 
                (
                    this.Observationtime == input.Observationtime ||
                    (this.Observationtime != null &&
                    this.Observationtime.Equals(input.Observationtime))
                ) && 
                (
                    this.Priority == input.Priority ||
                    (this.Priority != null &&
                    this.Priority.Equals(input.Priority))
                ) && 
                (
                    this.Providerid == input.Providerid ||
                    (this.Providerid != null &&
                    this.Providerid.Equals(input.Providerid))
                ) && 
                (
                    this.Reportstatus == input.Reportstatus ||
                    (this.Reportstatus != null &&
                    this.Reportstatus.Equals(input.Reportstatus))
                ) && 
                (
                    this.Resultstatus == input.Resultstatus ||
                    (this.Resultstatus != null &&
                    this.Resultstatus.Equals(input.Resultstatus))
                ) && 
                (
                    this.Specimenreceiveddatetime == input.Specimenreceiveddatetime ||
                    (this.Specimenreceiveddatetime != null &&
                    this.Specimenreceiveddatetime.Equals(input.Specimenreceiveddatetime))
                ) && 
                (
                    this.Specimenreporteddatetime == input.Specimenreporteddatetime ||
                    (this.Specimenreporteddatetime != null &&
                    this.Specimenreporteddatetime.Equals(input.Specimenreporteddatetime))
                ) && 
                (
                    this.Tietoorderid == input.Tietoorderid ||
                    (this.Tietoorderid != null &&
                    this.Tietoorderid.Equals(input.Tietoorderid))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Accessionid != null)
                    hashCode = hashCode * 59 + this.Accessionid.GetHashCode();
                if (this.Analytes != null)
                    hashCode = hashCode * 59 + this.Analytes.GetHashCode();
                if (this.Attachmentcontents != null)
                    hashCode = hashCode * 59 + this.Attachmentcontents.GetHashCode();
                if (this.Attachmenttype != null)
                    hashCode = hashCode * 59 + this.Attachmenttype.GetHashCode();
                if (this.Autoclose != null)
                    hashCode = hashCode * 59 + this.Autoclose.GetHashCode();
                if (this.Departmentid != null)
                    hashCode = hashCode * 59 + this.Departmentid.GetHashCode();
                if (this.Documenttypeid != null)
                    hashCode = hashCode * 59 + this.Documenttypeid.GetHashCode();
                if (this.Facilityid != null)
                    hashCode = hashCode * 59 + this.Facilityid.GetHashCode();
                if (this.Internalnote != null)
                    hashCode = hashCode * 59 + this.Internalnote.GetHashCode();
                if (this.Interpretation != null)
                    hashCode = hashCode * 59 + this.Interpretation.GetHashCode();
                if (this.Observationdate != null)
                    hashCode = hashCode * 59 + this.Observationdate.GetHashCode();
                if (this.Observationtime != null)
                    hashCode = hashCode * 59 + this.Observationtime.GetHashCode();
                if (this.Priority != null)
                    hashCode = hashCode * 59 + this.Priority.GetHashCode();
                if (this.Providerid != null)
                    hashCode = hashCode * 59 + this.Providerid.GetHashCode();
                if (this.Reportstatus != null)
                    hashCode = hashCode * 59 + this.Reportstatus.GetHashCode();
                if (this.Resultstatus != null)
                    hashCode = hashCode * 59 + this.Resultstatus.GetHashCode();
                if (this.Specimenreceiveddatetime != null)
                    hashCode = hashCode * 59 + this.Specimenreceiveddatetime.GetHashCode();
                if (this.Specimenreporteddatetime != null)
                    hashCode = hashCode * 59 + this.Specimenreporteddatetime.GetHashCode();
                if (this.Tietoorderid != null)
                    hashCode = hashCode * 59 + this.Tietoorderid.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
