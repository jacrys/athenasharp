/* 
 * athenahealth More Disruption Please (MDP) API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// AppointmentType
    /// </summary>
    [DataContract]
        public partial class AppointmentType :  IEquatable<AppointmentType>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AppointmentType" /> class.
        /// </summary>
        /// <param name="name">The name of the appointment type. (required).</param>
        /// <param name="duration">Expected duration of the appointment in minutes..</param>
        /// <param name="genericyn">If true, this type is a \&quot;generic\&quot; type able to be filled with other types of appointments..</param>
        /// <param name="shortname">The short name code of the appointment type..</param>
        /// <param name="patientyn">If true, this type is a patient-facing type..</param>
        /// <param name="patientdisplayname">Patient friendly appointment type name. Defaults to regular name..</param>
        /// <param name="appointmenttypeid">The appointment type ID. (required).</param>
        /// <param name="templatetypeonlyyn">If true, this type is a \&quot;template-only\&quot; type, and must be filled with a different appointment type upon booking..</param>
        /// <param name="createencounteroncheckin">If true, then this appointments of this type will generated an encounter when checked in, with certain conditions. It&#x27;s rather complex, but the rendering provider on the appointment must also have the create encounter feature set, the department must have athena Clinicals enabled, and other rarer and less visible settings. .</param>
        public AppointmentType(string name = default(string), int? duration = default(int?), bool? genericyn = default(bool?), string shortname = default(string), bool? patientyn = default(bool?), string patientdisplayname = default(string), int? appointmenttypeid = default(int?), bool? templatetypeonlyyn = default(bool?), bool? createencounteroncheckin = default(bool?))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for AppointmentType and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // to ensure "appointmenttypeid" is required (not null)
            if (appointmenttypeid == null)
            {
                throw new InvalidDataException("appointmenttypeid is a required property for AppointmentType and cannot be null");
            }
            else
            {
                this.Appointmenttypeid = appointmenttypeid;
            }
            this.Duration = duration;
            this.Genericyn = genericyn;
            this.Shortname = shortname;
            this.Patientyn = patientyn;
            this.Patientdisplayname = patientdisplayname;
            this.Templatetypeonlyyn = templatetypeonlyyn;
            this.Createencounteroncheckin = createencounteroncheckin;
        }
        
        /// <summary>
        /// The name of the appointment type.
        /// </summary>
        /// <value>The name of the appointment type.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Expected duration of the appointment in minutes.
        /// </summary>
        /// <value>Expected duration of the appointment in minutes.</value>
        [DataMember(Name="duration", EmitDefaultValue=false)]
        public int? Duration { get; set; }

        /// <summary>
        /// If true, this type is a \&quot;generic\&quot; type able to be filled with other types of appointments.
        /// </summary>
        /// <value>If true, this type is a \&quot;generic\&quot; type able to be filled with other types of appointments.</value>
        [DataMember(Name="genericyn", EmitDefaultValue=false)]
        public bool? Genericyn { get; set; }

        /// <summary>
        /// The short name code of the appointment type.
        /// </summary>
        /// <value>The short name code of the appointment type.</value>
        [DataMember(Name="shortname", EmitDefaultValue=false)]
        public string Shortname { get; set; }

        /// <summary>
        /// If true, this type is a patient-facing type.
        /// </summary>
        /// <value>If true, this type is a patient-facing type.</value>
        [DataMember(Name="patientyn", EmitDefaultValue=false)]
        public bool? Patientyn { get; set; }

        /// <summary>
        /// Patient friendly appointment type name. Defaults to regular name.
        /// </summary>
        /// <value>Patient friendly appointment type name. Defaults to regular name.</value>
        [DataMember(Name="patientdisplayname", EmitDefaultValue=false)]
        public string Patientdisplayname { get; set; }

        /// <summary>
        /// The appointment type ID.
        /// </summary>
        /// <value>The appointment type ID.</value>
        [DataMember(Name="appointmenttypeid", EmitDefaultValue=false)]
        public int? Appointmenttypeid { get; set; }

        /// <summary>
        /// If true, this type is a \&quot;template-only\&quot; type, and must be filled with a different appointment type upon booking.
        /// </summary>
        /// <value>If true, this type is a \&quot;template-only\&quot; type, and must be filled with a different appointment type upon booking.</value>
        [DataMember(Name="templatetypeonlyyn", EmitDefaultValue=false)]
        public bool? Templatetypeonlyyn { get; set; }

        /// <summary>
        /// If true, then this appointments of this type will generated an encounter when checked in, with certain conditions. It&#x27;s rather complex, but the rendering provider on the appointment must also have the create encounter feature set, the department must have athena Clinicals enabled, and other rarer and less visible settings. 
        /// </summary>
        /// <value>If true, then this appointments of this type will generated an encounter when checked in, with certain conditions. It&#x27;s rather complex, but the rendering provider on the appointment must also have the create encounter feature set, the department must have athena Clinicals enabled, and other rarer and less visible settings. </value>
        [DataMember(Name="createencounteroncheckin", EmitDefaultValue=false)]
        public bool? Createencounteroncheckin { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AppointmentType {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  Genericyn: ").Append(Genericyn).Append("\n");
            sb.Append("  Shortname: ").Append(Shortname).Append("\n");
            sb.Append("  Patientyn: ").Append(Patientyn).Append("\n");
            sb.Append("  Patientdisplayname: ").Append(Patientdisplayname).Append("\n");
            sb.Append("  Appointmenttypeid: ").Append(Appointmenttypeid).Append("\n");
            sb.Append("  Templatetypeonlyyn: ").Append(Templatetypeonlyyn).Append("\n");
            sb.Append("  Createencounteroncheckin: ").Append(Createencounteroncheckin).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AppointmentType);
        }

        /// <summary>
        /// Returns true if AppointmentType instances are equal
        /// </summary>
        /// <param name="input">Instance of AppointmentType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AppointmentType input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Duration == input.Duration ||
                    (this.Duration != null &&
                    this.Duration.Equals(input.Duration))
                ) && 
                (
                    this.Genericyn == input.Genericyn ||
                    (this.Genericyn != null &&
                    this.Genericyn.Equals(input.Genericyn))
                ) && 
                (
                    this.Shortname == input.Shortname ||
                    (this.Shortname != null &&
                    this.Shortname.Equals(input.Shortname))
                ) && 
                (
                    this.Patientyn == input.Patientyn ||
                    (this.Patientyn != null &&
                    this.Patientyn.Equals(input.Patientyn))
                ) && 
                (
                    this.Patientdisplayname == input.Patientdisplayname ||
                    (this.Patientdisplayname != null &&
                    this.Patientdisplayname.Equals(input.Patientdisplayname))
                ) && 
                (
                    this.Appointmenttypeid == input.Appointmenttypeid ||
                    (this.Appointmenttypeid != null &&
                    this.Appointmenttypeid.Equals(input.Appointmenttypeid))
                ) && 
                (
                    this.Templatetypeonlyyn == input.Templatetypeonlyyn ||
                    (this.Templatetypeonlyyn != null &&
                    this.Templatetypeonlyyn.Equals(input.Templatetypeonlyyn))
                ) && 
                (
                    this.Createencounteroncheckin == input.Createencounteroncheckin ||
                    (this.Createencounteroncheckin != null &&
                    this.Createencounteroncheckin.Equals(input.Createencounteroncheckin))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Duration != null)
                    hashCode = hashCode * 59 + this.Duration.GetHashCode();
                if (this.Genericyn != null)
                    hashCode = hashCode * 59 + this.Genericyn.GetHashCode();
                if (this.Shortname != null)
                    hashCode = hashCode * 59 + this.Shortname.GetHashCode();
                if (this.Patientyn != null)
                    hashCode = hashCode * 59 + this.Patientyn.GetHashCode();
                if (this.Patientdisplayname != null)
                    hashCode = hashCode * 59 + this.Patientdisplayname.GetHashCode();
                if (this.Appointmenttypeid != null)
                    hashCode = hashCode * 59 + this.Appointmenttypeid.GetHashCode();
                if (this.Templatetypeonlyyn != null)
                    hashCode = hashCode * 59 + this.Templatetypeonlyyn.GetHashCode();
                if (this.Createencounteroncheckin != null)
                    hashCode = hashCode * 59 + this.Createencounteroncheckin.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
