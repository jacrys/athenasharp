/* 
 * athenahealth More Disruption Please (MDP) API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Jacrys.AthenaSharp.Client.SwaggerDateConverter;

namespace Jacrys.AthenaSharp.Model
{
    /// <summary>
    /// PatientPortalStatus
    /// </summary>
    [DataContract]
        public partial class PatientPortalStatus :  IEquatable<PatientPortalStatus>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PatientPortalStatus" /> class.
        /// </summary>
        /// <param name="familyregisteredyn">Is there a family member registered with access to this patient..</param>
        /// <param name="lastloginentity">Either \&quot;PATIENT\&quot; or \&quot;FAMILY\&quot;, the last entity who accessed this patient..</param>
        /// <param name="noportalyn">The privacy setting for blocking the patient from the portal is set..</param>
        /// <param name="portalregistrationdate">The date the patient registered for the portal..</param>
        /// <param name="entitytodisplay">Either \&quot;FAMILY\&quot; or \&quot;PATIENT\&quot;..</param>
        /// <param name="status">The status of the patient. Possible statuses: REGISTERED: The patient is registered for the portal. NOTREGISTERED: The patient is not registered for the portal. FAMILYLOGIN: This patient is set up for a family member to login. NOPORTAL: The privacy setting for blocking the patient from the portal is set. BLOCKEDFAILEDLOGINS: The patient is blocked because of failed login attempts. FAMILYBLOCKEDFAILEDLOGINS: The family member is blocked because of failed login attempts. .</param>
        /// <param name="termsaccepted">Has this patient accepted the portal&#x27;s Terms and Conditions. This is a good indicator if the patient has actually logged in to the portal or simply is registered without ever having logged in..</param>
        /// <param name="registeredyn">If this patient is registered or not for the portal..</param>
        /// <param name="blockedfailedloginsyn">Is this patient blocked from the portal due to failed login attempts..</param>
        /// <param name="lastlogindate">The last login date..</param>
        /// <param name="familyblockedfailedloginsyn">Is this patient&#x27;s family blocked from the portal due to failed login attempts..</param>
        public PatientPortalStatus(bool? familyregisteredyn = default(bool?), string lastloginentity = default(string), bool? noportalyn = default(bool?), string portalregistrationdate = default(string), string entitytodisplay = default(string), string status = default(string), bool? termsaccepted = default(bool?), bool? registeredyn = default(bool?), bool? blockedfailedloginsyn = default(bool?), string lastlogindate = default(string), bool? familyblockedfailedloginsyn = default(bool?))
        {
            this.Familyregisteredyn = familyregisteredyn;
            this.Lastloginentity = lastloginentity;
            this.Noportalyn = noportalyn;
            this.Portalregistrationdate = portalregistrationdate;
            this.Entitytodisplay = entitytodisplay;
            this.Status = status;
            this.Termsaccepted = termsaccepted;
            this.Registeredyn = registeredyn;
            this.Blockedfailedloginsyn = blockedfailedloginsyn;
            this.Lastlogindate = lastlogindate;
            this.Familyblockedfailedloginsyn = familyblockedfailedloginsyn;
        }
        
        /// <summary>
        /// Is there a family member registered with access to this patient.
        /// </summary>
        /// <value>Is there a family member registered with access to this patient.</value>
        [DataMember(Name="familyregisteredyn", EmitDefaultValue=false)]
        public bool? Familyregisteredyn { get; set; }

        /// <summary>
        /// Either \&quot;PATIENT\&quot; or \&quot;FAMILY\&quot;, the last entity who accessed this patient.
        /// </summary>
        /// <value>Either \&quot;PATIENT\&quot; or \&quot;FAMILY\&quot;, the last entity who accessed this patient.</value>
        [DataMember(Name="lastloginentity", EmitDefaultValue=false)]
        public string Lastloginentity { get; set; }

        /// <summary>
        /// The privacy setting for blocking the patient from the portal is set.
        /// </summary>
        /// <value>The privacy setting for blocking the patient from the portal is set.</value>
        [DataMember(Name="noportalyn", EmitDefaultValue=false)]
        public bool? Noportalyn { get; set; }

        /// <summary>
        /// The date the patient registered for the portal.
        /// </summary>
        /// <value>The date the patient registered for the portal.</value>
        [DataMember(Name="portalregistrationdate", EmitDefaultValue=false)]
        public string Portalregistrationdate { get; set; }

        /// <summary>
        /// Either \&quot;FAMILY\&quot; or \&quot;PATIENT\&quot;.
        /// </summary>
        /// <value>Either \&quot;FAMILY\&quot; or \&quot;PATIENT\&quot;.</value>
        [DataMember(Name="entitytodisplay", EmitDefaultValue=false)]
        public string Entitytodisplay { get; set; }

        /// <summary>
        /// The status of the patient. Possible statuses: REGISTERED: The patient is registered for the portal. NOTREGISTERED: The patient is not registered for the portal. FAMILYLOGIN: This patient is set up for a family member to login. NOPORTAL: The privacy setting for blocking the patient from the portal is set. BLOCKEDFAILEDLOGINS: The patient is blocked because of failed login attempts. FAMILYBLOCKEDFAILEDLOGINS: The family member is blocked because of failed login attempts. 
        /// </summary>
        /// <value>The status of the patient. Possible statuses: REGISTERED: The patient is registered for the portal. NOTREGISTERED: The patient is not registered for the portal. FAMILYLOGIN: This patient is set up for a family member to login. NOPORTAL: The privacy setting for blocking the patient from the portal is set. BLOCKEDFAILEDLOGINS: The patient is blocked because of failed login attempts. FAMILYBLOCKEDFAILEDLOGINS: The family member is blocked because of failed login attempts. </value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// Has this patient accepted the portal&#x27;s Terms and Conditions. This is a good indicator if the patient has actually logged in to the portal or simply is registered without ever having logged in.
        /// </summary>
        /// <value>Has this patient accepted the portal&#x27;s Terms and Conditions. This is a good indicator if the patient has actually logged in to the portal or simply is registered without ever having logged in.</value>
        [DataMember(Name="termsaccepted", EmitDefaultValue=false)]
        public bool? Termsaccepted { get; set; }

        /// <summary>
        /// If this patient is registered or not for the portal.
        /// </summary>
        /// <value>If this patient is registered or not for the portal.</value>
        [DataMember(Name="registeredyn", EmitDefaultValue=false)]
        public bool? Registeredyn { get; set; }

        /// <summary>
        /// Is this patient blocked from the portal due to failed login attempts.
        /// </summary>
        /// <value>Is this patient blocked from the portal due to failed login attempts.</value>
        [DataMember(Name="blockedfailedloginsyn", EmitDefaultValue=false)]
        public bool? Blockedfailedloginsyn { get; set; }

        /// <summary>
        /// The last login date.
        /// </summary>
        /// <value>The last login date.</value>
        [DataMember(Name="lastlogindate", EmitDefaultValue=false)]
        public string Lastlogindate { get; set; }

        /// <summary>
        /// Is this patient&#x27;s family blocked from the portal due to failed login attempts.
        /// </summary>
        /// <value>Is this patient&#x27;s family blocked from the portal due to failed login attempts.</value>
        [DataMember(Name="familyblockedfailedloginsyn", EmitDefaultValue=false)]
        public bool? Familyblockedfailedloginsyn { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PatientPortalStatus {\n");
            sb.Append("  Familyregisteredyn: ").Append(Familyregisteredyn).Append("\n");
            sb.Append("  Lastloginentity: ").Append(Lastloginentity).Append("\n");
            sb.Append("  Noportalyn: ").Append(Noportalyn).Append("\n");
            sb.Append("  Portalregistrationdate: ").Append(Portalregistrationdate).Append("\n");
            sb.Append("  Entitytodisplay: ").Append(Entitytodisplay).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Termsaccepted: ").Append(Termsaccepted).Append("\n");
            sb.Append("  Registeredyn: ").Append(Registeredyn).Append("\n");
            sb.Append("  Blockedfailedloginsyn: ").Append(Blockedfailedloginsyn).Append("\n");
            sb.Append("  Lastlogindate: ").Append(Lastlogindate).Append("\n");
            sb.Append("  Familyblockedfailedloginsyn: ").Append(Familyblockedfailedloginsyn).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PatientPortalStatus);
        }

        /// <summary>
        /// Returns true if PatientPortalStatus instances are equal
        /// </summary>
        /// <param name="input">Instance of PatientPortalStatus to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PatientPortalStatus input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Familyregisteredyn == input.Familyregisteredyn ||
                    (this.Familyregisteredyn != null &&
                    this.Familyregisteredyn.Equals(input.Familyregisteredyn))
                ) && 
                (
                    this.Lastloginentity == input.Lastloginentity ||
                    (this.Lastloginentity != null &&
                    this.Lastloginentity.Equals(input.Lastloginentity))
                ) && 
                (
                    this.Noportalyn == input.Noportalyn ||
                    (this.Noportalyn != null &&
                    this.Noportalyn.Equals(input.Noportalyn))
                ) && 
                (
                    this.Portalregistrationdate == input.Portalregistrationdate ||
                    (this.Portalregistrationdate != null &&
                    this.Portalregistrationdate.Equals(input.Portalregistrationdate))
                ) && 
                (
                    this.Entitytodisplay == input.Entitytodisplay ||
                    (this.Entitytodisplay != null &&
                    this.Entitytodisplay.Equals(input.Entitytodisplay))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Termsaccepted == input.Termsaccepted ||
                    (this.Termsaccepted != null &&
                    this.Termsaccepted.Equals(input.Termsaccepted))
                ) && 
                (
                    this.Registeredyn == input.Registeredyn ||
                    (this.Registeredyn != null &&
                    this.Registeredyn.Equals(input.Registeredyn))
                ) && 
                (
                    this.Blockedfailedloginsyn == input.Blockedfailedloginsyn ||
                    (this.Blockedfailedloginsyn != null &&
                    this.Blockedfailedloginsyn.Equals(input.Blockedfailedloginsyn))
                ) && 
                (
                    this.Lastlogindate == input.Lastlogindate ||
                    (this.Lastlogindate != null &&
                    this.Lastlogindate.Equals(input.Lastlogindate))
                ) && 
                (
                    this.Familyblockedfailedloginsyn == input.Familyblockedfailedloginsyn ||
                    (this.Familyblockedfailedloginsyn != null &&
                    this.Familyblockedfailedloginsyn.Equals(input.Familyblockedfailedloginsyn))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Familyregisteredyn != null)
                    hashCode = hashCode * 59 + this.Familyregisteredyn.GetHashCode();
                if (this.Lastloginentity != null)
                    hashCode = hashCode * 59 + this.Lastloginentity.GetHashCode();
                if (this.Noportalyn != null)
                    hashCode = hashCode * 59 + this.Noportalyn.GetHashCode();
                if (this.Portalregistrationdate != null)
                    hashCode = hashCode * 59 + this.Portalregistrationdate.GetHashCode();
                if (this.Entitytodisplay != null)
                    hashCode = hashCode * 59 + this.Entitytodisplay.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Termsaccepted != null)
                    hashCode = hashCode * 59 + this.Termsaccepted.GetHashCode();
                if (this.Registeredyn != null)
                    hashCode = hashCode * 59 + this.Registeredyn.GetHashCode();
                if (this.Blockedfailedloginsyn != null)
                    hashCode = hashCode * 59 + this.Blockedfailedloginsyn.GetHashCode();
                if (this.Lastlogindate != null)
                    hashCode = hashCode * 59 + this.Lastlogindate.GetHashCode();
                if (this.Familyblockedfailedloginsyn != null)
                    hashCode = hashCode * 59 + this.Familyblockedfailedloginsyn.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
