/* 
 * athenahealth More Disruption Please (MDP) API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Jacrys.AthenaSharp.Client.SwaggerDateConverter;

namespace Jacrys.AthenaSharp.Model
{
    /// <summary>
    /// LabResult
    /// </summary>
    [DataContract]
        public partial class LabResult :  IEquatable<LabResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LabResult" /> class.
        /// </summary>
        /// <param name="analytes">Individual lab result observations/analytes.</param>
        /// <param name="providerid">The provider ID for this document..</param>
        /// <param name="attachmentexists">This flag depicts if the lab result has a scanned document attachment or not..</param>
        /// <param name="labresultdatetime">The observation date and time associated with this lab result. Returned in mm/dd/yyyy hh24:mi:ss format. .</param>
        /// <param name="priority">Document priority, when available. 1 is high, 2 is normal. Some labs use other numbers or characters that are lab-specific. .</param>
        /// <param name="patientnote">The external note for the patient..</param>
        /// <param name="internalnote">The &#x27;Internal Note&#x27; attached to this document..</param>
        /// <param name="facilityid">The ID of the clinical provider associated with this clinical document. Clinical providers are a master list of providers throughout the country. These include providers as well as radiology centers, labs and pharmacies. .</param>
        /// <param name="labresultid">Athena ID for this lab result (required).</param>
        /// <param name="orderid">The athena ID of the associated order document.</param>
        /// <param name="description">Description for this lab result.</param>
        /// <param name="labresultloinc">The LOINC for the result document or associated order..</param>
        /// <param name="labresultdate">Observation date associated with this lab result.</param>
        /// <param name="labresultnote">Additional note associated with this lab result, if any.</param>
        /// <param name="resultstatus">The status of the result (e.g., \&quot;final\&quot;, \&quot;preliminary\&quot;, \&quot;corrected\&quot;, etc.).</param>
        public LabResult(List<Analyte> analytes = default(List<Analyte>), int? providerid = default(int?), bool? attachmentexists = default(bool?), string labresultdatetime = default(string), string priority = default(string), string patientnote = default(string), string internalnote = default(string), int? facilityid = default(int?), int? labresultid = default(int?), string orderid = default(string), string description = default(string), string labresultloinc = default(string), string labresultdate = default(string), string labresultnote = default(string), string resultstatus = default(string))
        {
            // to ensure "labresultid" is required (not null)
            if (labresultid == null)
            {
                throw new InvalidDataException("labresultid is a required property for LabResult and cannot be null");
            }
            else
            {
                this.Labresultid = labresultid;
            }
            this.Analytes = analytes;
            this.Providerid = providerid;
            this.Attachmentexists = attachmentexists;
            this.Labresultdatetime = labresultdatetime;
            this.Priority = priority;
            this.Patientnote = patientnote;
            this.Internalnote = internalnote;
            this.Facilityid = facilityid;
            this.Orderid = orderid;
            this.Description = description;
            this.Labresultloinc = labresultloinc;
            this.Labresultdate = labresultdate;
            this.Labresultnote = labresultnote;
            this.Resultstatus = resultstatus;
        }
        
        /// <summary>
        /// Individual lab result observations/analytes
        /// </summary>
        /// <value>Individual lab result observations/analytes</value>
        [DataMember(Name="analytes", EmitDefaultValue=false)]
        public List<Analyte> Analytes { get; set; }

        /// <summary>
        /// The provider ID for this document.
        /// </summary>
        /// <value>The provider ID for this document.</value>
        [DataMember(Name="providerid", EmitDefaultValue=false)]
        public int? Providerid { get; set; }

        /// <summary>
        /// This flag depicts if the lab result has a scanned document attachment or not.
        /// </summary>
        /// <value>This flag depicts if the lab result has a scanned document attachment or not.</value>
        [DataMember(Name="attachmentexists", EmitDefaultValue=false)]
        public bool? Attachmentexists { get; set; }

        /// <summary>
        /// The observation date and time associated with this lab result. Returned in mm/dd/yyyy hh24:mi:ss format. 
        /// </summary>
        /// <value>The observation date and time associated with this lab result. Returned in mm/dd/yyyy hh24:mi:ss format. </value>
        [DataMember(Name="labresultdatetime", EmitDefaultValue=false)]
        public string Labresultdatetime { get; set; }

        /// <summary>
        /// Document priority, when available. 1 is high, 2 is normal. Some labs use other numbers or characters that are lab-specific. 
        /// </summary>
        /// <value>Document priority, when available. 1 is high, 2 is normal. Some labs use other numbers or characters that are lab-specific. </value>
        [DataMember(Name="priority", EmitDefaultValue=false)]
        public string Priority { get; set; }

        /// <summary>
        /// The external note for the patient.
        /// </summary>
        /// <value>The external note for the patient.</value>
        [DataMember(Name="patientnote", EmitDefaultValue=false)]
        public string Patientnote { get; set; }

        /// <summary>
        /// The &#x27;Internal Note&#x27; attached to this document.
        /// </summary>
        /// <value>The &#x27;Internal Note&#x27; attached to this document.</value>
        [DataMember(Name="internalnote", EmitDefaultValue=false)]
        public string Internalnote { get; set; }

        /// <summary>
        /// The ID of the clinical provider associated with this clinical document. Clinical providers are a master list of providers throughout the country. These include providers as well as radiology centers, labs and pharmacies. 
        /// </summary>
        /// <value>The ID of the clinical provider associated with this clinical document. Clinical providers are a master list of providers throughout the country. These include providers as well as radiology centers, labs and pharmacies. </value>
        [DataMember(Name="facilityid", EmitDefaultValue=false)]
        public int? Facilityid { get; set; }

        /// <summary>
        /// Athena ID for this lab result
        /// </summary>
        /// <value>Athena ID for this lab result</value>
        [DataMember(Name="labresultid", EmitDefaultValue=false)]
        public int? Labresultid { get; set; }

        /// <summary>
        /// The athena ID of the associated order document
        /// </summary>
        /// <value>The athena ID of the associated order document</value>
        [DataMember(Name="orderid", EmitDefaultValue=false)]
        public string Orderid { get; set; }

        /// <summary>
        /// Description for this lab result
        /// </summary>
        /// <value>Description for this lab result</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// The LOINC for the result document or associated order.
        /// </summary>
        /// <value>The LOINC for the result document or associated order.</value>
        [DataMember(Name="labresultloinc", EmitDefaultValue=false)]
        public string Labresultloinc { get; set; }

        /// <summary>
        /// Observation date associated with this lab result
        /// </summary>
        /// <value>Observation date associated with this lab result</value>
        [DataMember(Name="labresultdate", EmitDefaultValue=false)]
        public string Labresultdate { get; set; }

        /// <summary>
        /// Additional note associated with this lab result, if any
        /// </summary>
        /// <value>Additional note associated with this lab result, if any</value>
        [DataMember(Name="labresultnote", EmitDefaultValue=false)]
        public string Labresultnote { get; set; }

        /// <summary>
        /// The status of the result (e.g., \&quot;final\&quot;, \&quot;preliminary\&quot;, \&quot;corrected\&quot;, etc.)
        /// </summary>
        /// <value>The status of the result (e.g., \&quot;final\&quot;, \&quot;preliminary\&quot;, \&quot;corrected\&quot;, etc.)</value>
        [DataMember(Name="resultstatus", EmitDefaultValue=false)]
        public string Resultstatus { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LabResult {\n");
            sb.Append("  Analytes: ").Append(Analytes).Append("\n");
            sb.Append("  Providerid: ").Append(Providerid).Append("\n");
            sb.Append("  Attachmentexists: ").Append(Attachmentexists).Append("\n");
            sb.Append("  Labresultdatetime: ").Append(Labresultdatetime).Append("\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("  Patientnote: ").Append(Patientnote).Append("\n");
            sb.Append("  Internalnote: ").Append(Internalnote).Append("\n");
            sb.Append("  Facilityid: ").Append(Facilityid).Append("\n");
            sb.Append("  Labresultid: ").Append(Labresultid).Append("\n");
            sb.Append("  Orderid: ").Append(Orderid).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Labresultloinc: ").Append(Labresultloinc).Append("\n");
            sb.Append("  Labresultdate: ").Append(Labresultdate).Append("\n");
            sb.Append("  Labresultnote: ").Append(Labresultnote).Append("\n");
            sb.Append("  Resultstatus: ").Append(Resultstatus).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LabResult);
        }

        /// <summary>
        /// Returns true if LabResult instances are equal
        /// </summary>
        /// <param name="input">Instance of LabResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LabResult input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Analytes == input.Analytes ||
                    this.Analytes != null &&
                    input.Analytes != null &&
                    this.Analytes.SequenceEqual(input.Analytes)
                ) && 
                (
                    this.Providerid == input.Providerid ||
                    (this.Providerid != null &&
                    this.Providerid.Equals(input.Providerid))
                ) && 
                (
                    this.Attachmentexists == input.Attachmentexists ||
                    (this.Attachmentexists != null &&
                    this.Attachmentexists.Equals(input.Attachmentexists))
                ) && 
                (
                    this.Labresultdatetime == input.Labresultdatetime ||
                    (this.Labresultdatetime != null &&
                    this.Labresultdatetime.Equals(input.Labresultdatetime))
                ) && 
                (
                    this.Priority == input.Priority ||
                    (this.Priority != null &&
                    this.Priority.Equals(input.Priority))
                ) && 
                (
                    this.Patientnote == input.Patientnote ||
                    (this.Patientnote != null &&
                    this.Patientnote.Equals(input.Patientnote))
                ) && 
                (
                    this.Internalnote == input.Internalnote ||
                    (this.Internalnote != null &&
                    this.Internalnote.Equals(input.Internalnote))
                ) && 
                (
                    this.Facilityid == input.Facilityid ||
                    (this.Facilityid != null &&
                    this.Facilityid.Equals(input.Facilityid))
                ) && 
                (
                    this.Labresultid == input.Labresultid ||
                    (this.Labresultid != null &&
                    this.Labresultid.Equals(input.Labresultid))
                ) && 
                (
                    this.Orderid == input.Orderid ||
                    (this.Orderid != null &&
                    this.Orderid.Equals(input.Orderid))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Labresultloinc == input.Labresultloinc ||
                    (this.Labresultloinc != null &&
                    this.Labresultloinc.Equals(input.Labresultloinc))
                ) && 
                (
                    this.Labresultdate == input.Labresultdate ||
                    (this.Labresultdate != null &&
                    this.Labresultdate.Equals(input.Labresultdate))
                ) && 
                (
                    this.Labresultnote == input.Labresultnote ||
                    (this.Labresultnote != null &&
                    this.Labresultnote.Equals(input.Labresultnote))
                ) && 
                (
                    this.Resultstatus == input.Resultstatus ||
                    (this.Resultstatus != null &&
                    this.Resultstatus.Equals(input.Resultstatus))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Analytes != null)
                    hashCode = hashCode * 59 + this.Analytes.GetHashCode();
                if (this.Providerid != null)
                    hashCode = hashCode * 59 + this.Providerid.GetHashCode();
                if (this.Attachmentexists != null)
                    hashCode = hashCode * 59 + this.Attachmentexists.GetHashCode();
                if (this.Labresultdatetime != null)
                    hashCode = hashCode * 59 + this.Labresultdatetime.GetHashCode();
                if (this.Priority != null)
                    hashCode = hashCode * 59 + this.Priority.GetHashCode();
                if (this.Patientnote != null)
                    hashCode = hashCode * 59 + this.Patientnote.GetHashCode();
                if (this.Internalnote != null)
                    hashCode = hashCode * 59 + this.Internalnote.GetHashCode();
                if (this.Facilityid != null)
                    hashCode = hashCode * 59 + this.Facilityid.GetHashCode();
                if (this.Labresultid != null)
                    hashCode = hashCode * 59 + this.Labresultid.GetHashCode();
                if (this.Orderid != null)
                    hashCode = hashCode * 59 + this.Orderid.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Labresultloinc != null)
                    hashCode = hashCode * 59 + this.Labresultloinc.GetHashCode();
                if (this.Labresultdate != null)
                    hashCode = hashCode * 59 + this.Labresultdate.GetHashCode();
                if (this.Labresultnote != null)
                    hashCode = hashCode * 59 + this.Labresultnote.GetHashCode();
                if (this.Resultstatus != null)
                    hashCode = hashCode * 59 + this.Resultstatus.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
