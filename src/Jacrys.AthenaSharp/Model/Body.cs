/* 
 * athenahealth More Disruption Please (MDP) API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Body
    /// </summary>
    [DataContract]
        public partial class Body :  IEquatable<Body>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Body" /> class.
        /// </summary>
        /// <param name="address1">Patient&#x27;s address - 1st line (Max length: 100).</param>
        /// <param name="address2">Patient&#x27;s address - 2nd line (Max length: 100).</param>
        /// <param name="city">Patient&#x27;s city (Max length: 30).</param>
        /// <param name="departmentid">Primary (registration) department ID..</param>
        /// <param name="dob">Patient&#x27;s DOB (mm/dd/yyyy).</param>
        /// <param name="email">Patient&#x27;s email address. &#x27;declined&#x27; can be used to indicate just that..</param>
        /// <param name="firstname">Patient&#x27;s first name.</param>
        /// <param name="homephone">The patient&#x27;s home phone number. Invalid numbers in a GET will be ignored. Patient phone numbers and other data may change, and one phone number may be associated with multiple patients. You are responsible for taking additional steps to verify patient identity and for using this data in accordance with applicable law, including HIPAA. Only phone numbers that exist in the North American Naming Plan (NANP) are acceptable for input..</param>
        /// <param name="lastname">Patient&#x27;s last name.</param>
        /// <param name="mobilephone">The patient&#x27;s mobile phone number. On input, &#x27;declined&#x27; can be used to indicate no number. (Alternatively, hasmobile can also be set to false. \&quot;declined\&quot; simply does this for you.) Invalid numbers in a GET will be ignored. Patient phone numbers and other data may change, and one phone number may be associated with multiple patients. You are responsible for taking additional steps to verify patient identity and for using this data in accordance with applicable law, including HIPAA. Only phone numbers that exist in the North American Naming Plan (NANP) are acceptable for input..</param>
        /// <param name="state">Patient&#x27;s state (2 letter abbreviation).</param>
        /// <param name="zip">Patient&#x27;s zip. Matching occurs on first 5 characters..</param>
        /// <param name="sex">Patient&#x27;s sex (M/F).</param>
        /// <param name="race">The patient race, using the 2.16.840.1.113883.5.104 codeset. See http://www.hl7.org/implement/standards/fhir/terminologies-v3.html Special case: use \&quot;declined\&quot; to indicate that the patient declined to answer. Multiple values or a tab-seperated list of codes is acceptable for multiple races for input. The first race will be considered \&quot;primary\&quot;. Note: you must update all values at once if you update any.  .</param>
        public Body(string address1 = default(string), string address2 = default(string), string city = default(string), int? departmentid = default(int?), string dob = default(string), string email = default(string), string firstname = default(string), string homephone = default(string), string lastname = default(string), string mobilephone = default(string), string state = default(string), string zip = default(string), string sex = default(string), string race = default(string))
        {
            this.Address1 = address1;
            this.Address2 = address2;
            this.City = city;
            this.Departmentid = departmentid;
            this.Dob = dob;
            this.Email = email;
            this.Firstname = firstname;
            this.Homephone = homephone;
            this.Lastname = lastname;
            this.Mobilephone = mobilephone;
            this.State = state;
            this.Zip = zip;
            this.Sex = sex;
            this.Race = race;
        }
        
        /// <summary>
        /// Patient&#x27;s address - 1st line (Max length: 100)
        /// </summary>
        /// <value>Patient&#x27;s address - 1st line (Max length: 100)</value>
        [DataMember(Name="address1", EmitDefaultValue=false)]
        public string Address1 { get; set; }

        /// <summary>
        /// Patient&#x27;s address - 2nd line (Max length: 100)
        /// </summary>
        /// <value>Patient&#x27;s address - 2nd line (Max length: 100)</value>
        [DataMember(Name="address2", EmitDefaultValue=false)]
        public string Address2 { get; set; }

        /// <summary>
        /// Patient&#x27;s city (Max length: 30)
        /// </summary>
        /// <value>Patient&#x27;s city (Max length: 30)</value>
        [DataMember(Name="city", EmitDefaultValue=false)]
        public string City { get; set; }

        /// <summary>
        /// Primary (registration) department ID.
        /// </summary>
        /// <value>Primary (registration) department ID.</value>
        [DataMember(Name="departmentid", EmitDefaultValue=false)]
        public int? Departmentid { get; set; }

        /// <summary>
        /// Patient&#x27;s DOB (mm/dd/yyyy)
        /// </summary>
        /// <value>Patient&#x27;s DOB (mm/dd/yyyy)</value>
        [DataMember(Name="dob", EmitDefaultValue=false)]
        public string Dob { get; set; }

        /// <summary>
        /// Patient&#x27;s email address. &#x27;declined&#x27; can be used to indicate just that.
        /// </summary>
        /// <value>Patient&#x27;s email address. &#x27;declined&#x27; can be used to indicate just that.</value>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// Patient&#x27;s first name
        /// </summary>
        /// <value>Patient&#x27;s first name</value>
        [DataMember(Name="firstname", EmitDefaultValue=false)]
        public string Firstname { get; set; }

        /// <summary>
        /// The patient&#x27;s home phone number. Invalid numbers in a GET will be ignored. Patient phone numbers and other data may change, and one phone number may be associated with multiple patients. You are responsible for taking additional steps to verify patient identity and for using this data in accordance with applicable law, including HIPAA. Only phone numbers that exist in the North American Naming Plan (NANP) are acceptable for input.
        /// </summary>
        /// <value>The patient&#x27;s home phone number. Invalid numbers in a GET will be ignored. Patient phone numbers and other data may change, and one phone number may be associated with multiple patients. You are responsible for taking additional steps to verify patient identity and for using this data in accordance with applicable law, including HIPAA. Only phone numbers that exist in the North American Naming Plan (NANP) are acceptable for input.</value>
        [DataMember(Name="homephone", EmitDefaultValue=false)]
        public string Homephone { get; set; }

        /// <summary>
        /// Patient&#x27;s last name
        /// </summary>
        /// <value>Patient&#x27;s last name</value>
        [DataMember(Name="lastname", EmitDefaultValue=false)]
        public string Lastname { get; set; }

        /// <summary>
        /// The patient&#x27;s mobile phone number. On input, &#x27;declined&#x27; can be used to indicate no number. (Alternatively, hasmobile can also be set to false. \&quot;declined\&quot; simply does this for you.) Invalid numbers in a GET will be ignored. Patient phone numbers and other data may change, and one phone number may be associated with multiple patients. You are responsible for taking additional steps to verify patient identity and for using this data in accordance with applicable law, including HIPAA. Only phone numbers that exist in the North American Naming Plan (NANP) are acceptable for input.
        /// </summary>
        /// <value>The patient&#x27;s mobile phone number. On input, &#x27;declined&#x27; can be used to indicate no number. (Alternatively, hasmobile can also be set to false. \&quot;declined\&quot; simply does this for you.) Invalid numbers in a GET will be ignored. Patient phone numbers and other data may change, and one phone number may be associated with multiple patients. You are responsible for taking additional steps to verify patient identity and for using this data in accordance with applicable law, including HIPAA. Only phone numbers that exist in the North American Naming Plan (NANP) are acceptable for input.</value>
        [DataMember(Name="mobilephone", EmitDefaultValue=false)]
        public string Mobilephone { get; set; }

        /// <summary>
        /// Patient&#x27;s state (2 letter abbreviation)
        /// </summary>
        /// <value>Patient&#x27;s state (2 letter abbreviation)</value>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public string State { get; set; }

        /// <summary>
        /// Patient&#x27;s zip. Matching occurs on first 5 characters.
        /// </summary>
        /// <value>Patient&#x27;s zip. Matching occurs on first 5 characters.</value>
        [DataMember(Name="zip", EmitDefaultValue=false)]
        public string Zip { get; set; }

        /// <summary>
        /// Patient&#x27;s sex (M/F)
        /// </summary>
        /// <value>Patient&#x27;s sex (M/F)</value>
        [DataMember(Name="sex", EmitDefaultValue=false)]
        public string Sex { get; set; }

        /// <summary>
        /// The patient race, using the 2.16.840.1.113883.5.104 codeset. See http://www.hl7.org/implement/standards/fhir/terminologies-v3.html Special case: use \&quot;declined\&quot; to indicate that the patient declined to answer. Multiple values or a tab-seperated list of codes is acceptable for multiple races for input. The first race will be considered \&quot;primary\&quot;. Note: you must update all values at once if you update any.  
        /// </summary>
        /// <value>The patient race, using the 2.16.840.1.113883.5.104 codeset. See http://www.hl7.org/implement/standards/fhir/terminologies-v3.html Special case: use \&quot;declined\&quot; to indicate that the patient declined to answer. Multiple values or a tab-seperated list of codes is acceptable for multiple races for input. The first race will be considered \&quot;primary\&quot;. Note: you must update all values at once if you update any.  </value>
        [DataMember(Name="race", EmitDefaultValue=false)]
        public string Race { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Body {\n");
            sb.Append("  Address1: ").Append(Address1).Append("\n");
            sb.Append("  Address2: ").Append(Address2).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  Departmentid: ").Append(Departmentid).Append("\n");
            sb.Append("  Dob: ").Append(Dob).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Firstname: ").Append(Firstname).Append("\n");
            sb.Append("  Homephone: ").Append(Homephone).Append("\n");
            sb.Append("  Lastname: ").Append(Lastname).Append("\n");
            sb.Append("  Mobilephone: ").Append(Mobilephone).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Zip: ").Append(Zip).Append("\n");
            sb.Append("  Sex: ").Append(Sex).Append("\n");
            sb.Append("  Race: ").Append(Race).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Body);
        }

        /// <summary>
        /// Returns true if Body instances are equal
        /// </summary>
        /// <param name="input">Instance of Body to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Body input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Address1 == input.Address1 ||
                    (this.Address1 != null &&
                    this.Address1.Equals(input.Address1))
                ) && 
                (
                    this.Address2 == input.Address2 ||
                    (this.Address2 != null &&
                    this.Address2.Equals(input.Address2))
                ) && 
                (
                    this.City == input.City ||
                    (this.City != null &&
                    this.City.Equals(input.City))
                ) && 
                (
                    this.Departmentid == input.Departmentid ||
                    (this.Departmentid != null &&
                    this.Departmentid.Equals(input.Departmentid))
                ) && 
                (
                    this.Dob == input.Dob ||
                    (this.Dob != null &&
                    this.Dob.Equals(input.Dob))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.Firstname == input.Firstname ||
                    (this.Firstname != null &&
                    this.Firstname.Equals(input.Firstname))
                ) && 
                (
                    this.Homephone == input.Homephone ||
                    (this.Homephone != null &&
                    this.Homephone.Equals(input.Homephone))
                ) && 
                (
                    this.Lastname == input.Lastname ||
                    (this.Lastname != null &&
                    this.Lastname.Equals(input.Lastname))
                ) && 
                (
                    this.Mobilephone == input.Mobilephone ||
                    (this.Mobilephone != null &&
                    this.Mobilephone.Equals(input.Mobilephone))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.Zip == input.Zip ||
                    (this.Zip != null &&
                    this.Zip.Equals(input.Zip))
                ) && 
                (
                    this.Sex == input.Sex ||
                    (this.Sex != null &&
                    this.Sex.Equals(input.Sex))
                ) && 
                (
                    this.Race == input.Race ||
                    (this.Race != null &&
                    this.Race.Equals(input.Race))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Address1 != null)
                    hashCode = hashCode * 59 + this.Address1.GetHashCode();
                if (this.Address2 != null)
                    hashCode = hashCode * 59 + this.Address2.GetHashCode();
                if (this.City != null)
                    hashCode = hashCode * 59 + this.City.GetHashCode();
                if (this.Departmentid != null)
                    hashCode = hashCode * 59 + this.Departmentid.GetHashCode();
                if (this.Dob != null)
                    hashCode = hashCode * 59 + this.Dob.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.Firstname != null)
                    hashCode = hashCode * 59 + this.Firstname.GetHashCode();
                if (this.Homephone != null)
                    hashCode = hashCode * 59 + this.Homephone.GetHashCode();
                if (this.Lastname != null)
                    hashCode = hashCode * 59 + this.Lastname.GetHashCode();
                if (this.Mobilephone != null)
                    hashCode = hashCode * 59 + this.Mobilephone.GetHashCode();
                if (this.State != null)
                    hashCode = hashCode * 59 + this.State.GetHashCode();
                if (this.Zip != null)
                    hashCode = hashCode * 59 + this.Zip.GetHashCode();
                if (this.Sex != null)
                    hashCode = hashCode * 59 + this.Sex.GetHashCode();
                if (this.Race != null)
                    hashCode = hashCode * 59 + this.Race.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
