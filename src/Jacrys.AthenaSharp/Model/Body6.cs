/* 
 * athenahealth More Disruption Please (MDP) API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Jacrys.AthenaSharp.Client.SwaggerDateConverter;

namespace Jacrys.AthenaSharp.Model
{
    /// <summary>
    /// Body6
    /// </summary>
    [DataContract]
        public partial class Body6 :  IEquatable<Body6>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Body6" /> class.
        /// </summary>
        /// <param name="duration">The expected duration, in minutes, of the appointment type. Note, this value cannot be changed after creation, so please choose carefully.  (required).</param>
        /// <param name="generic">If set to true, this type serves as a \&quot;generic\&quot; type, that will match any type when searching. Defaults to false. .</param>
        /// <param name="name">The name of the appointment type. Maximum length of 30 characters. (required).</param>
        /// <param name="patient">If set to true, this type serves as a \&quot;patient\&quot; type, meaning that is is a type that can be used for booking patients. If set to false, then it this type will not be used for patient (e.g. \&quot;Lunch\&quot; or \&quot;Vacation\&quot;). Non-patient types are mostly used to reserving time for providers to not see patients.  (required).</param>
        /// <param name="shortname">The short name code of the appointment type. Maximum length of 4 characters. Used for making schedule templates. Note, this value cannot be changed after creation, so please choose carefully.  (required).</param>
        /// <param name="templatetypeonly">If set to true, this type serves as a \&quot;template-only\&quot; type, meaning that it can be used for building schedule templates,  but cannot be used for booking appointments (i.e. another type must be chosen). Defaults to false. .</param>
        public Body6(int? duration = default(int?), bool? generic = default(bool?), string name = default(string), bool? patient = default(bool?), string shortname = default(string), bool? templatetypeonly = default(bool?))
        {
            // to ensure "duration" is required (not null)
            if (duration == null)
            {
                throw new InvalidDataException("duration is a required property for Body6 and cannot be null");
            }
            else
            {
                this.Duration = duration;
            }
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for Body6 and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // to ensure "patient" is required (not null)
            if (patient == null)
            {
                throw new InvalidDataException("patient is a required property for Body6 and cannot be null");
            }
            else
            {
                this.Patient = patient;
            }
            // to ensure "shortname" is required (not null)
            if (shortname == null)
            {
                throw new InvalidDataException("shortname is a required property for Body6 and cannot be null");
            }
            else
            {
                this.Shortname = shortname;
            }
            this.Generic = generic;
            this.Templatetypeonly = templatetypeonly;
        }
        
        /// <summary>
        /// The expected duration, in minutes, of the appointment type. Note, this value cannot be changed after creation, so please choose carefully. 
        /// </summary>
        /// <value>The expected duration, in minutes, of the appointment type. Note, this value cannot be changed after creation, so please choose carefully. </value>
        [DataMember(Name="duration", EmitDefaultValue=false)]
        public int? Duration { get; set; }

        /// <summary>
        /// If set to true, this type serves as a \&quot;generic\&quot; type, that will match any type when searching. Defaults to false. 
        /// </summary>
        /// <value>If set to true, this type serves as a \&quot;generic\&quot; type, that will match any type when searching. Defaults to false. </value>
        [DataMember(Name="generic", EmitDefaultValue=false)]
        public bool? Generic { get; set; }

        /// <summary>
        /// The name of the appointment type. Maximum length of 30 characters.
        /// </summary>
        /// <value>The name of the appointment type. Maximum length of 30 characters.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// If set to true, this type serves as a \&quot;patient\&quot; type, meaning that is is a type that can be used for booking patients. If set to false, then it this type will not be used for patient (e.g. \&quot;Lunch\&quot; or \&quot;Vacation\&quot;). Non-patient types are mostly used to reserving time for providers to not see patients. 
        /// </summary>
        /// <value>If set to true, this type serves as a \&quot;patient\&quot; type, meaning that is is a type that can be used for booking patients. If set to false, then it this type will not be used for patient (e.g. \&quot;Lunch\&quot; or \&quot;Vacation\&quot;). Non-patient types are mostly used to reserving time for providers to not see patients. </value>
        [DataMember(Name="patient", EmitDefaultValue=false)]
        public bool? Patient { get; set; }

        /// <summary>
        /// The short name code of the appointment type. Maximum length of 4 characters. Used for making schedule templates. Note, this value cannot be changed after creation, so please choose carefully. 
        /// </summary>
        /// <value>The short name code of the appointment type. Maximum length of 4 characters. Used for making schedule templates. Note, this value cannot be changed after creation, so please choose carefully. </value>
        [DataMember(Name="shortname", EmitDefaultValue=false)]
        public string Shortname { get; set; }

        /// <summary>
        /// If set to true, this type serves as a \&quot;template-only\&quot; type, meaning that it can be used for building schedule templates,  but cannot be used for booking appointments (i.e. another type must be chosen). Defaults to false. 
        /// </summary>
        /// <value>If set to true, this type serves as a \&quot;template-only\&quot; type, meaning that it can be used for building schedule templates,  but cannot be used for booking appointments (i.e. another type must be chosen). Defaults to false. </value>
        [DataMember(Name="templatetypeonly", EmitDefaultValue=false)]
        public bool? Templatetypeonly { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Body6 {\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  Generic: ").Append(Generic).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Patient: ").Append(Patient).Append("\n");
            sb.Append("  Shortname: ").Append(Shortname).Append("\n");
            sb.Append("  Templatetypeonly: ").Append(Templatetypeonly).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Body6);
        }

        /// <summary>
        /// Returns true if Body6 instances are equal
        /// </summary>
        /// <param name="input">Instance of Body6 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Body6 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Duration == input.Duration ||
                    (this.Duration != null &&
                    this.Duration.Equals(input.Duration))
                ) && 
                (
                    this.Generic == input.Generic ||
                    (this.Generic != null &&
                    this.Generic.Equals(input.Generic))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Patient == input.Patient ||
                    (this.Patient != null &&
                    this.Patient.Equals(input.Patient))
                ) && 
                (
                    this.Shortname == input.Shortname ||
                    (this.Shortname != null &&
                    this.Shortname.Equals(input.Shortname))
                ) && 
                (
                    this.Templatetypeonly == input.Templatetypeonly ||
                    (this.Templatetypeonly != null &&
                    this.Templatetypeonly.Equals(input.Templatetypeonly))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Duration != null)
                    hashCode = hashCode * 59 + this.Duration.GetHashCode();
                if (this.Generic != null)
                    hashCode = hashCode * 59 + this.Generic.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Patient != null)
                    hashCode = hashCode * 59 + this.Patient.GetHashCode();
                if (this.Shortname != null)
                    hashCode = hashCode * 59 + this.Shortname.GetHashCode();
                if (this.Templatetypeonly != null)
                    hashCode = hashCode * 59 + this.Templatetypeonly.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
