/* 
 * athenahealth More Disruption Please (MDP) API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Jacrys.AthenaSharp.Client.SwaggerDateConverter;

namespace Jacrys.AthenaSharp.Model
{
    /// <summary>
    /// PatientEncounterDiagnosis
    /// </summary>
    [DataContract]
        public partial class PatientEncounterDiagnosis :  IEquatable<PatientEncounterDiagnosis>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PatientEncounterDiagnosis" /> class.
        /// </summary>
        /// <param name="diagnosisid">Athena ID for this diagnosis (required).</param>
        /// <param name="icdcodes">message.</param>
        /// <param name="snomedcode">SNOMED Code for this diagnosis.</param>
        /// <param name="note">The note entered for this diagnosis..</param>
        /// <param name="description">Brief description for this SNOMED Code.</param>
        public PatientEncounterDiagnosis(int? diagnosisid = default(int?), List<Code> icdcodes = default(List<Code>), int? snomedcode = default(int?), string note = default(string), string description = default(string))
        {
            // to ensure "diagnosisid" is required (not null)
            if (diagnosisid == null)
            {
                throw new InvalidDataException("diagnosisid is a required property for PatientEncounterDiagnosis and cannot be null");
            }
            else
            {
                this.Diagnosisid = diagnosisid;
            }
            this.Icdcodes = icdcodes;
            this.Snomedcode = snomedcode;
            this.Note = note;
            this.Description = description;
        }
        
        /// <summary>
        /// Athena ID for this diagnosis
        /// </summary>
        /// <value>Athena ID for this diagnosis</value>
        [DataMember(Name="diagnosisid", EmitDefaultValue=false)]
        public int? Diagnosisid { get; set; }

        /// <summary>
        /// message
        /// </summary>
        /// <value>message</value>
        [DataMember(Name="icdcodes", EmitDefaultValue=false)]
        public List<Code> Icdcodes { get; set; }

        /// <summary>
        /// SNOMED Code for this diagnosis
        /// </summary>
        /// <value>SNOMED Code for this diagnosis</value>
        [DataMember(Name="snomedcode", EmitDefaultValue=false)]
        public int? Snomedcode { get; set; }

        /// <summary>
        /// The note entered for this diagnosis.
        /// </summary>
        /// <value>The note entered for this diagnosis.</value>
        [DataMember(Name="note", EmitDefaultValue=false)]
        public string Note { get; set; }

        /// <summary>
        /// Brief description for this SNOMED Code
        /// </summary>
        /// <value>Brief description for this SNOMED Code</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PatientEncounterDiagnosis {\n");
            sb.Append("  Diagnosisid: ").Append(Diagnosisid).Append("\n");
            sb.Append("  Icdcodes: ").Append(Icdcodes).Append("\n");
            sb.Append("  Snomedcode: ").Append(Snomedcode).Append("\n");
            sb.Append("  Note: ").Append(Note).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PatientEncounterDiagnosis);
        }

        /// <summary>
        /// Returns true if PatientEncounterDiagnosis instances are equal
        /// </summary>
        /// <param name="input">Instance of PatientEncounterDiagnosis to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PatientEncounterDiagnosis input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Diagnosisid == input.Diagnosisid ||
                    (this.Diagnosisid != null &&
                    this.Diagnosisid.Equals(input.Diagnosisid))
                ) && 
                (
                    this.Icdcodes == input.Icdcodes ||
                    this.Icdcodes != null &&
                    input.Icdcodes != null &&
                    this.Icdcodes.SequenceEqual(input.Icdcodes)
                ) && 
                (
                    this.Snomedcode == input.Snomedcode ||
                    (this.Snomedcode != null &&
                    this.Snomedcode.Equals(input.Snomedcode))
                ) && 
                (
                    this.Note == input.Note ||
                    (this.Note != null &&
                    this.Note.Equals(input.Note))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Diagnosisid != null)
                    hashCode = hashCode * 59 + this.Diagnosisid.GetHashCode();
                if (this.Icdcodes != null)
                    hashCode = hashCode * 59 + this.Icdcodes.GetHashCode();
                if (this.Snomedcode != null)
                    hashCode = hashCode * 59 + this.Snomedcode.GetHashCode();
                if (this.Note != null)
                    hashCode = hashCode * 59 + this.Note.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
