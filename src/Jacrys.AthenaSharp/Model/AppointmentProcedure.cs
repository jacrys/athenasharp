/* 
 * athenahealth More Disruption Please (MDP) API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// AppointmentProcedure
    /// </summary>
    [DataContract]
        public partial class AppointmentProcedure :  IEquatable<AppointmentProcedure>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AppointmentProcedure" /> class.
        /// </summary>
        /// <param name="procedurecategory">The category name associated with this procedure..</param>
        /// <param name="allowablemin">The minimum amount expected from payer for all services from this procedure..</param>
        /// <param name="proceduredescription">A description of this procedure..</param>
        /// <param name="chargeamount">The amount charged for this procedure..</param>
        /// <param name="transactionid">The ID of the last transaction associated with the claim..</param>
        /// <param name="procedurecode">The CPT code associated with this procedure..</param>
        /// <param name="allowablemax">The maximum amount expected from payer for all services from this procedure..</param>
        /// <param name="allowableamount">The total amount expected from payer for all services from this procedure..</param>
        public AppointmentProcedure(string procedurecategory = default(string), string allowablemin = default(string), string proceduredescription = default(string), string chargeamount = default(string), int? transactionid = default(int?), string procedurecode = default(string), string allowablemax = default(string), string allowableamount = default(string))
        {
            this.Procedurecategory = procedurecategory;
            this.Allowablemin = allowablemin;
            this.Proceduredescription = proceduredescription;
            this.Chargeamount = chargeamount;
            this.Transactionid = transactionid;
            this.Procedurecode = procedurecode;
            this.Allowablemax = allowablemax;
            this.Allowableamount = allowableamount;
        }
        
        /// <summary>
        /// The category name associated with this procedure.
        /// </summary>
        /// <value>The category name associated with this procedure.</value>
        [DataMember(Name="procedurecategory", EmitDefaultValue=false)]
        public string Procedurecategory { get; set; }

        /// <summary>
        /// The minimum amount expected from payer for all services from this procedure.
        /// </summary>
        /// <value>The minimum amount expected from payer for all services from this procedure.</value>
        [DataMember(Name="allowablemin", EmitDefaultValue=false)]
        public string Allowablemin { get; set; }

        /// <summary>
        /// A description of this procedure.
        /// </summary>
        /// <value>A description of this procedure.</value>
        [DataMember(Name="proceduredescription", EmitDefaultValue=false)]
        public string Proceduredescription { get; set; }

        /// <summary>
        /// The amount charged for this procedure.
        /// </summary>
        /// <value>The amount charged for this procedure.</value>
        [DataMember(Name="chargeamount", EmitDefaultValue=false)]
        public string Chargeamount { get; set; }

        /// <summary>
        /// The ID of the last transaction associated with the claim.
        /// </summary>
        /// <value>The ID of the last transaction associated with the claim.</value>
        [DataMember(Name="transactionid", EmitDefaultValue=false)]
        public int? Transactionid { get; set; }

        /// <summary>
        /// The CPT code associated with this procedure.
        /// </summary>
        /// <value>The CPT code associated with this procedure.</value>
        [DataMember(Name="procedurecode", EmitDefaultValue=false)]
        public string Procedurecode { get; set; }

        /// <summary>
        /// The maximum amount expected from payer for all services from this procedure.
        /// </summary>
        /// <value>The maximum amount expected from payer for all services from this procedure.</value>
        [DataMember(Name="allowablemax", EmitDefaultValue=false)]
        public string Allowablemax { get; set; }

        /// <summary>
        /// The total amount expected from payer for all services from this procedure.
        /// </summary>
        /// <value>The total amount expected from payer for all services from this procedure.</value>
        [DataMember(Name="allowableamount", EmitDefaultValue=false)]
        public string Allowableamount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AppointmentProcedure {\n");
            sb.Append("  Procedurecategory: ").Append(Procedurecategory).Append("\n");
            sb.Append("  Allowablemin: ").Append(Allowablemin).Append("\n");
            sb.Append("  Proceduredescription: ").Append(Proceduredescription).Append("\n");
            sb.Append("  Chargeamount: ").Append(Chargeamount).Append("\n");
            sb.Append("  Transactionid: ").Append(Transactionid).Append("\n");
            sb.Append("  Procedurecode: ").Append(Procedurecode).Append("\n");
            sb.Append("  Allowablemax: ").Append(Allowablemax).Append("\n");
            sb.Append("  Allowableamount: ").Append(Allowableamount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AppointmentProcedure);
        }

        /// <summary>
        /// Returns true if AppointmentProcedure instances are equal
        /// </summary>
        /// <param name="input">Instance of AppointmentProcedure to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AppointmentProcedure input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Procedurecategory == input.Procedurecategory ||
                    (this.Procedurecategory != null &&
                    this.Procedurecategory.Equals(input.Procedurecategory))
                ) && 
                (
                    this.Allowablemin == input.Allowablemin ||
                    (this.Allowablemin != null &&
                    this.Allowablemin.Equals(input.Allowablemin))
                ) && 
                (
                    this.Proceduredescription == input.Proceduredescription ||
                    (this.Proceduredescription != null &&
                    this.Proceduredescription.Equals(input.Proceduredescription))
                ) && 
                (
                    this.Chargeamount == input.Chargeamount ||
                    (this.Chargeamount != null &&
                    this.Chargeamount.Equals(input.Chargeamount))
                ) && 
                (
                    this.Transactionid == input.Transactionid ||
                    (this.Transactionid != null &&
                    this.Transactionid.Equals(input.Transactionid))
                ) && 
                (
                    this.Procedurecode == input.Procedurecode ||
                    (this.Procedurecode != null &&
                    this.Procedurecode.Equals(input.Procedurecode))
                ) && 
                (
                    this.Allowablemax == input.Allowablemax ||
                    (this.Allowablemax != null &&
                    this.Allowablemax.Equals(input.Allowablemax))
                ) && 
                (
                    this.Allowableamount == input.Allowableamount ||
                    (this.Allowableamount != null &&
                    this.Allowableamount.Equals(input.Allowableamount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Procedurecategory != null)
                    hashCode = hashCode * 59 + this.Procedurecategory.GetHashCode();
                if (this.Allowablemin != null)
                    hashCode = hashCode * 59 + this.Allowablemin.GetHashCode();
                if (this.Proceduredescription != null)
                    hashCode = hashCode * 59 + this.Proceduredescription.GetHashCode();
                if (this.Chargeamount != null)
                    hashCode = hashCode * 59 + this.Chargeamount.GetHashCode();
                if (this.Transactionid != null)
                    hashCode = hashCode * 59 + this.Transactionid.GetHashCode();
                if (this.Procedurecode != null)
                    hashCode = hashCode * 59 + this.Procedurecode.GetHashCode();
                if (this.Allowablemax != null)
                    hashCode = hashCode * 59 + this.Allowablemax.GetHashCode();
                if (this.Allowableamount != null)
                    hashCode = hashCode * 59 + this.Allowableamount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
