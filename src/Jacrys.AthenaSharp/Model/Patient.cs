/* 
 * athenahealth More Disruption Please (MDP) API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Jacrys.AthenaSharp.Client.SwaggerDateConverter;

namespace Jacrys.AthenaSharp.Model
{
    /// <summary>
    /// Patient
    /// </summary>
    [DataContract]
        public partial class Patient :  IEquatable<Patient>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Patient" /> class.
        /// </summary>
        /// <param name="homeboundyn">If the patient is homebound, this is true..</param>
        /// <param name="assignedsexatbirth">Sex that this patient was assigned at birth..</param>
        /// <param name="altfirstname">Alternate first name that differs from legal name..</param>
        /// <param name="ethnicitycode">Ethnicity of the patient, using the 2.16.840.1.113883.5.50 codeset. See http://www.hl7.org/implement/standards/fhir/terminologies-v3.html Special case: use \&quot;declined\&quot; to indicate that the patient declined to answer. .</param>
        /// <param name="industrycode">Industry of the patient, using the US Census industry code (code system 2.16.840.1.113883.6.310). \&quot;other\&quot; can be used as well..</param>
        /// <param name="language6392code">Language of the patient, using the ISO 639.2 code. (http://www.loc.gov/standards/iso639-2/php/code_list.php; \&quot;T\&quot; or terminology code) Special case: use \&quot;declined\&quot; to indicate that the patient declined to answer. .</param>
        /// <param name="localpatientid">Given showlocalpatientid is true, comma separated local patient id will be returned, if patient id is enterprise id else given patient id will be displayed..</param>
        /// <param name="deceaseddate">If present, the date on which a patient died..</param>
        /// <param name="firstappointment">The first appointment for this patient, excluding cancelled or no-show appointments. (mm/dd/yyyy h24:mi).</param>
        /// <param name="primaryproviderid">The \&quot;primary\&quot; provider for this patient, if set..</param>
        /// <param name="genderidentityother">If a patient does not identify with any prescribed gender identity choice, this field stores the patient-provided description of gender identity..</param>
        /// <param name="portalstatus">Portal status details. See /patients/{patientid}/portalstatus for details..</param>
        /// <param name="preferredpronouns">Pronoun this patient uses..</param>
        /// <param name="lastappointment">The last appointment for this patient (before today), excluding cancelled or no-show appointments. (mm/dd/yyyy h24:mi).</param>
        /// <param name="allpatientstatuses">message.</param>
        /// <param name="donotcallyn">Warning! This patient will not receive any communication from the practice if this field is set to true..</param>
        /// <param name="primarydepartmentid">The patient&#x27;s \&quot;current\&quot; department. This field is not always set by the practice..</param>
        /// <param name="status">The \&quot;status\&quot; of the patient, one of active, inactive, prospective, or deleted..</param>
        /// <param name="balances">List of balances owed by the patient, broken down by provider (financial) group..</param>
        /// <param name="lastemail">The last email for this patient on file..</param>
        /// <param name="racecode">The patient race hierarchical code as specified in Race &amp; Ethnicity - CDC * (2.16.840.1.113883.1.11.14914).</param>
        /// <param name="sexualorientation">Sexual orientation of this patient..</param>
        /// <param name="genderidentity">Gender with which this patient identifies..</param>
        /// <param name="emailexistsyn">True if email exists. False if patient declined. Null if status is unknown..</param>
        /// <param name="occupationcode">Occupation of the patient, using the US Census occupation code (code system 2.16.840.1.113883.6.240). \&quot;other\&quot; can be used as well..</param>
        /// <param name="race">The patient race, using the 2.16.840.1.113883.5.104 codeset. See http://www.hl7.org/implement/standards/fhir/terminologies-v3.html Special case: use \&quot;declined\&quot; to indicate that the patient declined to answer. Multiple values or a tab-seperated list of codes is acceptable for multiple races for input. The first race will be considered \&quot;primary\&quot;. Note: you must update all values at once if you update any. .</param>
        /// <param name="sexualorientationother">If a patient does not identify with any prescribed sexual orientation choice, this field stores the patient-provided description of sexual orientation..</param>
        /// <param name="patientid">Please remember to never disclose this ID to patients since it may result in inadvertant disclosure that a patient exists in a practice already..</param>
        /// <param name="firstname">Patient&#x27;s first name.</param>
        /// <param name="middlename">Patient&#x27;s middle name.</param>
        /// <param name="lastname">Patient&#x27;s last name.</param>
        /// <param name="suffix">Patient&#x27;s name suffix.</param>
        /// <param name="preferredname">The patient&#x27;s preferred name (i.e. nickname)..</param>
        /// <param name="address1">Patient&#x27;s address - 1st line.</param>
        /// <param name="address2">Patient&#x27;s address - 2nd line.</param>
        /// <param name="city">Patient&#x27;s city.</param>
        /// <param name="state">Patient&#x27;s state (2 letter abbreviation).</param>
        /// <param name="zip">Patient&#x27;s zip. Matching occurs on first 5 characters..</param>
        /// <param name="countrycode">Patient&#x27;s country code.</param>
        /// <param name="countrycode3166">Patient&#x27;s country code (ISO 3166-1).</param>
        /// <param name="homephone">The patient&#x27;s home phone number. Invalid numbers in a GET/PUT will be ignored. Patient phone numbers and other data may change, and one phone number may be associated with multiple patients. You are responsible for taking additional steps to verify patient identity and for using this data in accordance with applicable law, including HIPAA. Invalid numbers in a POST will be ignored, possibly resulting in an error. .</param>
        /// <param name="mobilephone">The patient&#x27;s mobile phone number. On input, &#x27;declined&#x27; can be used to indicate no number.  (Alternatively, hasmobile can also be set to false. \&quot;declined\&quot; simply does this for you.) Invalid numbers in a GET/PUT will be ignored. Patient phone numbers and other data may change, and one phone number may be associated with multiple patients. You are responsible for taking additional steps to verify patient identity and for using this data in accordance with applicable law, including HIPAA. Invalid numbers in a POST will be ignored, possibly resulting in an error. .</param>
        /// <param name="hasmobileyn">Set to false if a client has declined a phone number..</param>
        /// <param name="workphone">The patient&#x27;s work phone number. Generally not used to contact a patient. Invalid numbers in a GET/PUT will be ignored. Patient phone numbers and other data may change, and one phone number may be associated with multiple patients. You are responsible for taking additional steps to verify patient identity and for using this data in accordance with applicable law, including HIPAA. Invalid numbers in a POST will be ignored, possibly resulting in an error. .</param>
        /// <param name="email">Patient&#x27;s email address. &#x27;declined&#x27; can be used to indicate just that..</param>
        /// <param name="ssn">The patient&#x27;s SSN.</param>
        /// <param name="racename">The patient&#x27;s primary race name. See race for more complete details..</param>
        /// <param name="sex">Patient&#x27;s sex (M/F).</param>
        /// <param name="dob">Patient&#x27;s DOB (mm/dd/yyyy).</param>
        /// <param name="maritalstatus">Marital Status (D&#x3D;Divorced, M&#x3D;Married, S&#x3D;Single, U&#x3D;Unknown, W&#x3D;Widowed, X&#x3D;Separated, P&#x3D;Partner).</param>
        /// <param name="contactpreference">The MU-required field for \&quot;preferred contact method\&quot;. This is not used by any automated systems..</param>
        /// <param name="contactname">The name of the (emergency) person to contact about the patient. The contactname, contactrelationship, contacthomephone, and contactmobilephone fields are all related to the emergency contact for the patient. They are NOT related to the contractpreference_* fields. .</param>
        /// <param name="contactrelationship">Emergency contact relationship (one of SPOUSE, PARENT, CHILD, SIBLING, FRIEND, COUSIN, GUARDIAN, OTHER).</param>
        /// <param name="contacthomephone">Emergency contact home phone. Invalid numbers in a GET/PUT will be ignored. Patient phone numbers and other data may change, and one phone number may be associated with multiple patients. You are responsible for taking additional steps to verify patient identity and for using this data in accordance with applicable law, including HIPAA. Invalid numbers in a POST will be ignored, possibly resulting in an error. .</param>
        /// <param name="contactmobilephone">Emergency contact mobile phone. Invalid numbers in a GET/PUT will be ignored. Patient phone numbers and other data may change, and one phone number may be associated with multiple patients. You are responsible for taking additional steps to verify patient identity and for using this data in accordance with applicable law, including HIPAA. Invalid numbers in a POST will be ignored, possibly resulting in an error. .</param>
        /// <param name="nextkinname">The full name of the next of kin..</param>
        /// <param name="nextkinrelationship">The next of kin relationship (one of SPOUSE, PARENT, CHILD, SIBLING, FRIEND, COUSIN, GUARDIAN, OTHER).</param>
        /// <param name="nextkinphone">The next of kin phone number. Invalid numbers in a GET/PUT will be ignored. Patient phone numbers and other data may change, and one phone number may be associated with multiple patients. You are responsible for taking additional steps to verify patient identity and for using this data in accordance with applicable law, including HIPAA. Invalid numbers in a POST will be ignored, possibly resulting in an error. .</param>
        /// <param name="guardianfirstname">The first name of the patient&#x27;s guardian..</param>
        /// <param name="guardianmiddlename">The middle name of the patient&#x27;s guardian..</param>
        /// <param name="guardianlastname">The last name of the patient&#x27;s guardian..</param>
        /// <param name="guardiansuffix">The suffix of the patient&#x27;s guardian..</param>
        /// <param name="guarantorfirstname">Guarantor&#x27;s first name.</param>
        /// <param name="guarantormiddlename">Guarantor&#x27;s middle name.</param>
        /// <param name="guarantorlastname">Guarantor&#x27;s last name.</param>
        /// <param name="guarantorsuffix">Guarantor&#x27;s name suffix.</param>
        /// <param name="guarantoraddress1">Guarantor&#x27;s address.</param>
        /// <param name="guarantoraddress2">Guarantor&#x27;s address - line 2.</param>
        /// <param name="guarantorcity">Guarantor&#x27;s city.</param>
        /// <param name="guarantorstate">Guarantor&#x27;s state (2 letter abbreviation).</param>
        /// <param name="guarantorzip">Guarantor&#x27;s zip.</param>
        /// <param name="guarantorcountrycode">Guarantor&#x27;s country code.</param>
        /// <param name="guarantorcountrycode3166">Guarantor&#x27;s country code (ISO 3166-1).</param>
        /// <param name="guarantordob">Guarantor&#x27;s DOB (mm/dd/yyyy).</param>
        /// <param name="guarantorssn">Guarantor&#x27;s SSN.</param>
        /// <param name="guarantoremail">Guarantor&#x27;s email address.</param>
        /// <param name="guarantorphone">Guarantor&#x27;s phone number. Invalid numbers in a GET/PUT will be ignored. Patient phone numbers and other data may change, and one phone number may be associated with multiple patients. You are responsible for taking additional steps to verify patient identity and for using this data in accordance with applicable law, including HIPAA. Invalid numbers in a POST will be ignored, possibly resulting in an error. .</param>
        /// <param name="guarantorrelationshiptopatient">The guarantor&#x27;s relationship to the patient.</param>
        /// <param name="guarantoraddresssameaspatient">The address of the guarantor is the same as the patient..</param>
        /// <param name="registrationdate">Date the patient was registered..</param>
        /// <param name="departmentid">Primary (registration) department ID..</param>
        /// <param name="portaltermsonfile">Flag determining whether or not the patient has accepted the Terms and Conditions for the patient portal..</param>
        /// <param name="portalsignatureonfile">This flag is set if the patient&#x27;s signature is on file.</param>
        /// <param name="privacyinformationverified">This flag is set if the patient&#x27;s privacy information has been verified. Privacy information returns True if all of the items referenced in GET /patients/{patientid}/privacyinformationverified are true. Privacy information returns false if any of the items referenced in the GET /patients/{patientid}/privacyinformationverified API are false or expired. .</param>
        /// <param name="medicationhistoryconsentverified">Medication history consent status. If a practice doesn&#x27;t have RXHub or Surescripts enabled, this will be null.</param>
        /// <param name="maritalstatusname">The long version of the marital status..</param>
        /// <param name="employerid">The patient&#x27;s employer&#x27;s ID (from /employers call).</param>
        /// <param name="employerphone">The patient&#x27;s employer&#x27;s phone number. Normally, this is set by setting employerid. However, setting this value can be used to override this on an individual patient. Invalid numbers in a GET/PUT will be ignored. Patient phone numbers and other data may change, and one phone number may be associated with multiple patients. You are responsible for taking additional steps to verify patient identity and for using this data in accordance with applicable law, including HIPAA. Invalid numbers in a POST will be ignored, possibly resulting in an error. .</param>
        /// <param name="guarantoremployerid">The guaranror&#x27;s employer&#x27;s ID (from /employers call).</param>
        /// <param name="employername">The patient&#x27;s employer&#x27;s name..</param>
        /// <param name="employeraddress">The patient&#x27;s employer&#x27;s address..</param>
        /// <param name="employercity">The patient&#x27;s employer&#x27;s city..</param>
        /// <param name="portalaccessgiven">This flag is set if the patient has been given access to the portal. This may be set by the API user if a patient has been given access to the portal \&quot;by providing a preprinted brochure or flyer showing the URL where patients can access their Patient Care Summaries.\&quot; The practiceinfo endpoint can provide the portal URL. While technically allowed, it would be very unusual to set this to false via the API. .</param>
        public Patient(bool? homeboundyn = default(bool?), string assignedsexatbirth = default(string), string altfirstname = default(string), string ethnicitycode = default(string), int? industrycode = default(int?), string language6392code = default(string), string localpatientid = default(string), string deceaseddate = default(string), string firstappointment = default(string), int? primaryproviderid = default(int?), string genderidentityother = default(string), List<PatientPortalStatus> portalstatus = default(List<PatientPortalStatus>), string preferredpronouns = default(string), string lastappointment = default(string), List<PatientDeparmentStatus> allpatientstatuses = default(List<PatientDeparmentStatus>), bool? donotcallyn = default(bool?), int? primarydepartmentid = default(int?), string status = default(string), List<PatientBalance> balances = default(List<PatientBalance>), string lastemail = default(string), string racecode = default(string), string sexualorientation = default(string), string genderidentity = default(string), bool? emailexistsyn = default(bool?), int? occupationcode = default(int?), List<string> race = default(List<string>), string sexualorientationother = default(string), int? patientid = default(int?), string firstname = default(string), string middlename = default(string), string lastname = default(string), string suffix = default(string), string preferredname = default(string), string address1 = default(string), string address2 = default(string), string city = default(string), string state = default(string), string zip = default(string), string countrycode = default(string), string countrycode3166 = default(string), string homephone = default(string), string mobilephone = default(string), bool? hasmobileyn = default(bool?), string workphone = default(string), string email = default(string), string ssn = default(string), string racename = default(string), string sex = default(string), string dob = default(string), string maritalstatus = default(string), string contactpreference = default(string), string contactname = default(string), string contactrelationship = default(string), string contacthomephone = default(string), string contactmobilephone = default(string), string nextkinname = default(string), string nextkinrelationship = default(string), string nextkinphone = default(string), string guardianfirstname = default(string), string guardianmiddlename = default(string), string guardianlastname = default(string), string guardiansuffix = default(string), string guarantorfirstname = default(string), string guarantormiddlename = default(string), string guarantorlastname = default(string), string guarantorsuffix = default(string), string guarantoraddress1 = default(string), string guarantoraddress2 = default(string), string guarantorcity = default(string), string guarantorstate = default(string), string guarantorzip = default(string), string guarantorcountrycode = default(string), string guarantorcountrycode3166 = default(string), string guarantordob = default(string), string guarantorssn = default(string), string guarantoremail = default(string), string guarantorphone = default(string), int? guarantorrelationshiptopatient = default(int?), bool? guarantoraddresssameaspatient = default(bool?), string registrationdate = default(string), int? departmentid = default(int?), bool? portaltermsonfile = default(bool?), bool? portalsignatureonfile = default(bool?), bool? privacyinformationverified = default(bool?), bool? medicationhistoryconsentverified = default(bool?), string maritalstatusname = default(string), int? employerid = default(int?), string employerphone = default(string), int? guarantoremployerid = default(int?), string employername = default(string), string employeraddress = default(string), string employercity = default(string), bool? portalaccessgiven = default(bool?))
        {
            this.Homeboundyn = homeboundyn;
            this.Assignedsexatbirth = assignedsexatbirth;
            this.Altfirstname = altfirstname;
            this.Ethnicitycode = ethnicitycode;
            this.Industrycode = industrycode;
            this.Language6392code = language6392code;
            this.Localpatientid = localpatientid;
            this.Deceaseddate = deceaseddate;
            this.Firstappointment = firstappointment;
            this.Primaryproviderid = primaryproviderid;
            this.Genderidentityother = genderidentityother;
            this.Portalstatus = portalstatus;
            this.Preferredpronouns = preferredpronouns;
            this.Lastappointment = lastappointment;
            this.Allpatientstatuses = allpatientstatuses;
            this.Donotcallyn = donotcallyn;
            this.Primarydepartmentid = primarydepartmentid;
            this.Status = status;
            this.Balances = balances;
            this.Lastemail = lastemail;
            this.Racecode = racecode;
            this.Sexualorientation = sexualorientation;
            this.Genderidentity = genderidentity;
            this.Emailexistsyn = emailexistsyn;
            this.Occupationcode = occupationcode;
            this.Race = race;
            this.Sexualorientationother = sexualorientationother;
            this.Patientid = patientid;
            this.Firstname = firstname;
            this.Middlename = middlename;
            this.Lastname = lastname;
            this.Suffix = suffix;
            this.Preferredname = preferredname;
            this.Address1 = address1;
            this.Address2 = address2;
            this.City = city;
            this.State = state;
            this.Zip = zip;
            this.Countrycode = countrycode;
            this.Countrycode3166 = countrycode3166;
            this.Homephone = homephone;
            this.Mobilephone = mobilephone;
            this.Hasmobileyn = hasmobileyn;
            this.Workphone = workphone;
            this.Email = email;
            this.Ssn = ssn;
            this.Racename = racename;
            this.Sex = sex;
            this.Dob = dob;
            this.Maritalstatus = maritalstatus;
            this.Contactpreference = contactpreference;
            this.Contactname = contactname;
            this.Contactrelationship = contactrelationship;
            this.Contacthomephone = contacthomephone;
            this.Contactmobilephone = contactmobilephone;
            this.Nextkinname = nextkinname;
            this.Nextkinrelationship = nextkinrelationship;
            this.Nextkinphone = nextkinphone;
            this.Guardianfirstname = guardianfirstname;
            this.Guardianmiddlename = guardianmiddlename;
            this.Guardianlastname = guardianlastname;
            this.Guardiansuffix = guardiansuffix;
            this.Guarantorfirstname = guarantorfirstname;
            this.Guarantormiddlename = guarantormiddlename;
            this.Guarantorlastname = guarantorlastname;
            this.Guarantorsuffix = guarantorsuffix;
            this.Guarantoraddress1 = guarantoraddress1;
            this.Guarantoraddress2 = guarantoraddress2;
            this.Guarantorcity = guarantorcity;
            this.Guarantorstate = guarantorstate;
            this.Guarantorzip = guarantorzip;
            this.Guarantorcountrycode = guarantorcountrycode;
            this.Guarantorcountrycode3166 = guarantorcountrycode3166;
            this.Guarantordob = guarantordob;
            this.Guarantorssn = guarantorssn;
            this.Guarantoremail = guarantoremail;
            this.Guarantorphone = guarantorphone;
            this.Guarantorrelationshiptopatient = guarantorrelationshiptopatient;
            this.Guarantoraddresssameaspatient = guarantoraddresssameaspatient;
            this.Registrationdate = registrationdate;
            this.Departmentid = departmentid;
            this.Portaltermsonfile = portaltermsonfile;
            this.Portalsignatureonfile = portalsignatureonfile;
            this.Privacyinformationverified = privacyinformationverified;
            this.Medicationhistoryconsentverified = medicationhistoryconsentverified;
            this.Maritalstatusname = maritalstatusname;
            this.Employerid = employerid;
            this.Employerphone = employerphone;
            this.Guarantoremployerid = guarantoremployerid;
            this.Employername = employername;
            this.Employeraddress = employeraddress;
            this.Employercity = employercity;
            this.Portalaccessgiven = portalaccessgiven;
        }
        
        /// <summary>
        /// If the patient is homebound, this is true.
        /// </summary>
        /// <value>If the patient is homebound, this is true.</value>
        [DataMember(Name="homeboundyn", EmitDefaultValue=false)]
        public bool? Homeboundyn { get; set; }

        /// <summary>
        /// Sex that this patient was assigned at birth.
        /// </summary>
        /// <value>Sex that this patient was assigned at birth.</value>
        [DataMember(Name="assignedsexatbirth", EmitDefaultValue=false)]
        public string Assignedsexatbirth { get; set; }

        /// <summary>
        /// Alternate first name that differs from legal name.
        /// </summary>
        /// <value>Alternate first name that differs from legal name.</value>
        [DataMember(Name="altfirstname", EmitDefaultValue=false)]
        public string Altfirstname { get; set; }

        /// <summary>
        /// Ethnicity of the patient, using the 2.16.840.1.113883.5.50 codeset. See http://www.hl7.org/implement/standards/fhir/terminologies-v3.html Special case: use \&quot;declined\&quot; to indicate that the patient declined to answer. 
        /// </summary>
        /// <value>Ethnicity of the patient, using the 2.16.840.1.113883.5.50 codeset. See http://www.hl7.org/implement/standards/fhir/terminologies-v3.html Special case: use \&quot;declined\&quot; to indicate that the patient declined to answer. </value>
        [DataMember(Name="ethnicitycode", EmitDefaultValue=false)]
        public string Ethnicitycode { get; set; }

        /// <summary>
        /// Industry of the patient, using the US Census industry code (code system 2.16.840.1.113883.6.310). \&quot;other\&quot; can be used as well.
        /// </summary>
        /// <value>Industry of the patient, using the US Census industry code (code system 2.16.840.1.113883.6.310). \&quot;other\&quot; can be used as well.</value>
        [DataMember(Name="industrycode", EmitDefaultValue=false)]
        public int? Industrycode { get; set; }

        /// <summary>
        /// Language of the patient, using the ISO 639.2 code. (http://www.loc.gov/standards/iso639-2/php/code_list.php; \&quot;T\&quot; or terminology code) Special case: use \&quot;declined\&quot; to indicate that the patient declined to answer. 
        /// </summary>
        /// <value>Language of the patient, using the ISO 639.2 code. (http://www.loc.gov/standards/iso639-2/php/code_list.php; \&quot;T\&quot; or terminology code) Special case: use \&quot;declined\&quot; to indicate that the patient declined to answer. </value>
        [DataMember(Name="language6392code", EmitDefaultValue=false)]
        public string Language6392code { get; set; }

        /// <summary>
        /// Given showlocalpatientid is true, comma separated local patient id will be returned, if patient id is enterprise id else given patient id will be displayed.
        /// </summary>
        /// <value>Given showlocalpatientid is true, comma separated local patient id will be returned, if patient id is enterprise id else given patient id will be displayed.</value>
        [DataMember(Name="localpatientid", EmitDefaultValue=false)]
        public string Localpatientid { get; set; }

        /// <summary>
        /// If present, the date on which a patient died.
        /// </summary>
        /// <value>If present, the date on which a patient died.</value>
        [DataMember(Name="deceaseddate", EmitDefaultValue=false)]
        public string Deceaseddate { get; set; }

        /// <summary>
        /// The first appointment for this patient, excluding cancelled or no-show appointments. (mm/dd/yyyy h24:mi)
        /// </summary>
        /// <value>The first appointment for this patient, excluding cancelled or no-show appointments. (mm/dd/yyyy h24:mi)</value>
        [DataMember(Name="firstappointment", EmitDefaultValue=false)]
        public string Firstappointment { get; set; }

        /// <summary>
        /// The \&quot;primary\&quot; provider for this patient, if set.
        /// </summary>
        /// <value>The \&quot;primary\&quot; provider for this patient, if set.</value>
        [DataMember(Name="primaryproviderid", EmitDefaultValue=false)]
        public int? Primaryproviderid { get; set; }

        /// <summary>
        /// If a patient does not identify with any prescribed gender identity choice, this field stores the patient-provided description of gender identity.
        /// </summary>
        /// <value>If a patient does not identify with any prescribed gender identity choice, this field stores the patient-provided description of gender identity.</value>
        [DataMember(Name="genderidentityother", EmitDefaultValue=false)]
        public string Genderidentityother { get; set; }

        /// <summary>
        /// Portal status details. See /patients/{patientid}/portalstatus for details.
        /// </summary>
        /// <value>Portal status details. See /patients/{patientid}/portalstatus for details.</value>
        [DataMember(Name="portalstatus", EmitDefaultValue=false)]
        public List<PatientPortalStatus> Portalstatus { get; set; }

        /// <summary>
        /// Pronoun this patient uses.
        /// </summary>
        /// <value>Pronoun this patient uses.</value>
        [DataMember(Name="preferredpronouns", EmitDefaultValue=false)]
        public string Preferredpronouns { get; set; }

        /// <summary>
        /// The last appointment for this patient (before today), excluding cancelled or no-show appointments. (mm/dd/yyyy h24:mi)
        /// </summary>
        /// <value>The last appointment for this patient (before today), excluding cancelled or no-show appointments. (mm/dd/yyyy h24:mi)</value>
        [DataMember(Name="lastappointment", EmitDefaultValue=false)]
        public string Lastappointment { get; set; }

        /// <summary>
        /// message
        /// </summary>
        /// <value>message</value>
        [DataMember(Name="allpatientstatuses", EmitDefaultValue=false)]
        public List<PatientDeparmentStatus> Allpatientstatuses { get; set; }

        /// <summary>
        /// Warning! This patient will not receive any communication from the practice if this field is set to true.
        /// </summary>
        /// <value>Warning! This patient will not receive any communication from the practice if this field is set to true.</value>
        [DataMember(Name="donotcallyn", EmitDefaultValue=false)]
        public bool? Donotcallyn { get; set; }

        /// <summary>
        /// The patient&#x27;s \&quot;current\&quot; department. This field is not always set by the practice.
        /// </summary>
        /// <value>The patient&#x27;s \&quot;current\&quot; department. This field is not always set by the practice.</value>
        [DataMember(Name="primarydepartmentid", EmitDefaultValue=false)]
        public int? Primarydepartmentid { get; set; }

        /// <summary>
        /// The \&quot;status\&quot; of the patient, one of active, inactive, prospective, or deleted.
        /// </summary>
        /// <value>The \&quot;status\&quot; of the patient, one of active, inactive, prospective, or deleted.</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// List of balances owed by the patient, broken down by provider (financial) group.
        /// </summary>
        /// <value>List of balances owed by the patient, broken down by provider (financial) group.</value>
        [DataMember(Name="balances", EmitDefaultValue=false)]
        public List<PatientBalance> Balances { get; set; }

        /// <summary>
        /// The last email for this patient on file.
        /// </summary>
        /// <value>The last email for this patient on file.</value>
        [DataMember(Name="lastemail", EmitDefaultValue=false)]
        public string Lastemail { get; set; }

        /// <summary>
        /// The patient race hierarchical code as specified in Race &amp; Ethnicity - CDC * (2.16.840.1.113883.1.11.14914)
        /// </summary>
        /// <value>The patient race hierarchical code as specified in Race &amp; Ethnicity - CDC * (2.16.840.1.113883.1.11.14914)</value>
        [DataMember(Name="racecode", EmitDefaultValue=false)]
        public string Racecode { get; set; }

        /// <summary>
        /// Sexual orientation of this patient.
        /// </summary>
        /// <value>Sexual orientation of this patient.</value>
        [DataMember(Name="sexualorientation", EmitDefaultValue=false)]
        public string Sexualorientation { get; set; }

        /// <summary>
        /// Gender with which this patient identifies.
        /// </summary>
        /// <value>Gender with which this patient identifies.</value>
        [DataMember(Name="genderidentity", EmitDefaultValue=false)]
        public string Genderidentity { get; set; }

        /// <summary>
        /// True if email exists. False if patient declined. Null if status is unknown.
        /// </summary>
        /// <value>True if email exists. False if patient declined. Null if status is unknown.</value>
        [DataMember(Name="emailexistsyn", EmitDefaultValue=false)]
        public bool? Emailexistsyn { get; set; }

        /// <summary>
        /// Occupation of the patient, using the US Census occupation code (code system 2.16.840.1.113883.6.240). \&quot;other\&quot; can be used as well.
        /// </summary>
        /// <value>Occupation of the patient, using the US Census occupation code (code system 2.16.840.1.113883.6.240). \&quot;other\&quot; can be used as well.</value>
        [DataMember(Name="occupationcode", EmitDefaultValue=false)]
        public int? Occupationcode { get; set; }

        /// <summary>
        /// The patient race, using the 2.16.840.1.113883.5.104 codeset. See http://www.hl7.org/implement/standards/fhir/terminologies-v3.html Special case: use \&quot;declined\&quot; to indicate that the patient declined to answer. Multiple values or a tab-seperated list of codes is acceptable for multiple races for input. The first race will be considered \&quot;primary\&quot;. Note: you must update all values at once if you update any. 
        /// </summary>
        /// <value>The patient race, using the 2.16.840.1.113883.5.104 codeset. See http://www.hl7.org/implement/standards/fhir/terminologies-v3.html Special case: use \&quot;declined\&quot; to indicate that the patient declined to answer. Multiple values or a tab-seperated list of codes is acceptable for multiple races for input. The first race will be considered \&quot;primary\&quot;. Note: you must update all values at once if you update any. </value>
        [DataMember(Name="race", EmitDefaultValue=false)]
        public List<string> Race { get; set; }

        /// <summary>
        /// If a patient does not identify with any prescribed sexual orientation choice, this field stores the patient-provided description of sexual orientation.
        /// </summary>
        /// <value>If a patient does not identify with any prescribed sexual orientation choice, this field stores the patient-provided description of sexual orientation.</value>
        [DataMember(Name="sexualorientationother", EmitDefaultValue=false)]
        public string Sexualorientationother { get; set; }

        /// <summary>
        /// Please remember to never disclose this ID to patients since it may result in inadvertant disclosure that a patient exists in a practice already.
        /// </summary>
        /// <value>Please remember to never disclose this ID to patients since it may result in inadvertant disclosure that a patient exists in a practice already.</value>
        [DataMember(Name="patientid", EmitDefaultValue=false)]
        public int? Patientid { get; set; }

        /// <summary>
        /// Patient&#x27;s first name
        /// </summary>
        /// <value>Patient&#x27;s first name</value>
        [DataMember(Name="firstname", EmitDefaultValue=false)]
        public string Firstname { get; set; }

        /// <summary>
        /// Patient&#x27;s middle name
        /// </summary>
        /// <value>Patient&#x27;s middle name</value>
        [DataMember(Name="middlename", EmitDefaultValue=false)]
        public string Middlename { get; set; }

        /// <summary>
        /// Patient&#x27;s last name
        /// </summary>
        /// <value>Patient&#x27;s last name</value>
        [DataMember(Name="lastname", EmitDefaultValue=false)]
        public string Lastname { get; set; }

        /// <summary>
        /// Patient&#x27;s name suffix
        /// </summary>
        /// <value>Patient&#x27;s name suffix</value>
        [DataMember(Name="suffix", EmitDefaultValue=false)]
        public string Suffix { get; set; }

        /// <summary>
        /// The patient&#x27;s preferred name (i.e. nickname).
        /// </summary>
        /// <value>The patient&#x27;s preferred name (i.e. nickname).</value>
        [DataMember(Name="preferredname", EmitDefaultValue=false)]
        public string Preferredname { get; set; }

        /// <summary>
        /// Patient&#x27;s address - 1st line
        /// </summary>
        /// <value>Patient&#x27;s address - 1st line</value>
        [DataMember(Name="address1", EmitDefaultValue=false)]
        public string Address1 { get; set; }

        /// <summary>
        /// Patient&#x27;s address - 2nd line
        /// </summary>
        /// <value>Patient&#x27;s address - 2nd line</value>
        [DataMember(Name="address2", EmitDefaultValue=false)]
        public string Address2 { get; set; }

        /// <summary>
        /// Patient&#x27;s city
        /// </summary>
        /// <value>Patient&#x27;s city</value>
        [DataMember(Name="city", EmitDefaultValue=false)]
        public string City { get; set; }

        /// <summary>
        /// Patient&#x27;s state (2 letter abbreviation)
        /// </summary>
        /// <value>Patient&#x27;s state (2 letter abbreviation)</value>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public string State { get; set; }

        /// <summary>
        /// Patient&#x27;s zip. Matching occurs on first 5 characters.
        /// </summary>
        /// <value>Patient&#x27;s zip. Matching occurs on first 5 characters.</value>
        [DataMember(Name="zip", EmitDefaultValue=false)]
        public string Zip { get; set; }

        /// <summary>
        /// Patient&#x27;s country code
        /// </summary>
        /// <value>Patient&#x27;s country code</value>
        [DataMember(Name="countrycode", EmitDefaultValue=false)]
        public string Countrycode { get; set; }

        /// <summary>
        /// Patient&#x27;s country code (ISO 3166-1)
        /// </summary>
        /// <value>Patient&#x27;s country code (ISO 3166-1)</value>
        [DataMember(Name="countrycode3166", EmitDefaultValue=false)]
        public string Countrycode3166 { get; set; }

        /// <summary>
        /// The patient&#x27;s home phone number. Invalid numbers in a GET/PUT will be ignored. Patient phone numbers and other data may change, and one phone number may be associated with multiple patients. You are responsible for taking additional steps to verify patient identity and for using this data in accordance with applicable law, including HIPAA. Invalid numbers in a POST will be ignored, possibly resulting in an error. 
        /// </summary>
        /// <value>The patient&#x27;s home phone number. Invalid numbers in a GET/PUT will be ignored. Patient phone numbers and other data may change, and one phone number may be associated with multiple patients. You are responsible for taking additional steps to verify patient identity and for using this data in accordance with applicable law, including HIPAA. Invalid numbers in a POST will be ignored, possibly resulting in an error. </value>
        [DataMember(Name="homephone", EmitDefaultValue=false)]
        public string Homephone { get; set; }

        /// <summary>
        /// The patient&#x27;s mobile phone number. On input, &#x27;declined&#x27; can be used to indicate no number.  (Alternatively, hasmobile can also be set to false. \&quot;declined\&quot; simply does this for you.) Invalid numbers in a GET/PUT will be ignored. Patient phone numbers and other data may change, and one phone number may be associated with multiple patients. You are responsible for taking additional steps to verify patient identity and for using this data in accordance with applicable law, including HIPAA. Invalid numbers in a POST will be ignored, possibly resulting in an error. 
        /// </summary>
        /// <value>The patient&#x27;s mobile phone number. On input, &#x27;declined&#x27; can be used to indicate no number.  (Alternatively, hasmobile can also be set to false. \&quot;declined\&quot; simply does this for you.) Invalid numbers in a GET/PUT will be ignored. Patient phone numbers and other data may change, and one phone number may be associated with multiple patients. You are responsible for taking additional steps to verify patient identity and for using this data in accordance with applicable law, including HIPAA. Invalid numbers in a POST will be ignored, possibly resulting in an error. </value>
        [DataMember(Name="mobilephone", EmitDefaultValue=false)]
        public string Mobilephone { get; set; }

        /// <summary>
        /// Set to false if a client has declined a phone number.
        /// </summary>
        /// <value>Set to false if a client has declined a phone number.</value>
        [DataMember(Name="hasmobileyn", EmitDefaultValue=false)]
        public bool? Hasmobileyn { get; set; }

        /// <summary>
        /// The patient&#x27;s work phone number. Generally not used to contact a patient. Invalid numbers in a GET/PUT will be ignored. Patient phone numbers and other data may change, and one phone number may be associated with multiple patients. You are responsible for taking additional steps to verify patient identity and for using this data in accordance with applicable law, including HIPAA. Invalid numbers in a POST will be ignored, possibly resulting in an error. 
        /// </summary>
        /// <value>The patient&#x27;s work phone number. Generally not used to contact a patient. Invalid numbers in a GET/PUT will be ignored. Patient phone numbers and other data may change, and one phone number may be associated with multiple patients. You are responsible for taking additional steps to verify patient identity and for using this data in accordance with applicable law, including HIPAA. Invalid numbers in a POST will be ignored, possibly resulting in an error. </value>
        [DataMember(Name="workphone", EmitDefaultValue=false)]
        public string Workphone { get; set; }

        /// <summary>
        /// Patient&#x27;s email address. &#x27;declined&#x27; can be used to indicate just that.
        /// </summary>
        /// <value>Patient&#x27;s email address. &#x27;declined&#x27; can be used to indicate just that.</value>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// The patient&#x27;s SSN
        /// </summary>
        /// <value>The patient&#x27;s SSN</value>
        [DataMember(Name="ssn", EmitDefaultValue=false)]
        public string Ssn { get; set; }

        /// <summary>
        /// The patient&#x27;s primary race name. See race for more complete details.
        /// </summary>
        /// <value>The patient&#x27;s primary race name. See race for more complete details.</value>
        [DataMember(Name="racename", EmitDefaultValue=false)]
        public string Racename { get; set; }

        /// <summary>
        /// Patient&#x27;s sex (M/F)
        /// </summary>
        /// <value>Patient&#x27;s sex (M/F)</value>
        [DataMember(Name="sex", EmitDefaultValue=false)]
        public string Sex { get; set; }

        /// <summary>
        /// Patient&#x27;s DOB (mm/dd/yyyy)
        /// </summary>
        /// <value>Patient&#x27;s DOB (mm/dd/yyyy)</value>
        [DataMember(Name="dob", EmitDefaultValue=false)]
        public string Dob { get; set; }

        /// <summary>
        /// Marital Status (D&#x3D;Divorced, M&#x3D;Married, S&#x3D;Single, U&#x3D;Unknown, W&#x3D;Widowed, X&#x3D;Separated, P&#x3D;Partner)
        /// </summary>
        /// <value>Marital Status (D&#x3D;Divorced, M&#x3D;Married, S&#x3D;Single, U&#x3D;Unknown, W&#x3D;Widowed, X&#x3D;Separated, P&#x3D;Partner)</value>
        [DataMember(Name="maritalstatus", EmitDefaultValue=false)]
        public string Maritalstatus { get; set; }

        /// <summary>
        /// The MU-required field for \&quot;preferred contact method\&quot;. This is not used by any automated systems.
        /// </summary>
        /// <value>The MU-required field for \&quot;preferred contact method\&quot;. This is not used by any automated systems.</value>
        [DataMember(Name="contactpreference", EmitDefaultValue=false)]
        public string Contactpreference { get; set; }

        /// <summary>
        /// The name of the (emergency) person to contact about the patient. The contactname, contactrelationship, contacthomephone, and contactmobilephone fields are all related to the emergency contact for the patient. They are NOT related to the contractpreference_* fields. 
        /// </summary>
        /// <value>The name of the (emergency) person to contact about the patient. The contactname, contactrelationship, contacthomephone, and contactmobilephone fields are all related to the emergency contact for the patient. They are NOT related to the contractpreference_* fields. </value>
        [DataMember(Name="contactname", EmitDefaultValue=false)]
        public string Contactname { get; set; }

        /// <summary>
        /// Emergency contact relationship (one of SPOUSE, PARENT, CHILD, SIBLING, FRIEND, COUSIN, GUARDIAN, OTHER)
        /// </summary>
        /// <value>Emergency contact relationship (one of SPOUSE, PARENT, CHILD, SIBLING, FRIEND, COUSIN, GUARDIAN, OTHER)</value>
        [DataMember(Name="contactrelationship", EmitDefaultValue=false)]
        public string Contactrelationship { get; set; }

        /// <summary>
        /// Emergency contact home phone. Invalid numbers in a GET/PUT will be ignored. Patient phone numbers and other data may change, and one phone number may be associated with multiple patients. You are responsible for taking additional steps to verify patient identity and for using this data in accordance with applicable law, including HIPAA. Invalid numbers in a POST will be ignored, possibly resulting in an error. 
        /// </summary>
        /// <value>Emergency contact home phone. Invalid numbers in a GET/PUT will be ignored. Patient phone numbers and other data may change, and one phone number may be associated with multiple patients. You are responsible for taking additional steps to verify patient identity and for using this data in accordance with applicable law, including HIPAA. Invalid numbers in a POST will be ignored, possibly resulting in an error. </value>
        [DataMember(Name="contacthomephone", EmitDefaultValue=false)]
        public string Contacthomephone { get; set; }

        /// <summary>
        /// Emergency contact mobile phone. Invalid numbers in a GET/PUT will be ignored. Patient phone numbers and other data may change, and one phone number may be associated with multiple patients. You are responsible for taking additional steps to verify patient identity and for using this data in accordance with applicable law, including HIPAA. Invalid numbers in a POST will be ignored, possibly resulting in an error. 
        /// </summary>
        /// <value>Emergency contact mobile phone. Invalid numbers in a GET/PUT will be ignored. Patient phone numbers and other data may change, and one phone number may be associated with multiple patients. You are responsible for taking additional steps to verify patient identity and for using this data in accordance with applicable law, including HIPAA. Invalid numbers in a POST will be ignored, possibly resulting in an error. </value>
        [DataMember(Name="contactmobilephone", EmitDefaultValue=false)]
        public string Contactmobilephone { get; set; }

        /// <summary>
        /// The full name of the next of kin.
        /// </summary>
        /// <value>The full name of the next of kin.</value>
        [DataMember(Name="nextkinname", EmitDefaultValue=false)]
        public string Nextkinname { get; set; }

        /// <summary>
        /// The next of kin relationship (one of SPOUSE, PARENT, CHILD, SIBLING, FRIEND, COUSIN, GUARDIAN, OTHER)
        /// </summary>
        /// <value>The next of kin relationship (one of SPOUSE, PARENT, CHILD, SIBLING, FRIEND, COUSIN, GUARDIAN, OTHER)</value>
        [DataMember(Name="nextkinrelationship", EmitDefaultValue=false)]
        public string Nextkinrelationship { get; set; }

        /// <summary>
        /// The next of kin phone number. Invalid numbers in a GET/PUT will be ignored. Patient phone numbers and other data may change, and one phone number may be associated with multiple patients. You are responsible for taking additional steps to verify patient identity and for using this data in accordance with applicable law, including HIPAA. Invalid numbers in a POST will be ignored, possibly resulting in an error. 
        /// </summary>
        /// <value>The next of kin phone number. Invalid numbers in a GET/PUT will be ignored. Patient phone numbers and other data may change, and one phone number may be associated with multiple patients. You are responsible for taking additional steps to verify patient identity and for using this data in accordance with applicable law, including HIPAA. Invalid numbers in a POST will be ignored, possibly resulting in an error. </value>
        [DataMember(Name="nextkinphone", EmitDefaultValue=false)]
        public string Nextkinphone { get; set; }

        /// <summary>
        /// The first name of the patient&#x27;s guardian.
        /// </summary>
        /// <value>The first name of the patient&#x27;s guardian.</value>
        [DataMember(Name="guardianfirstname", EmitDefaultValue=false)]
        public string Guardianfirstname { get; set; }

        /// <summary>
        /// The middle name of the patient&#x27;s guardian.
        /// </summary>
        /// <value>The middle name of the patient&#x27;s guardian.</value>
        [DataMember(Name="guardianmiddlename", EmitDefaultValue=false)]
        public string Guardianmiddlename { get; set; }

        /// <summary>
        /// The last name of the patient&#x27;s guardian.
        /// </summary>
        /// <value>The last name of the patient&#x27;s guardian.</value>
        [DataMember(Name="guardianlastname", EmitDefaultValue=false)]
        public string Guardianlastname { get; set; }

        /// <summary>
        /// The suffix of the patient&#x27;s guardian.
        /// </summary>
        /// <value>The suffix of the patient&#x27;s guardian.</value>
        [DataMember(Name="guardiansuffix", EmitDefaultValue=false)]
        public string Guardiansuffix { get; set; }

        /// <summary>
        /// Guarantor&#x27;s first name
        /// </summary>
        /// <value>Guarantor&#x27;s first name</value>
        [DataMember(Name="guarantorfirstname", EmitDefaultValue=false)]
        public string Guarantorfirstname { get; set; }

        /// <summary>
        /// Guarantor&#x27;s middle name
        /// </summary>
        /// <value>Guarantor&#x27;s middle name</value>
        [DataMember(Name="guarantormiddlename", EmitDefaultValue=false)]
        public string Guarantormiddlename { get; set; }

        /// <summary>
        /// Guarantor&#x27;s last name
        /// </summary>
        /// <value>Guarantor&#x27;s last name</value>
        [DataMember(Name="guarantorlastname", EmitDefaultValue=false)]
        public string Guarantorlastname { get; set; }

        /// <summary>
        /// Guarantor&#x27;s name suffix
        /// </summary>
        /// <value>Guarantor&#x27;s name suffix</value>
        [DataMember(Name="guarantorsuffix", EmitDefaultValue=false)]
        public string Guarantorsuffix { get; set; }

        /// <summary>
        /// Guarantor&#x27;s address
        /// </summary>
        /// <value>Guarantor&#x27;s address</value>
        [DataMember(Name="guarantoraddress1", EmitDefaultValue=false)]
        public string Guarantoraddress1 { get; set; }

        /// <summary>
        /// Guarantor&#x27;s address - line 2
        /// </summary>
        /// <value>Guarantor&#x27;s address - line 2</value>
        [DataMember(Name="guarantoraddress2", EmitDefaultValue=false)]
        public string Guarantoraddress2 { get; set; }

        /// <summary>
        /// Guarantor&#x27;s city
        /// </summary>
        /// <value>Guarantor&#x27;s city</value>
        [DataMember(Name="guarantorcity", EmitDefaultValue=false)]
        public string Guarantorcity { get; set; }

        /// <summary>
        /// Guarantor&#x27;s state (2 letter abbreviation)
        /// </summary>
        /// <value>Guarantor&#x27;s state (2 letter abbreviation)</value>
        [DataMember(Name="guarantorstate", EmitDefaultValue=false)]
        public string Guarantorstate { get; set; }

        /// <summary>
        /// Guarantor&#x27;s zip
        /// </summary>
        /// <value>Guarantor&#x27;s zip</value>
        [DataMember(Name="guarantorzip", EmitDefaultValue=false)]
        public string Guarantorzip { get; set; }

        /// <summary>
        /// Guarantor&#x27;s country code
        /// </summary>
        /// <value>Guarantor&#x27;s country code</value>
        [DataMember(Name="guarantorcountrycode", EmitDefaultValue=false)]
        public string Guarantorcountrycode { get; set; }

        /// <summary>
        /// Guarantor&#x27;s country code (ISO 3166-1)
        /// </summary>
        /// <value>Guarantor&#x27;s country code (ISO 3166-1)</value>
        [DataMember(Name="guarantorcountrycode3166", EmitDefaultValue=false)]
        public string Guarantorcountrycode3166 { get; set; }

        /// <summary>
        /// Guarantor&#x27;s DOB (mm/dd/yyyy)
        /// </summary>
        /// <value>Guarantor&#x27;s DOB (mm/dd/yyyy)</value>
        [DataMember(Name="guarantordob", EmitDefaultValue=false)]
        public string Guarantordob { get; set; }

        /// <summary>
        /// Guarantor&#x27;s SSN
        /// </summary>
        /// <value>Guarantor&#x27;s SSN</value>
        [DataMember(Name="guarantorssn", EmitDefaultValue=false)]
        public string Guarantorssn { get; set; }

        /// <summary>
        /// Guarantor&#x27;s email address
        /// </summary>
        /// <value>Guarantor&#x27;s email address</value>
        [DataMember(Name="guarantoremail", EmitDefaultValue=false)]
        public string Guarantoremail { get; set; }

        /// <summary>
        /// Guarantor&#x27;s phone number. Invalid numbers in a GET/PUT will be ignored. Patient phone numbers and other data may change, and one phone number may be associated with multiple patients. You are responsible for taking additional steps to verify patient identity and for using this data in accordance with applicable law, including HIPAA. Invalid numbers in a POST will be ignored, possibly resulting in an error. 
        /// </summary>
        /// <value>Guarantor&#x27;s phone number. Invalid numbers in a GET/PUT will be ignored. Patient phone numbers and other data may change, and one phone number may be associated with multiple patients. You are responsible for taking additional steps to verify patient identity and for using this data in accordance with applicable law, including HIPAA. Invalid numbers in a POST will be ignored, possibly resulting in an error. </value>
        [DataMember(Name="guarantorphone", EmitDefaultValue=false)]
        public string Guarantorphone { get; set; }

        /// <summary>
        /// The guarantor&#x27;s relationship to the patient
        /// </summary>
        /// <value>The guarantor&#x27;s relationship to the patient</value>
        [DataMember(Name="guarantorrelationshiptopatient", EmitDefaultValue=false)]
        public int? Guarantorrelationshiptopatient { get; set; }

        /// <summary>
        /// The address of the guarantor is the same as the patient.
        /// </summary>
        /// <value>The address of the guarantor is the same as the patient.</value>
        [DataMember(Name="guarantoraddresssameaspatient", EmitDefaultValue=false)]
        public bool? Guarantoraddresssameaspatient { get; set; }

        /// <summary>
        /// Date the patient was registered.
        /// </summary>
        /// <value>Date the patient was registered.</value>
        [DataMember(Name="registrationdate", EmitDefaultValue=false)]
        public string Registrationdate { get; set; }

        /// <summary>
        /// Primary (registration) department ID.
        /// </summary>
        /// <value>Primary (registration) department ID.</value>
        [DataMember(Name="departmentid", EmitDefaultValue=false)]
        public int? Departmentid { get; set; }

        /// <summary>
        /// Flag determining whether or not the patient has accepted the Terms and Conditions for the patient portal.
        /// </summary>
        /// <value>Flag determining whether or not the patient has accepted the Terms and Conditions for the patient portal.</value>
        [DataMember(Name="portaltermsonfile", EmitDefaultValue=false)]
        public bool? Portaltermsonfile { get; set; }

        /// <summary>
        /// This flag is set if the patient&#x27;s signature is on file
        /// </summary>
        /// <value>This flag is set if the patient&#x27;s signature is on file</value>
        [DataMember(Name="portalsignatureonfile", EmitDefaultValue=false)]
        public bool? Portalsignatureonfile { get; set; }

        /// <summary>
        /// This flag is set if the patient&#x27;s privacy information has been verified. Privacy information returns True if all of the items referenced in GET /patients/{patientid}/privacyinformationverified are true. Privacy information returns false if any of the items referenced in the GET /patients/{patientid}/privacyinformationverified API are false or expired. 
        /// </summary>
        /// <value>This flag is set if the patient&#x27;s privacy information has been verified. Privacy information returns True if all of the items referenced in GET /patients/{patientid}/privacyinformationverified are true. Privacy information returns false if any of the items referenced in the GET /patients/{patientid}/privacyinformationverified API are false or expired. </value>
        [DataMember(Name="privacyinformationverified", EmitDefaultValue=false)]
        public bool? Privacyinformationverified { get; set; }

        /// <summary>
        /// Medication history consent status. If a practice doesn&#x27;t have RXHub or Surescripts enabled, this will be null
        /// </summary>
        /// <value>Medication history consent status. If a practice doesn&#x27;t have RXHub or Surescripts enabled, this will be null</value>
        [DataMember(Name="medicationhistoryconsentverified", EmitDefaultValue=false)]
        public bool? Medicationhistoryconsentverified { get; set; }

        /// <summary>
        /// The long version of the marital status.
        /// </summary>
        /// <value>The long version of the marital status.</value>
        [DataMember(Name="maritalstatusname", EmitDefaultValue=false)]
        public string Maritalstatusname { get; set; }

        /// <summary>
        /// The patient&#x27;s employer&#x27;s ID (from /employers call)
        /// </summary>
        /// <value>The patient&#x27;s employer&#x27;s ID (from /employers call)</value>
        [DataMember(Name="employerid", EmitDefaultValue=false)]
        public int? Employerid { get; set; }

        /// <summary>
        /// The patient&#x27;s employer&#x27;s phone number. Normally, this is set by setting employerid. However, setting this value can be used to override this on an individual patient. Invalid numbers in a GET/PUT will be ignored. Patient phone numbers and other data may change, and one phone number may be associated with multiple patients. You are responsible for taking additional steps to verify patient identity and for using this data in accordance with applicable law, including HIPAA. Invalid numbers in a POST will be ignored, possibly resulting in an error. 
        /// </summary>
        /// <value>The patient&#x27;s employer&#x27;s phone number. Normally, this is set by setting employerid. However, setting this value can be used to override this on an individual patient. Invalid numbers in a GET/PUT will be ignored. Patient phone numbers and other data may change, and one phone number may be associated with multiple patients. You are responsible for taking additional steps to verify patient identity and for using this data in accordance with applicable law, including HIPAA. Invalid numbers in a POST will be ignored, possibly resulting in an error. </value>
        [DataMember(Name="employerphone", EmitDefaultValue=false)]
        public string Employerphone { get; set; }

        /// <summary>
        /// The guaranror&#x27;s employer&#x27;s ID (from /employers call)
        /// </summary>
        /// <value>The guaranror&#x27;s employer&#x27;s ID (from /employers call)</value>
        [DataMember(Name="guarantoremployerid", EmitDefaultValue=false)]
        public int? Guarantoremployerid { get; set; }

        /// <summary>
        /// The patient&#x27;s employer&#x27;s name.
        /// </summary>
        /// <value>The patient&#x27;s employer&#x27;s name.</value>
        [DataMember(Name="employername", EmitDefaultValue=false)]
        public string Employername { get; set; }

        /// <summary>
        /// The patient&#x27;s employer&#x27;s address.
        /// </summary>
        /// <value>The patient&#x27;s employer&#x27;s address.</value>
        [DataMember(Name="employeraddress", EmitDefaultValue=false)]
        public string Employeraddress { get; set; }

        /// <summary>
        /// The patient&#x27;s employer&#x27;s city.
        /// </summary>
        /// <value>The patient&#x27;s employer&#x27;s city.</value>
        [DataMember(Name="employercity", EmitDefaultValue=false)]
        public string Employercity { get; set; }

        /// <summary>
        /// This flag is set if the patient has been given access to the portal. This may be set by the API user if a patient has been given access to the portal \&quot;by providing a preprinted brochure or flyer showing the URL where patients can access their Patient Care Summaries.\&quot; The practiceinfo endpoint can provide the portal URL. While technically allowed, it would be very unusual to set this to false via the API. 
        /// </summary>
        /// <value>This flag is set if the patient has been given access to the portal. This may be set by the API user if a patient has been given access to the portal \&quot;by providing a preprinted brochure or flyer showing the URL where patients can access their Patient Care Summaries.\&quot; The practiceinfo endpoint can provide the portal URL. While technically allowed, it would be very unusual to set this to false via the API. </value>
        [DataMember(Name="portalaccessgiven", EmitDefaultValue=false)]
        public bool? Portalaccessgiven { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Patient {\n");
            sb.Append("  Homeboundyn: ").Append(Homeboundyn).Append("\n");
            sb.Append("  Assignedsexatbirth: ").Append(Assignedsexatbirth).Append("\n");
            sb.Append("  Altfirstname: ").Append(Altfirstname).Append("\n");
            sb.Append("  Ethnicitycode: ").Append(Ethnicitycode).Append("\n");
            sb.Append("  Industrycode: ").Append(Industrycode).Append("\n");
            sb.Append("  Language6392code: ").Append(Language6392code).Append("\n");
            sb.Append("  Localpatientid: ").Append(Localpatientid).Append("\n");
            sb.Append("  Deceaseddate: ").Append(Deceaseddate).Append("\n");
            sb.Append("  Firstappointment: ").Append(Firstappointment).Append("\n");
            sb.Append("  Primaryproviderid: ").Append(Primaryproviderid).Append("\n");
            sb.Append("  Genderidentityother: ").Append(Genderidentityother).Append("\n");
            sb.Append("  Portalstatus: ").Append(Portalstatus).Append("\n");
            sb.Append("  Preferredpronouns: ").Append(Preferredpronouns).Append("\n");
            sb.Append("  Lastappointment: ").Append(Lastappointment).Append("\n");
            sb.Append("  Allpatientstatuses: ").Append(Allpatientstatuses).Append("\n");
            sb.Append("  Donotcallyn: ").Append(Donotcallyn).Append("\n");
            sb.Append("  Primarydepartmentid: ").Append(Primarydepartmentid).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Balances: ").Append(Balances).Append("\n");
            sb.Append("  Lastemail: ").Append(Lastemail).Append("\n");
            sb.Append("  Racecode: ").Append(Racecode).Append("\n");
            sb.Append("  Sexualorientation: ").Append(Sexualorientation).Append("\n");
            sb.Append("  Genderidentity: ").Append(Genderidentity).Append("\n");
            sb.Append("  Emailexistsyn: ").Append(Emailexistsyn).Append("\n");
            sb.Append("  Occupationcode: ").Append(Occupationcode).Append("\n");
            sb.Append("  Race: ").Append(Race).Append("\n");
            sb.Append("  Sexualorientationother: ").Append(Sexualorientationother).Append("\n");
            sb.Append("  Patientid: ").Append(Patientid).Append("\n");
            sb.Append("  Firstname: ").Append(Firstname).Append("\n");
            sb.Append("  Middlename: ").Append(Middlename).Append("\n");
            sb.Append("  Lastname: ").Append(Lastname).Append("\n");
            sb.Append("  Suffix: ").Append(Suffix).Append("\n");
            sb.Append("  Preferredname: ").Append(Preferredname).Append("\n");
            sb.Append("  Address1: ").Append(Address1).Append("\n");
            sb.Append("  Address2: ").Append(Address2).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Zip: ").Append(Zip).Append("\n");
            sb.Append("  Countrycode: ").Append(Countrycode).Append("\n");
            sb.Append("  Countrycode3166: ").Append(Countrycode3166).Append("\n");
            sb.Append("  Homephone: ").Append(Homephone).Append("\n");
            sb.Append("  Mobilephone: ").Append(Mobilephone).Append("\n");
            sb.Append("  Hasmobileyn: ").Append(Hasmobileyn).Append("\n");
            sb.Append("  Workphone: ").Append(Workphone).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Ssn: ").Append(Ssn).Append("\n");
            sb.Append("  Racename: ").Append(Racename).Append("\n");
            sb.Append("  Sex: ").Append(Sex).Append("\n");
            sb.Append("  Dob: ").Append(Dob).Append("\n");
            sb.Append("  Maritalstatus: ").Append(Maritalstatus).Append("\n");
            sb.Append("  Contactpreference: ").Append(Contactpreference).Append("\n");
            sb.Append("  Contactname: ").Append(Contactname).Append("\n");
            sb.Append("  Contactrelationship: ").Append(Contactrelationship).Append("\n");
            sb.Append("  Contacthomephone: ").Append(Contacthomephone).Append("\n");
            sb.Append("  Contactmobilephone: ").Append(Contactmobilephone).Append("\n");
            sb.Append("  Nextkinname: ").Append(Nextkinname).Append("\n");
            sb.Append("  Nextkinrelationship: ").Append(Nextkinrelationship).Append("\n");
            sb.Append("  Nextkinphone: ").Append(Nextkinphone).Append("\n");
            sb.Append("  Guardianfirstname: ").Append(Guardianfirstname).Append("\n");
            sb.Append("  Guardianmiddlename: ").Append(Guardianmiddlename).Append("\n");
            sb.Append("  Guardianlastname: ").Append(Guardianlastname).Append("\n");
            sb.Append("  Guardiansuffix: ").Append(Guardiansuffix).Append("\n");
            sb.Append("  Guarantorfirstname: ").Append(Guarantorfirstname).Append("\n");
            sb.Append("  Guarantormiddlename: ").Append(Guarantormiddlename).Append("\n");
            sb.Append("  Guarantorlastname: ").Append(Guarantorlastname).Append("\n");
            sb.Append("  Guarantorsuffix: ").Append(Guarantorsuffix).Append("\n");
            sb.Append("  Guarantoraddress1: ").Append(Guarantoraddress1).Append("\n");
            sb.Append("  Guarantoraddress2: ").Append(Guarantoraddress2).Append("\n");
            sb.Append("  Guarantorcity: ").Append(Guarantorcity).Append("\n");
            sb.Append("  Guarantorstate: ").Append(Guarantorstate).Append("\n");
            sb.Append("  Guarantorzip: ").Append(Guarantorzip).Append("\n");
            sb.Append("  Guarantorcountrycode: ").Append(Guarantorcountrycode).Append("\n");
            sb.Append("  Guarantorcountrycode3166: ").Append(Guarantorcountrycode3166).Append("\n");
            sb.Append("  Guarantordob: ").Append(Guarantordob).Append("\n");
            sb.Append("  Guarantorssn: ").Append(Guarantorssn).Append("\n");
            sb.Append("  Guarantoremail: ").Append(Guarantoremail).Append("\n");
            sb.Append("  Guarantorphone: ").Append(Guarantorphone).Append("\n");
            sb.Append("  Guarantorrelationshiptopatient: ").Append(Guarantorrelationshiptopatient).Append("\n");
            sb.Append("  Guarantoraddresssameaspatient: ").Append(Guarantoraddresssameaspatient).Append("\n");
            sb.Append("  Registrationdate: ").Append(Registrationdate).Append("\n");
            sb.Append("  Departmentid: ").Append(Departmentid).Append("\n");
            sb.Append("  Portaltermsonfile: ").Append(Portaltermsonfile).Append("\n");
            sb.Append("  Portalsignatureonfile: ").Append(Portalsignatureonfile).Append("\n");
            sb.Append("  Privacyinformationverified: ").Append(Privacyinformationverified).Append("\n");
            sb.Append("  Medicationhistoryconsentverified: ").Append(Medicationhistoryconsentverified).Append("\n");
            sb.Append("  Maritalstatusname: ").Append(Maritalstatusname).Append("\n");
            sb.Append("  Employerid: ").Append(Employerid).Append("\n");
            sb.Append("  Employerphone: ").Append(Employerphone).Append("\n");
            sb.Append("  Guarantoremployerid: ").Append(Guarantoremployerid).Append("\n");
            sb.Append("  Employername: ").Append(Employername).Append("\n");
            sb.Append("  Employeraddress: ").Append(Employeraddress).Append("\n");
            sb.Append("  Employercity: ").Append(Employercity).Append("\n");
            sb.Append("  Portalaccessgiven: ").Append(Portalaccessgiven).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Patient);
        }

        /// <summary>
        /// Returns true if Patient instances are equal
        /// </summary>
        /// <param name="input">Instance of Patient to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Patient input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Homeboundyn == input.Homeboundyn ||
                    (this.Homeboundyn != null &&
                    this.Homeboundyn.Equals(input.Homeboundyn))
                ) && 
                (
                    this.Assignedsexatbirth == input.Assignedsexatbirth ||
                    (this.Assignedsexatbirth != null &&
                    this.Assignedsexatbirth.Equals(input.Assignedsexatbirth))
                ) && 
                (
                    this.Altfirstname == input.Altfirstname ||
                    (this.Altfirstname != null &&
                    this.Altfirstname.Equals(input.Altfirstname))
                ) && 
                (
                    this.Ethnicitycode == input.Ethnicitycode ||
                    (this.Ethnicitycode != null &&
                    this.Ethnicitycode.Equals(input.Ethnicitycode))
                ) && 
                (
                    this.Industrycode == input.Industrycode ||
                    (this.Industrycode != null &&
                    this.Industrycode.Equals(input.Industrycode))
                ) && 
                (
                    this.Language6392code == input.Language6392code ||
                    (this.Language6392code != null &&
                    this.Language6392code.Equals(input.Language6392code))
                ) && 
                (
                    this.Localpatientid == input.Localpatientid ||
                    (this.Localpatientid != null &&
                    this.Localpatientid.Equals(input.Localpatientid))
                ) && 
                (
                    this.Deceaseddate == input.Deceaseddate ||
                    (this.Deceaseddate != null &&
                    this.Deceaseddate.Equals(input.Deceaseddate))
                ) && 
                (
                    this.Firstappointment == input.Firstappointment ||
                    (this.Firstappointment != null &&
                    this.Firstappointment.Equals(input.Firstappointment))
                ) && 
                (
                    this.Primaryproviderid == input.Primaryproviderid ||
                    (this.Primaryproviderid != null &&
                    this.Primaryproviderid.Equals(input.Primaryproviderid))
                ) && 
                (
                    this.Genderidentityother == input.Genderidentityother ||
                    (this.Genderidentityother != null &&
                    this.Genderidentityother.Equals(input.Genderidentityother))
                ) && 
                (
                    this.Portalstatus == input.Portalstatus ||
                    this.Portalstatus != null &&
                    input.Portalstatus != null &&
                    this.Portalstatus.SequenceEqual(input.Portalstatus)
                ) && 
                (
                    this.Preferredpronouns == input.Preferredpronouns ||
                    (this.Preferredpronouns != null &&
                    this.Preferredpronouns.Equals(input.Preferredpronouns))
                ) && 
                (
                    this.Lastappointment == input.Lastappointment ||
                    (this.Lastappointment != null &&
                    this.Lastappointment.Equals(input.Lastappointment))
                ) && 
                (
                    this.Allpatientstatuses == input.Allpatientstatuses ||
                    this.Allpatientstatuses != null &&
                    input.Allpatientstatuses != null &&
                    this.Allpatientstatuses.SequenceEqual(input.Allpatientstatuses)
                ) && 
                (
                    this.Donotcallyn == input.Donotcallyn ||
                    (this.Donotcallyn != null &&
                    this.Donotcallyn.Equals(input.Donotcallyn))
                ) && 
                (
                    this.Primarydepartmentid == input.Primarydepartmentid ||
                    (this.Primarydepartmentid != null &&
                    this.Primarydepartmentid.Equals(input.Primarydepartmentid))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Balances == input.Balances ||
                    this.Balances != null &&
                    input.Balances != null &&
                    this.Balances.SequenceEqual(input.Balances)
                ) && 
                (
                    this.Lastemail == input.Lastemail ||
                    (this.Lastemail != null &&
                    this.Lastemail.Equals(input.Lastemail))
                ) && 
                (
                    this.Racecode == input.Racecode ||
                    (this.Racecode != null &&
                    this.Racecode.Equals(input.Racecode))
                ) && 
                (
                    this.Sexualorientation == input.Sexualorientation ||
                    (this.Sexualorientation != null &&
                    this.Sexualorientation.Equals(input.Sexualorientation))
                ) && 
                (
                    this.Genderidentity == input.Genderidentity ||
                    (this.Genderidentity != null &&
                    this.Genderidentity.Equals(input.Genderidentity))
                ) && 
                (
                    this.Emailexistsyn == input.Emailexistsyn ||
                    (this.Emailexistsyn != null &&
                    this.Emailexistsyn.Equals(input.Emailexistsyn))
                ) && 
                (
                    this.Occupationcode == input.Occupationcode ||
                    (this.Occupationcode != null &&
                    this.Occupationcode.Equals(input.Occupationcode))
                ) && 
                (
                    this.Race == input.Race ||
                    this.Race != null &&
                    input.Race != null &&
                    this.Race.SequenceEqual(input.Race)
                ) && 
                (
                    this.Sexualorientationother == input.Sexualorientationother ||
                    (this.Sexualorientationother != null &&
                    this.Sexualorientationother.Equals(input.Sexualorientationother))
                ) && 
                (
                    this.Patientid == input.Patientid ||
                    (this.Patientid != null &&
                    this.Patientid.Equals(input.Patientid))
                ) && 
                (
                    this.Firstname == input.Firstname ||
                    (this.Firstname != null &&
                    this.Firstname.Equals(input.Firstname))
                ) && 
                (
                    this.Middlename == input.Middlename ||
                    (this.Middlename != null &&
                    this.Middlename.Equals(input.Middlename))
                ) && 
                (
                    this.Lastname == input.Lastname ||
                    (this.Lastname != null &&
                    this.Lastname.Equals(input.Lastname))
                ) && 
                (
                    this.Suffix == input.Suffix ||
                    (this.Suffix != null &&
                    this.Suffix.Equals(input.Suffix))
                ) && 
                (
                    this.Preferredname == input.Preferredname ||
                    (this.Preferredname != null &&
                    this.Preferredname.Equals(input.Preferredname))
                ) && 
                (
                    this.Address1 == input.Address1 ||
                    (this.Address1 != null &&
                    this.Address1.Equals(input.Address1))
                ) && 
                (
                    this.Address2 == input.Address2 ||
                    (this.Address2 != null &&
                    this.Address2.Equals(input.Address2))
                ) && 
                (
                    this.City == input.City ||
                    (this.City != null &&
                    this.City.Equals(input.City))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.Zip == input.Zip ||
                    (this.Zip != null &&
                    this.Zip.Equals(input.Zip))
                ) && 
                (
                    this.Countrycode == input.Countrycode ||
                    (this.Countrycode != null &&
                    this.Countrycode.Equals(input.Countrycode))
                ) && 
                (
                    this.Countrycode3166 == input.Countrycode3166 ||
                    (this.Countrycode3166 != null &&
                    this.Countrycode3166.Equals(input.Countrycode3166))
                ) && 
                (
                    this.Homephone == input.Homephone ||
                    (this.Homephone != null &&
                    this.Homephone.Equals(input.Homephone))
                ) && 
                (
                    this.Mobilephone == input.Mobilephone ||
                    (this.Mobilephone != null &&
                    this.Mobilephone.Equals(input.Mobilephone))
                ) && 
                (
                    this.Hasmobileyn == input.Hasmobileyn ||
                    (this.Hasmobileyn != null &&
                    this.Hasmobileyn.Equals(input.Hasmobileyn))
                ) && 
                (
                    this.Workphone == input.Workphone ||
                    (this.Workphone != null &&
                    this.Workphone.Equals(input.Workphone))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.Ssn == input.Ssn ||
                    (this.Ssn != null &&
                    this.Ssn.Equals(input.Ssn))
                ) && 
                (
                    this.Racename == input.Racename ||
                    (this.Racename != null &&
                    this.Racename.Equals(input.Racename))
                ) && 
                (
                    this.Sex == input.Sex ||
                    (this.Sex != null &&
                    this.Sex.Equals(input.Sex))
                ) && 
                (
                    this.Dob == input.Dob ||
                    (this.Dob != null &&
                    this.Dob.Equals(input.Dob))
                ) && 
                (
                    this.Maritalstatus == input.Maritalstatus ||
                    (this.Maritalstatus != null &&
                    this.Maritalstatus.Equals(input.Maritalstatus))
                ) && 
                (
                    this.Contactpreference == input.Contactpreference ||
                    (this.Contactpreference != null &&
                    this.Contactpreference.Equals(input.Contactpreference))
                ) && 
                (
                    this.Contactname == input.Contactname ||
                    (this.Contactname != null &&
                    this.Contactname.Equals(input.Contactname))
                ) && 
                (
                    this.Contactrelationship == input.Contactrelationship ||
                    (this.Contactrelationship != null &&
                    this.Contactrelationship.Equals(input.Contactrelationship))
                ) && 
                (
                    this.Contacthomephone == input.Contacthomephone ||
                    (this.Contacthomephone != null &&
                    this.Contacthomephone.Equals(input.Contacthomephone))
                ) && 
                (
                    this.Contactmobilephone == input.Contactmobilephone ||
                    (this.Contactmobilephone != null &&
                    this.Contactmobilephone.Equals(input.Contactmobilephone))
                ) && 
                (
                    this.Nextkinname == input.Nextkinname ||
                    (this.Nextkinname != null &&
                    this.Nextkinname.Equals(input.Nextkinname))
                ) && 
                (
                    this.Nextkinrelationship == input.Nextkinrelationship ||
                    (this.Nextkinrelationship != null &&
                    this.Nextkinrelationship.Equals(input.Nextkinrelationship))
                ) && 
                (
                    this.Nextkinphone == input.Nextkinphone ||
                    (this.Nextkinphone != null &&
                    this.Nextkinphone.Equals(input.Nextkinphone))
                ) && 
                (
                    this.Guardianfirstname == input.Guardianfirstname ||
                    (this.Guardianfirstname != null &&
                    this.Guardianfirstname.Equals(input.Guardianfirstname))
                ) && 
                (
                    this.Guardianmiddlename == input.Guardianmiddlename ||
                    (this.Guardianmiddlename != null &&
                    this.Guardianmiddlename.Equals(input.Guardianmiddlename))
                ) && 
                (
                    this.Guardianlastname == input.Guardianlastname ||
                    (this.Guardianlastname != null &&
                    this.Guardianlastname.Equals(input.Guardianlastname))
                ) && 
                (
                    this.Guardiansuffix == input.Guardiansuffix ||
                    (this.Guardiansuffix != null &&
                    this.Guardiansuffix.Equals(input.Guardiansuffix))
                ) && 
                (
                    this.Guarantorfirstname == input.Guarantorfirstname ||
                    (this.Guarantorfirstname != null &&
                    this.Guarantorfirstname.Equals(input.Guarantorfirstname))
                ) && 
                (
                    this.Guarantormiddlename == input.Guarantormiddlename ||
                    (this.Guarantormiddlename != null &&
                    this.Guarantormiddlename.Equals(input.Guarantormiddlename))
                ) && 
                (
                    this.Guarantorlastname == input.Guarantorlastname ||
                    (this.Guarantorlastname != null &&
                    this.Guarantorlastname.Equals(input.Guarantorlastname))
                ) && 
                (
                    this.Guarantorsuffix == input.Guarantorsuffix ||
                    (this.Guarantorsuffix != null &&
                    this.Guarantorsuffix.Equals(input.Guarantorsuffix))
                ) && 
                (
                    this.Guarantoraddress1 == input.Guarantoraddress1 ||
                    (this.Guarantoraddress1 != null &&
                    this.Guarantoraddress1.Equals(input.Guarantoraddress1))
                ) && 
                (
                    this.Guarantoraddress2 == input.Guarantoraddress2 ||
                    (this.Guarantoraddress2 != null &&
                    this.Guarantoraddress2.Equals(input.Guarantoraddress2))
                ) && 
                (
                    this.Guarantorcity == input.Guarantorcity ||
                    (this.Guarantorcity != null &&
                    this.Guarantorcity.Equals(input.Guarantorcity))
                ) && 
                (
                    this.Guarantorstate == input.Guarantorstate ||
                    (this.Guarantorstate != null &&
                    this.Guarantorstate.Equals(input.Guarantorstate))
                ) && 
                (
                    this.Guarantorzip == input.Guarantorzip ||
                    (this.Guarantorzip != null &&
                    this.Guarantorzip.Equals(input.Guarantorzip))
                ) && 
                (
                    this.Guarantorcountrycode == input.Guarantorcountrycode ||
                    (this.Guarantorcountrycode != null &&
                    this.Guarantorcountrycode.Equals(input.Guarantorcountrycode))
                ) && 
                (
                    this.Guarantorcountrycode3166 == input.Guarantorcountrycode3166 ||
                    (this.Guarantorcountrycode3166 != null &&
                    this.Guarantorcountrycode3166.Equals(input.Guarantorcountrycode3166))
                ) && 
                (
                    this.Guarantordob == input.Guarantordob ||
                    (this.Guarantordob != null &&
                    this.Guarantordob.Equals(input.Guarantordob))
                ) && 
                (
                    this.Guarantorssn == input.Guarantorssn ||
                    (this.Guarantorssn != null &&
                    this.Guarantorssn.Equals(input.Guarantorssn))
                ) && 
                (
                    this.Guarantoremail == input.Guarantoremail ||
                    (this.Guarantoremail != null &&
                    this.Guarantoremail.Equals(input.Guarantoremail))
                ) && 
                (
                    this.Guarantorphone == input.Guarantorphone ||
                    (this.Guarantorphone != null &&
                    this.Guarantorphone.Equals(input.Guarantorphone))
                ) && 
                (
                    this.Guarantorrelationshiptopatient == input.Guarantorrelationshiptopatient ||
                    (this.Guarantorrelationshiptopatient != null &&
                    this.Guarantorrelationshiptopatient.Equals(input.Guarantorrelationshiptopatient))
                ) && 
                (
                    this.Guarantoraddresssameaspatient == input.Guarantoraddresssameaspatient ||
                    (this.Guarantoraddresssameaspatient != null &&
                    this.Guarantoraddresssameaspatient.Equals(input.Guarantoraddresssameaspatient))
                ) && 
                (
                    this.Registrationdate == input.Registrationdate ||
                    (this.Registrationdate != null &&
                    this.Registrationdate.Equals(input.Registrationdate))
                ) && 
                (
                    this.Departmentid == input.Departmentid ||
                    (this.Departmentid != null &&
                    this.Departmentid.Equals(input.Departmentid))
                ) && 
                (
                    this.Portaltermsonfile == input.Portaltermsonfile ||
                    (this.Portaltermsonfile != null &&
                    this.Portaltermsonfile.Equals(input.Portaltermsonfile))
                ) && 
                (
                    this.Portalsignatureonfile == input.Portalsignatureonfile ||
                    (this.Portalsignatureonfile != null &&
                    this.Portalsignatureonfile.Equals(input.Portalsignatureonfile))
                ) && 
                (
                    this.Privacyinformationverified == input.Privacyinformationverified ||
                    (this.Privacyinformationverified != null &&
                    this.Privacyinformationverified.Equals(input.Privacyinformationverified))
                ) && 
                (
                    this.Medicationhistoryconsentverified == input.Medicationhistoryconsentverified ||
                    (this.Medicationhistoryconsentverified != null &&
                    this.Medicationhistoryconsentverified.Equals(input.Medicationhistoryconsentverified))
                ) && 
                (
                    this.Maritalstatusname == input.Maritalstatusname ||
                    (this.Maritalstatusname != null &&
                    this.Maritalstatusname.Equals(input.Maritalstatusname))
                ) && 
                (
                    this.Employerid == input.Employerid ||
                    (this.Employerid != null &&
                    this.Employerid.Equals(input.Employerid))
                ) && 
                (
                    this.Employerphone == input.Employerphone ||
                    (this.Employerphone != null &&
                    this.Employerphone.Equals(input.Employerphone))
                ) && 
                (
                    this.Guarantoremployerid == input.Guarantoremployerid ||
                    (this.Guarantoremployerid != null &&
                    this.Guarantoremployerid.Equals(input.Guarantoremployerid))
                ) && 
                (
                    this.Employername == input.Employername ||
                    (this.Employername != null &&
                    this.Employername.Equals(input.Employername))
                ) && 
                (
                    this.Employeraddress == input.Employeraddress ||
                    (this.Employeraddress != null &&
                    this.Employeraddress.Equals(input.Employeraddress))
                ) && 
                (
                    this.Employercity == input.Employercity ||
                    (this.Employercity != null &&
                    this.Employercity.Equals(input.Employercity))
                ) && 
                (
                    this.Portalaccessgiven == input.Portalaccessgiven ||
                    (this.Portalaccessgiven != null &&
                    this.Portalaccessgiven.Equals(input.Portalaccessgiven))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Homeboundyn != null)
                    hashCode = hashCode * 59 + this.Homeboundyn.GetHashCode();
                if (this.Assignedsexatbirth != null)
                    hashCode = hashCode * 59 + this.Assignedsexatbirth.GetHashCode();
                if (this.Altfirstname != null)
                    hashCode = hashCode * 59 + this.Altfirstname.GetHashCode();
                if (this.Ethnicitycode != null)
                    hashCode = hashCode * 59 + this.Ethnicitycode.GetHashCode();
                if (this.Industrycode != null)
                    hashCode = hashCode * 59 + this.Industrycode.GetHashCode();
                if (this.Language6392code != null)
                    hashCode = hashCode * 59 + this.Language6392code.GetHashCode();
                if (this.Localpatientid != null)
                    hashCode = hashCode * 59 + this.Localpatientid.GetHashCode();
                if (this.Deceaseddate != null)
                    hashCode = hashCode * 59 + this.Deceaseddate.GetHashCode();
                if (this.Firstappointment != null)
                    hashCode = hashCode * 59 + this.Firstappointment.GetHashCode();
                if (this.Primaryproviderid != null)
                    hashCode = hashCode * 59 + this.Primaryproviderid.GetHashCode();
                if (this.Genderidentityother != null)
                    hashCode = hashCode * 59 + this.Genderidentityother.GetHashCode();
                if (this.Portalstatus != null)
                    hashCode = hashCode * 59 + this.Portalstatus.GetHashCode();
                if (this.Preferredpronouns != null)
                    hashCode = hashCode * 59 + this.Preferredpronouns.GetHashCode();
                if (this.Lastappointment != null)
                    hashCode = hashCode * 59 + this.Lastappointment.GetHashCode();
                if (this.Allpatientstatuses != null)
                    hashCode = hashCode * 59 + this.Allpatientstatuses.GetHashCode();
                if (this.Donotcallyn != null)
                    hashCode = hashCode * 59 + this.Donotcallyn.GetHashCode();
                if (this.Primarydepartmentid != null)
                    hashCode = hashCode * 59 + this.Primarydepartmentid.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Balances != null)
                    hashCode = hashCode * 59 + this.Balances.GetHashCode();
                if (this.Lastemail != null)
                    hashCode = hashCode * 59 + this.Lastemail.GetHashCode();
                if (this.Racecode != null)
                    hashCode = hashCode * 59 + this.Racecode.GetHashCode();
                if (this.Sexualorientation != null)
                    hashCode = hashCode * 59 + this.Sexualorientation.GetHashCode();
                if (this.Genderidentity != null)
                    hashCode = hashCode * 59 + this.Genderidentity.GetHashCode();
                if (this.Emailexistsyn != null)
                    hashCode = hashCode * 59 + this.Emailexistsyn.GetHashCode();
                if (this.Occupationcode != null)
                    hashCode = hashCode * 59 + this.Occupationcode.GetHashCode();
                if (this.Race != null)
                    hashCode = hashCode * 59 + this.Race.GetHashCode();
                if (this.Sexualorientationother != null)
                    hashCode = hashCode * 59 + this.Sexualorientationother.GetHashCode();
                if (this.Patientid != null)
                    hashCode = hashCode * 59 + this.Patientid.GetHashCode();
                if (this.Firstname != null)
                    hashCode = hashCode * 59 + this.Firstname.GetHashCode();
                if (this.Middlename != null)
                    hashCode = hashCode * 59 + this.Middlename.GetHashCode();
                if (this.Lastname != null)
                    hashCode = hashCode * 59 + this.Lastname.GetHashCode();
                if (this.Suffix != null)
                    hashCode = hashCode * 59 + this.Suffix.GetHashCode();
                if (this.Preferredname != null)
                    hashCode = hashCode * 59 + this.Preferredname.GetHashCode();
                if (this.Address1 != null)
                    hashCode = hashCode * 59 + this.Address1.GetHashCode();
                if (this.Address2 != null)
                    hashCode = hashCode * 59 + this.Address2.GetHashCode();
                if (this.City != null)
                    hashCode = hashCode * 59 + this.City.GetHashCode();
                if (this.State != null)
                    hashCode = hashCode * 59 + this.State.GetHashCode();
                if (this.Zip != null)
                    hashCode = hashCode * 59 + this.Zip.GetHashCode();
                if (this.Countrycode != null)
                    hashCode = hashCode * 59 + this.Countrycode.GetHashCode();
                if (this.Countrycode3166 != null)
                    hashCode = hashCode * 59 + this.Countrycode3166.GetHashCode();
                if (this.Homephone != null)
                    hashCode = hashCode * 59 + this.Homephone.GetHashCode();
                if (this.Mobilephone != null)
                    hashCode = hashCode * 59 + this.Mobilephone.GetHashCode();
                if (this.Hasmobileyn != null)
                    hashCode = hashCode * 59 + this.Hasmobileyn.GetHashCode();
                if (this.Workphone != null)
                    hashCode = hashCode * 59 + this.Workphone.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.Ssn != null)
                    hashCode = hashCode * 59 + this.Ssn.GetHashCode();
                if (this.Racename != null)
                    hashCode = hashCode * 59 + this.Racename.GetHashCode();
                if (this.Sex != null)
                    hashCode = hashCode * 59 + this.Sex.GetHashCode();
                if (this.Dob != null)
                    hashCode = hashCode * 59 + this.Dob.GetHashCode();
                if (this.Maritalstatus != null)
                    hashCode = hashCode * 59 + this.Maritalstatus.GetHashCode();
                if (this.Contactpreference != null)
                    hashCode = hashCode * 59 + this.Contactpreference.GetHashCode();
                if (this.Contactname != null)
                    hashCode = hashCode * 59 + this.Contactname.GetHashCode();
                if (this.Contactrelationship != null)
                    hashCode = hashCode * 59 + this.Contactrelationship.GetHashCode();
                if (this.Contacthomephone != null)
                    hashCode = hashCode * 59 + this.Contacthomephone.GetHashCode();
                if (this.Contactmobilephone != null)
                    hashCode = hashCode * 59 + this.Contactmobilephone.GetHashCode();
                if (this.Nextkinname != null)
                    hashCode = hashCode * 59 + this.Nextkinname.GetHashCode();
                if (this.Nextkinrelationship != null)
                    hashCode = hashCode * 59 + this.Nextkinrelationship.GetHashCode();
                if (this.Nextkinphone != null)
                    hashCode = hashCode * 59 + this.Nextkinphone.GetHashCode();
                if (this.Guardianfirstname != null)
                    hashCode = hashCode * 59 + this.Guardianfirstname.GetHashCode();
                if (this.Guardianmiddlename != null)
                    hashCode = hashCode * 59 + this.Guardianmiddlename.GetHashCode();
                if (this.Guardianlastname != null)
                    hashCode = hashCode * 59 + this.Guardianlastname.GetHashCode();
                if (this.Guardiansuffix != null)
                    hashCode = hashCode * 59 + this.Guardiansuffix.GetHashCode();
                if (this.Guarantorfirstname != null)
                    hashCode = hashCode * 59 + this.Guarantorfirstname.GetHashCode();
                if (this.Guarantormiddlename != null)
                    hashCode = hashCode * 59 + this.Guarantormiddlename.GetHashCode();
                if (this.Guarantorlastname != null)
                    hashCode = hashCode * 59 + this.Guarantorlastname.GetHashCode();
                if (this.Guarantorsuffix != null)
                    hashCode = hashCode * 59 + this.Guarantorsuffix.GetHashCode();
                if (this.Guarantoraddress1 != null)
                    hashCode = hashCode * 59 + this.Guarantoraddress1.GetHashCode();
                if (this.Guarantoraddress2 != null)
                    hashCode = hashCode * 59 + this.Guarantoraddress2.GetHashCode();
                if (this.Guarantorcity != null)
                    hashCode = hashCode * 59 + this.Guarantorcity.GetHashCode();
                if (this.Guarantorstate != null)
                    hashCode = hashCode * 59 + this.Guarantorstate.GetHashCode();
                if (this.Guarantorzip != null)
                    hashCode = hashCode * 59 + this.Guarantorzip.GetHashCode();
                if (this.Guarantorcountrycode != null)
                    hashCode = hashCode * 59 + this.Guarantorcountrycode.GetHashCode();
                if (this.Guarantorcountrycode3166 != null)
                    hashCode = hashCode * 59 + this.Guarantorcountrycode3166.GetHashCode();
                if (this.Guarantordob != null)
                    hashCode = hashCode * 59 + this.Guarantordob.GetHashCode();
                if (this.Guarantorssn != null)
                    hashCode = hashCode * 59 + this.Guarantorssn.GetHashCode();
                if (this.Guarantoremail != null)
                    hashCode = hashCode * 59 + this.Guarantoremail.GetHashCode();
                if (this.Guarantorphone != null)
                    hashCode = hashCode * 59 + this.Guarantorphone.GetHashCode();
                if (this.Guarantorrelationshiptopatient != null)
                    hashCode = hashCode * 59 + this.Guarantorrelationshiptopatient.GetHashCode();
                if (this.Guarantoraddresssameaspatient != null)
                    hashCode = hashCode * 59 + this.Guarantoraddresssameaspatient.GetHashCode();
                if (this.Registrationdate != null)
                    hashCode = hashCode * 59 + this.Registrationdate.GetHashCode();
                if (this.Departmentid != null)
                    hashCode = hashCode * 59 + this.Departmentid.GetHashCode();
                if (this.Portaltermsonfile != null)
                    hashCode = hashCode * 59 + this.Portaltermsonfile.GetHashCode();
                if (this.Portalsignatureonfile != null)
                    hashCode = hashCode * 59 + this.Portalsignatureonfile.GetHashCode();
                if (this.Privacyinformationverified != null)
                    hashCode = hashCode * 59 + this.Privacyinformationverified.GetHashCode();
                if (this.Medicationhistoryconsentverified != null)
                    hashCode = hashCode * 59 + this.Medicationhistoryconsentverified.GetHashCode();
                if (this.Maritalstatusname != null)
                    hashCode = hashCode * 59 + this.Maritalstatusname.GetHashCode();
                if (this.Employerid != null)
                    hashCode = hashCode * 59 + this.Employerid.GetHashCode();
                if (this.Employerphone != null)
                    hashCode = hashCode * 59 + this.Employerphone.GetHashCode();
                if (this.Guarantoremployerid != null)
                    hashCode = hashCode * 59 + this.Guarantoremployerid.GetHashCode();
                if (this.Employername != null)
                    hashCode = hashCode * 59 + this.Employername.GetHashCode();
                if (this.Employeraddress != null)
                    hashCode = hashCode * 59 + this.Employeraddress.GetHashCode();
                if (this.Employercity != null)
                    hashCode = hashCode * 59 + this.Employercity.GetHashCode();
                if (this.Portalaccessgiven != null)
                    hashCode = hashCode * 59 + this.Portalaccessgiven.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
