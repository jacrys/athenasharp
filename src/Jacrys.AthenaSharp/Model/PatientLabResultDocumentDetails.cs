/* 
 * athenahealth More Disruption Please (MDP) API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Jacrys.AthenaSharp.Client.SwaggerDateConverter;

namespace Jacrys.AthenaSharp.Model
{
    /// <summary>
    /// PatientLabResultDocumentDetails
    /// </summary>
    [DataContract]
        public partial class PatientLabResultDocumentDetails :  IEquatable<PatientLabResultDocumentDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PatientLabResultDocumentDetails" /> class.
        /// </summary>
        /// <param name="createddate">Date the document was created. Please use createddatetime instead..</param>
        /// <param name="documentroute">Explains method by which the document was entered into the AthenaNet (INTERFACE (digital), FAX, etc.) .</param>
        /// <param name="resultstatus">The status of the result..</param>
        /// <param name="providerid">Provider ID for this document.</param>
        /// <param name="externalaccessionid">The external accession ID for this document. Format depends on the system the ID belongs to..</param>
        /// <param name="ordertype">Order type group name.</param>
        /// <param name="resultnotes">Result note on a document..</param>
        /// <param name="status">Status of the document.</param>
        /// <param name="lastmodifieduser">The user who last modified this document..</param>
        /// <param name="externalnoteonly">External note for the patient..</param>
        /// <param name="actionnote">The most recent action note for a document.</param>
        /// <param name="providerusername">The username of the provider associated with this lab result document..</param>
        /// <param name="internalaccessionid">The internal accession ID for this document. Format depends on the system the ID belongs to..</param>
        /// <param name="isconfidential">If true, this result document should not be shown to the patient..</param>
        /// <param name="createddatetime">Date/Time (ISO 8601) the document was created.</param>
        /// <param name="documentsubclass">Specific type of document.</param>
        /// <param name="encounterid">Encounter ID.</param>
        /// <param name="interpretation">The practice entered interpretation of this result..</param>
        /// <param name="labresultid">The primary key for labresult class of documents.</param>
        /// <param name="labresultloinc">Laboratory code that identifies the overall result..</param>
        /// <param name="lastmodifieddatetime">Date/time (ISO 8601) the document was last modified.</param>
        /// <param name="notefromlab">A note from lab..</param>
        /// <param name="observations">Individual observation details.</param>
        /// <param name="priority">Document priority, when available. 1 is high, 2 is normal. Some labs use other numbers or characters that are lab-specific. .</param>
        /// <param name="observationdatetime">Date/time (ISO 8601) the observation was taken.</param>
        /// <param name="description">Description of the document type.</param>
        /// <param name="alarmdays">The number days, weeks, months, or year until a lab result document will go into followup after being sent to the portal. .</param>
        /// <param name="documentsource">Explains where this document originated..</param>
        /// <param name="reportstatus">The status of the report..</param>
        /// <param name="subject">Subject of the document.</param>
        /// <param name="documenttypeid">The ID of the description for this document.</param>
        /// <param name="appointmentid">The appointment ID for this document.</param>
        /// <param name="departmentid">Department for the document.</param>
        /// <param name="assignedto">Person the document is assigned to.</param>
        /// <param name="createduser">The user who created this document..</param>
        /// <param name="deleteddatetime">Date/time (ISO 8601) the document was deleted.</param>
        /// <param name="observationdate">Date/time the observation was taken.</param>
        /// <param name="documentclass">Class of document.</param>
        /// <param name="lastmodifieddate">Date/time (ISO 8601) the document was last modified.</param>
        /// <param name="encounterdate">Date of the encounter associated with this document.</param>
        /// <param name="facilityid">The ID of the clinical provider associated with this clinical document. Clinical providers are a master list of providers throughout the country. These include providers as well as radiology centers, labs and pharmacies. .</param>
        /// <param name="internalnote">The &#x27;Internal Note&#x27; attached to this document.</param>
        /// <param name="patientnote">A note about this lab result for the patient. This may or may not have been sent to the patient..</param>
        /// <param name="tietoorderid">Order ID of the order this document is tied to, if any.</param>
        public PatientLabResultDocumentDetails(string createddate = default(string), string documentroute = default(string), string resultstatus = default(string), int? providerid = default(int?), string externalaccessionid = default(string), string ordertype = default(string), string resultnotes = default(string), string status = default(string), string lastmodifieduser = default(string), string externalnoteonly = default(string), string actionnote = default(string), string providerusername = default(string), string internalaccessionid = default(string), bool? isconfidential = default(bool?), string createddatetime = default(string), string documentsubclass = default(string), string encounterid = default(string), string interpretation = default(string), string labresultid = default(string), string labresultloinc = default(string), string lastmodifieddatetime = default(string), string notefromlab = default(string), List<Analyte> observations = default(List<Analyte>), string priority = default(string), string observationdatetime = default(string), string description = default(string), string alarmdays = default(string), string documentsource = default(string), string reportstatus = default(string), string subject = default(string), int? documenttypeid = default(int?), int? appointmentid = default(int?), string departmentid = default(string), string assignedto = default(string), string createduser = default(string), string deleteddatetime = default(string), string observationdate = default(string), string documentclass = default(string), string lastmodifieddate = default(string), string encounterdate = default(string), int? facilityid = default(int?), string internalnote = default(string), string patientnote = default(string), string tietoorderid = default(string))
        {
            this.Createddate = createddate;
            this.Documentroute = documentroute;
            this.Resultstatus = resultstatus;
            this.Providerid = providerid;
            this.Externalaccessionid = externalaccessionid;
            this.Ordertype = ordertype;
            this.Resultnotes = resultnotes;
            this.Status = status;
            this.Lastmodifieduser = lastmodifieduser;
            this.Externalnoteonly = externalnoteonly;
            this.Actionnote = actionnote;
            this.Providerusername = providerusername;
            this.Internalaccessionid = internalaccessionid;
            this.Isconfidential = isconfidential;
            this.Createddatetime = createddatetime;
            this.Documentsubclass = documentsubclass;
            this.Encounterid = encounterid;
            this.Interpretation = interpretation;
            this.Labresultid = labresultid;
            this.Labresultloinc = labresultloinc;
            this.Lastmodifieddatetime = lastmodifieddatetime;
            this.Notefromlab = notefromlab;
            this.Observations = observations;
            this.Priority = priority;
            this.Observationdatetime = observationdatetime;
            this.Description = description;
            this.Alarmdays = alarmdays;
            this.Documentsource = documentsource;
            this.Reportstatus = reportstatus;
            this.Subject = subject;
            this.Documenttypeid = documenttypeid;
            this.Appointmentid = appointmentid;
            this.Departmentid = departmentid;
            this.Assignedto = assignedto;
            this.Createduser = createduser;
            this.Deleteddatetime = deleteddatetime;
            this.Observationdate = observationdate;
            this.Documentclass = documentclass;
            this.Lastmodifieddate = lastmodifieddate;
            this.Encounterdate = encounterdate;
            this.Facilityid = facilityid;
            this.Internalnote = internalnote;
            this.Patientnote = patientnote;
            this.Tietoorderid = tietoorderid;
        }
        
        /// <summary>
        /// Date the document was created. Please use createddatetime instead.
        /// </summary>
        /// <value>Date the document was created. Please use createddatetime instead.</value>
        [DataMember(Name="createddate", EmitDefaultValue=false)]
        public string Createddate { get; set; }

        /// <summary>
        /// Explains method by which the document was entered into the AthenaNet (INTERFACE (digital), FAX, etc.) 
        /// </summary>
        /// <value>Explains method by which the document was entered into the AthenaNet (INTERFACE (digital), FAX, etc.) </value>
        [DataMember(Name="documentroute", EmitDefaultValue=false)]
        public string Documentroute { get; set; }

        /// <summary>
        /// The status of the result.
        /// </summary>
        /// <value>The status of the result.</value>
        [DataMember(Name="resultstatus", EmitDefaultValue=false)]
        public string Resultstatus { get; set; }

        /// <summary>
        /// Provider ID for this document
        /// </summary>
        /// <value>Provider ID for this document</value>
        [DataMember(Name="providerid", EmitDefaultValue=false)]
        public int? Providerid { get; set; }

        /// <summary>
        /// The external accession ID for this document. Format depends on the system the ID belongs to.
        /// </summary>
        /// <value>The external accession ID for this document. Format depends on the system the ID belongs to.</value>
        [DataMember(Name="externalaccessionid", EmitDefaultValue=false)]
        public string Externalaccessionid { get; set; }

        /// <summary>
        /// Order type group name
        /// </summary>
        /// <value>Order type group name</value>
        [DataMember(Name="ordertype", EmitDefaultValue=false)]
        public string Ordertype { get; set; }

        /// <summary>
        /// Result note on a document.
        /// </summary>
        /// <value>Result note on a document.</value>
        [DataMember(Name="resultnotes", EmitDefaultValue=false)]
        public string Resultnotes { get; set; }

        /// <summary>
        /// Status of the document
        /// </summary>
        /// <value>Status of the document</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// The user who last modified this document.
        /// </summary>
        /// <value>The user who last modified this document.</value>
        [DataMember(Name="lastmodifieduser", EmitDefaultValue=false)]
        public string Lastmodifieduser { get; set; }

        /// <summary>
        /// External note for the patient.
        /// </summary>
        /// <value>External note for the patient.</value>
        [DataMember(Name="externalnoteonly", EmitDefaultValue=false)]
        public string Externalnoteonly { get; set; }

        /// <summary>
        /// The most recent action note for a document
        /// </summary>
        /// <value>The most recent action note for a document</value>
        [DataMember(Name="actionnote", EmitDefaultValue=false)]
        public string Actionnote { get; set; }

        /// <summary>
        /// The username of the provider associated with this lab result document.
        /// </summary>
        /// <value>The username of the provider associated with this lab result document.</value>
        [DataMember(Name="providerusername", EmitDefaultValue=false)]
        public string Providerusername { get; set; }

        /// <summary>
        /// The internal accession ID for this document. Format depends on the system the ID belongs to.
        /// </summary>
        /// <value>The internal accession ID for this document. Format depends on the system the ID belongs to.</value>
        [DataMember(Name="internalaccessionid", EmitDefaultValue=false)]
        public string Internalaccessionid { get; set; }

        /// <summary>
        /// If true, this result document should not be shown to the patient.
        /// </summary>
        /// <value>If true, this result document should not be shown to the patient.</value>
        [DataMember(Name="isconfidential", EmitDefaultValue=false)]
        public bool? Isconfidential { get; set; }

        /// <summary>
        /// Date/Time (ISO 8601) the document was created
        /// </summary>
        /// <value>Date/Time (ISO 8601) the document was created</value>
        [DataMember(Name="createddatetime", EmitDefaultValue=false)]
        public string Createddatetime { get; set; }

        /// <summary>
        /// Specific type of document
        /// </summary>
        /// <value>Specific type of document</value>
        [DataMember(Name="documentsubclass", EmitDefaultValue=false)]
        public string Documentsubclass { get; set; }

        /// <summary>
        /// Encounter ID
        /// </summary>
        /// <value>Encounter ID</value>
        [DataMember(Name="encounterid", EmitDefaultValue=false)]
        public string Encounterid { get; set; }

        /// <summary>
        /// The practice entered interpretation of this result.
        /// </summary>
        /// <value>The practice entered interpretation of this result.</value>
        [DataMember(Name="interpretation", EmitDefaultValue=false)]
        public string Interpretation { get; set; }

        /// <summary>
        /// The primary key for labresult class of documents
        /// </summary>
        /// <value>The primary key for labresult class of documents</value>
        [DataMember(Name="labresultid", EmitDefaultValue=false)]
        public string Labresultid { get; set; }

        /// <summary>
        /// Laboratory code that identifies the overall result.
        /// </summary>
        /// <value>Laboratory code that identifies the overall result.</value>
        [DataMember(Name="labresultloinc", EmitDefaultValue=false)]
        public string Labresultloinc { get; set; }

        /// <summary>
        /// Date/time (ISO 8601) the document was last modified
        /// </summary>
        /// <value>Date/time (ISO 8601) the document was last modified</value>
        [DataMember(Name="lastmodifieddatetime", EmitDefaultValue=false)]
        public string Lastmodifieddatetime { get; set; }

        /// <summary>
        /// A note from lab.
        /// </summary>
        /// <value>A note from lab.</value>
        [DataMember(Name="notefromlab", EmitDefaultValue=false)]
        public string Notefromlab { get; set; }

        /// <summary>
        /// Individual observation details
        /// </summary>
        /// <value>Individual observation details</value>
        [DataMember(Name="observations", EmitDefaultValue=false)]
        public List<Analyte> Observations { get; set; }

        /// <summary>
        /// Document priority, when available. 1 is high, 2 is normal. Some labs use other numbers or characters that are lab-specific. 
        /// </summary>
        /// <value>Document priority, when available. 1 is high, 2 is normal. Some labs use other numbers or characters that are lab-specific. </value>
        [DataMember(Name="priority", EmitDefaultValue=false)]
        public string Priority { get; set; }

        /// <summary>
        /// Date/time (ISO 8601) the observation was taken
        /// </summary>
        /// <value>Date/time (ISO 8601) the observation was taken</value>
        [DataMember(Name="observationdatetime", EmitDefaultValue=false)]
        public string Observationdatetime { get; set; }

        /// <summary>
        /// Description of the document type
        /// </summary>
        /// <value>Description of the document type</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// The number days, weeks, months, or year until a lab result document will go into followup after being sent to the portal. 
        /// </summary>
        /// <value>The number days, weeks, months, or year until a lab result document will go into followup after being sent to the portal. </value>
        [DataMember(Name="alarmdays", EmitDefaultValue=false)]
        public string Alarmdays { get; set; }

        /// <summary>
        /// Explains where this document originated.
        /// </summary>
        /// <value>Explains where this document originated.</value>
        [DataMember(Name="documentsource", EmitDefaultValue=false)]
        public string Documentsource { get; set; }

        /// <summary>
        /// The status of the report.
        /// </summary>
        /// <value>The status of the report.</value>
        [DataMember(Name="reportstatus", EmitDefaultValue=false)]
        public string Reportstatus { get; set; }

        /// <summary>
        /// Subject of the document
        /// </summary>
        /// <value>Subject of the document</value>
        [DataMember(Name="subject", EmitDefaultValue=false)]
        public string Subject { get; set; }

        /// <summary>
        /// The ID of the description for this document
        /// </summary>
        /// <value>The ID of the description for this document</value>
        [DataMember(Name="documenttypeid", EmitDefaultValue=false)]
        public int? Documenttypeid { get; set; }

        /// <summary>
        /// The appointment ID for this document
        /// </summary>
        /// <value>The appointment ID for this document</value>
        [DataMember(Name="appointmentid", EmitDefaultValue=false)]
        public int? Appointmentid { get; set; }

        /// <summary>
        /// Department for the document
        /// </summary>
        /// <value>Department for the document</value>
        [DataMember(Name="departmentid", EmitDefaultValue=false)]
        public string Departmentid { get; set; }

        /// <summary>
        /// Person the document is assigned to
        /// </summary>
        /// <value>Person the document is assigned to</value>
        [DataMember(Name="assignedto", EmitDefaultValue=false)]
        public string Assignedto { get; set; }

        /// <summary>
        /// The user who created this document.
        /// </summary>
        /// <value>The user who created this document.</value>
        [DataMember(Name="createduser", EmitDefaultValue=false)]
        public string Createduser { get; set; }

        /// <summary>
        /// Date/time (ISO 8601) the document was deleted
        /// </summary>
        /// <value>Date/time (ISO 8601) the document was deleted</value>
        [DataMember(Name="deleteddatetime", EmitDefaultValue=false)]
        public string Deleteddatetime { get; set; }

        /// <summary>
        /// Date/time the observation was taken
        /// </summary>
        /// <value>Date/time the observation was taken</value>
        [DataMember(Name="observationdate", EmitDefaultValue=false)]
        public string Observationdate { get; set; }

        /// <summary>
        /// Class of document
        /// </summary>
        /// <value>Class of document</value>
        [DataMember(Name="documentclass", EmitDefaultValue=false)]
        public string Documentclass { get; set; }

        /// <summary>
        /// Date/time (ISO 8601) the document was last modified
        /// </summary>
        /// <value>Date/time (ISO 8601) the document was last modified</value>
        [DataMember(Name="lastmodifieddate", EmitDefaultValue=false)]
        public string Lastmodifieddate { get; set; }

        /// <summary>
        /// Date of the encounter associated with this document
        /// </summary>
        /// <value>Date of the encounter associated with this document</value>
        [DataMember(Name="encounterdate", EmitDefaultValue=false)]
        public string Encounterdate { get; set; }

        /// <summary>
        /// The ID of the clinical provider associated with this clinical document. Clinical providers are a master list of providers throughout the country. These include providers as well as radiology centers, labs and pharmacies. 
        /// </summary>
        /// <value>The ID of the clinical provider associated with this clinical document. Clinical providers are a master list of providers throughout the country. These include providers as well as radiology centers, labs and pharmacies. </value>
        [DataMember(Name="facilityid", EmitDefaultValue=false)]
        public int? Facilityid { get; set; }

        /// <summary>
        /// The &#x27;Internal Note&#x27; attached to this document
        /// </summary>
        /// <value>The &#x27;Internal Note&#x27; attached to this document</value>
        [DataMember(Name="internalnote", EmitDefaultValue=false)]
        public string Internalnote { get; set; }

        /// <summary>
        /// A note about this lab result for the patient. This may or may not have been sent to the patient.
        /// </summary>
        /// <value>A note about this lab result for the patient. This may or may not have been sent to the patient.</value>
        [DataMember(Name="patientnote", EmitDefaultValue=false)]
        public string Patientnote { get; set; }

        /// <summary>
        /// Order ID of the order this document is tied to, if any
        /// </summary>
        /// <value>Order ID of the order this document is tied to, if any</value>
        [DataMember(Name="tietoorderid", EmitDefaultValue=false)]
        public string Tietoorderid { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PatientLabResultDocumentDetails {\n");
            sb.Append("  Createddate: ").Append(Createddate).Append("\n");
            sb.Append("  Documentroute: ").Append(Documentroute).Append("\n");
            sb.Append("  Resultstatus: ").Append(Resultstatus).Append("\n");
            sb.Append("  Providerid: ").Append(Providerid).Append("\n");
            sb.Append("  Externalaccessionid: ").Append(Externalaccessionid).Append("\n");
            sb.Append("  Ordertype: ").Append(Ordertype).Append("\n");
            sb.Append("  Resultnotes: ").Append(Resultnotes).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Lastmodifieduser: ").Append(Lastmodifieduser).Append("\n");
            sb.Append("  Externalnoteonly: ").Append(Externalnoteonly).Append("\n");
            sb.Append("  Actionnote: ").Append(Actionnote).Append("\n");
            sb.Append("  Providerusername: ").Append(Providerusername).Append("\n");
            sb.Append("  Internalaccessionid: ").Append(Internalaccessionid).Append("\n");
            sb.Append("  Isconfidential: ").Append(Isconfidential).Append("\n");
            sb.Append("  Createddatetime: ").Append(Createddatetime).Append("\n");
            sb.Append("  Documentsubclass: ").Append(Documentsubclass).Append("\n");
            sb.Append("  Encounterid: ").Append(Encounterid).Append("\n");
            sb.Append("  Interpretation: ").Append(Interpretation).Append("\n");
            sb.Append("  Labresultid: ").Append(Labresultid).Append("\n");
            sb.Append("  Labresultloinc: ").Append(Labresultloinc).Append("\n");
            sb.Append("  Lastmodifieddatetime: ").Append(Lastmodifieddatetime).Append("\n");
            sb.Append("  Notefromlab: ").Append(Notefromlab).Append("\n");
            sb.Append("  Observations: ").Append(Observations).Append("\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("  Observationdatetime: ").Append(Observationdatetime).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Alarmdays: ").Append(Alarmdays).Append("\n");
            sb.Append("  Documentsource: ").Append(Documentsource).Append("\n");
            sb.Append("  Reportstatus: ").Append(Reportstatus).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  Documenttypeid: ").Append(Documenttypeid).Append("\n");
            sb.Append("  Appointmentid: ").Append(Appointmentid).Append("\n");
            sb.Append("  Departmentid: ").Append(Departmentid).Append("\n");
            sb.Append("  Assignedto: ").Append(Assignedto).Append("\n");
            sb.Append("  Createduser: ").Append(Createduser).Append("\n");
            sb.Append("  Deleteddatetime: ").Append(Deleteddatetime).Append("\n");
            sb.Append("  Observationdate: ").Append(Observationdate).Append("\n");
            sb.Append("  Documentclass: ").Append(Documentclass).Append("\n");
            sb.Append("  Lastmodifieddate: ").Append(Lastmodifieddate).Append("\n");
            sb.Append("  Encounterdate: ").Append(Encounterdate).Append("\n");
            sb.Append("  Facilityid: ").Append(Facilityid).Append("\n");
            sb.Append("  Internalnote: ").Append(Internalnote).Append("\n");
            sb.Append("  Patientnote: ").Append(Patientnote).Append("\n");
            sb.Append("  Tietoorderid: ").Append(Tietoorderid).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PatientLabResultDocumentDetails);
        }

        /// <summary>
        /// Returns true if PatientLabResultDocumentDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of PatientLabResultDocumentDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PatientLabResultDocumentDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Createddate == input.Createddate ||
                    (this.Createddate != null &&
                    this.Createddate.Equals(input.Createddate))
                ) && 
                (
                    this.Documentroute == input.Documentroute ||
                    (this.Documentroute != null &&
                    this.Documentroute.Equals(input.Documentroute))
                ) && 
                (
                    this.Resultstatus == input.Resultstatus ||
                    (this.Resultstatus != null &&
                    this.Resultstatus.Equals(input.Resultstatus))
                ) && 
                (
                    this.Providerid == input.Providerid ||
                    (this.Providerid != null &&
                    this.Providerid.Equals(input.Providerid))
                ) && 
                (
                    this.Externalaccessionid == input.Externalaccessionid ||
                    (this.Externalaccessionid != null &&
                    this.Externalaccessionid.Equals(input.Externalaccessionid))
                ) && 
                (
                    this.Ordertype == input.Ordertype ||
                    (this.Ordertype != null &&
                    this.Ordertype.Equals(input.Ordertype))
                ) && 
                (
                    this.Resultnotes == input.Resultnotes ||
                    (this.Resultnotes != null &&
                    this.Resultnotes.Equals(input.Resultnotes))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Lastmodifieduser == input.Lastmodifieduser ||
                    (this.Lastmodifieduser != null &&
                    this.Lastmodifieduser.Equals(input.Lastmodifieduser))
                ) && 
                (
                    this.Externalnoteonly == input.Externalnoteonly ||
                    (this.Externalnoteonly != null &&
                    this.Externalnoteonly.Equals(input.Externalnoteonly))
                ) && 
                (
                    this.Actionnote == input.Actionnote ||
                    (this.Actionnote != null &&
                    this.Actionnote.Equals(input.Actionnote))
                ) && 
                (
                    this.Providerusername == input.Providerusername ||
                    (this.Providerusername != null &&
                    this.Providerusername.Equals(input.Providerusername))
                ) && 
                (
                    this.Internalaccessionid == input.Internalaccessionid ||
                    (this.Internalaccessionid != null &&
                    this.Internalaccessionid.Equals(input.Internalaccessionid))
                ) && 
                (
                    this.Isconfidential == input.Isconfidential ||
                    (this.Isconfidential != null &&
                    this.Isconfidential.Equals(input.Isconfidential))
                ) && 
                (
                    this.Createddatetime == input.Createddatetime ||
                    (this.Createddatetime != null &&
                    this.Createddatetime.Equals(input.Createddatetime))
                ) && 
                (
                    this.Documentsubclass == input.Documentsubclass ||
                    (this.Documentsubclass != null &&
                    this.Documentsubclass.Equals(input.Documentsubclass))
                ) && 
                (
                    this.Encounterid == input.Encounterid ||
                    (this.Encounterid != null &&
                    this.Encounterid.Equals(input.Encounterid))
                ) && 
                (
                    this.Interpretation == input.Interpretation ||
                    (this.Interpretation != null &&
                    this.Interpretation.Equals(input.Interpretation))
                ) && 
                (
                    this.Labresultid == input.Labresultid ||
                    (this.Labresultid != null &&
                    this.Labresultid.Equals(input.Labresultid))
                ) && 
                (
                    this.Labresultloinc == input.Labresultloinc ||
                    (this.Labresultloinc != null &&
                    this.Labresultloinc.Equals(input.Labresultloinc))
                ) && 
                (
                    this.Lastmodifieddatetime == input.Lastmodifieddatetime ||
                    (this.Lastmodifieddatetime != null &&
                    this.Lastmodifieddatetime.Equals(input.Lastmodifieddatetime))
                ) && 
                (
                    this.Notefromlab == input.Notefromlab ||
                    (this.Notefromlab != null &&
                    this.Notefromlab.Equals(input.Notefromlab))
                ) && 
                (
                    this.Observations == input.Observations ||
                    this.Observations != null &&
                    input.Observations != null &&
                    this.Observations.SequenceEqual(input.Observations)
                ) && 
                (
                    this.Priority == input.Priority ||
                    (this.Priority != null &&
                    this.Priority.Equals(input.Priority))
                ) && 
                (
                    this.Observationdatetime == input.Observationdatetime ||
                    (this.Observationdatetime != null &&
                    this.Observationdatetime.Equals(input.Observationdatetime))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Alarmdays == input.Alarmdays ||
                    (this.Alarmdays != null &&
                    this.Alarmdays.Equals(input.Alarmdays))
                ) && 
                (
                    this.Documentsource == input.Documentsource ||
                    (this.Documentsource != null &&
                    this.Documentsource.Equals(input.Documentsource))
                ) && 
                (
                    this.Reportstatus == input.Reportstatus ||
                    (this.Reportstatus != null &&
                    this.Reportstatus.Equals(input.Reportstatus))
                ) && 
                (
                    this.Subject == input.Subject ||
                    (this.Subject != null &&
                    this.Subject.Equals(input.Subject))
                ) && 
                (
                    this.Documenttypeid == input.Documenttypeid ||
                    (this.Documenttypeid != null &&
                    this.Documenttypeid.Equals(input.Documenttypeid))
                ) && 
                (
                    this.Appointmentid == input.Appointmentid ||
                    (this.Appointmentid != null &&
                    this.Appointmentid.Equals(input.Appointmentid))
                ) && 
                (
                    this.Departmentid == input.Departmentid ||
                    (this.Departmentid != null &&
                    this.Departmentid.Equals(input.Departmentid))
                ) && 
                (
                    this.Assignedto == input.Assignedto ||
                    (this.Assignedto != null &&
                    this.Assignedto.Equals(input.Assignedto))
                ) && 
                (
                    this.Createduser == input.Createduser ||
                    (this.Createduser != null &&
                    this.Createduser.Equals(input.Createduser))
                ) && 
                (
                    this.Deleteddatetime == input.Deleteddatetime ||
                    (this.Deleteddatetime != null &&
                    this.Deleteddatetime.Equals(input.Deleteddatetime))
                ) && 
                (
                    this.Observationdate == input.Observationdate ||
                    (this.Observationdate != null &&
                    this.Observationdate.Equals(input.Observationdate))
                ) && 
                (
                    this.Documentclass == input.Documentclass ||
                    (this.Documentclass != null &&
                    this.Documentclass.Equals(input.Documentclass))
                ) && 
                (
                    this.Lastmodifieddate == input.Lastmodifieddate ||
                    (this.Lastmodifieddate != null &&
                    this.Lastmodifieddate.Equals(input.Lastmodifieddate))
                ) && 
                (
                    this.Encounterdate == input.Encounterdate ||
                    (this.Encounterdate != null &&
                    this.Encounterdate.Equals(input.Encounterdate))
                ) && 
                (
                    this.Facilityid == input.Facilityid ||
                    (this.Facilityid != null &&
                    this.Facilityid.Equals(input.Facilityid))
                ) && 
                (
                    this.Internalnote == input.Internalnote ||
                    (this.Internalnote != null &&
                    this.Internalnote.Equals(input.Internalnote))
                ) && 
                (
                    this.Patientnote == input.Patientnote ||
                    (this.Patientnote != null &&
                    this.Patientnote.Equals(input.Patientnote))
                ) && 
                (
                    this.Tietoorderid == input.Tietoorderid ||
                    (this.Tietoorderid != null &&
                    this.Tietoorderid.Equals(input.Tietoorderid))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Createddate != null)
                    hashCode = hashCode * 59 + this.Createddate.GetHashCode();
                if (this.Documentroute != null)
                    hashCode = hashCode * 59 + this.Documentroute.GetHashCode();
                if (this.Resultstatus != null)
                    hashCode = hashCode * 59 + this.Resultstatus.GetHashCode();
                if (this.Providerid != null)
                    hashCode = hashCode * 59 + this.Providerid.GetHashCode();
                if (this.Externalaccessionid != null)
                    hashCode = hashCode * 59 + this.Externalaccessionid.GetHashCode();
                if (this.Ordertype != null)
                    hashCode = hashCode * 59 + this.Ordertype.GetHashCode();
                if (this.Resultnotes != null)
                    hashCode = hashCode * 59 + this.Resultnotes.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Lastmodifieduser != null)
                    hashCode = hashCode * 59 + this.Lastmodifieduser.GetHashCode();
                if (this.Externalnoteonly != null)
                    hashCode = hashCode * 59 + this.Externalnoteonly.GetHashCode();
                if (this.Actionnote != null)
                    hashCode = hashCode * 59 + this.Actionnote.GetHashCode();
                if (this.Providerusername != null)
                    hashCode = hashCode * 59 + this.Providerusername.GetHashCode();
                if (this.Internalaccessionid != null)
                    hashCode = hashCode * 59 + this.Internalaccessionid.GetHashCode();
                if (this.Isconfidential != null)
                    hashCode = hashCode * 59 + this.Isconfidential.GetHashCode();
                if (this.Createddatetime != null)
                    hashCode = hashCode * 59 + this.Createddatetime.GetHashCode();
                if (this.Documentsubclass != null)
                    hashCode = hashCode * 59 + this.Documentsubclass.GetHashCode();
                if (this.Encounterid != null)
                    hashCode = hashCode * 59 + this.Encounterid.GetHashCode();
                if (this.Interpretation != null)
                    hashCode = hashCode * 59 + this.Interpretation.GetHashCode();
                if (this.Labresultid != null)
                    hashCode = hashCode * 59 + this.Labresultid.GetHashCode();
                if (this.Labresultloinc != null)
                    hashCode = hashCode * 59 + this.Labresultloinc.GetHashCode();
                if (this.Lastmodifieddatetime != null)
                    hashCode = hashCode * 59 + this.Lastmodifieddatetime.GetHashCode();
                if (this.Notefromlab != null)
                    hashCode = hashCode * 59 + this.Notefromlab.GetHashCode();
                if (this.Observations != null)
                    hashCode = hashCode * 59 + this.Observations.GetHashCode();
                if (this.Priority != null)
                    hashCode = hashCode * 59 + this.Priority.GetHashCode();
                if (this.Observationdatetime != null)
                    hashCode = hashCode * 59 + this.Observationdatetime.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Alarmdays != null)
                    hashCode = hashCode * 59 + this.Alarmdays.GetHashCode();
                if (this.Documentsource != null)
                    hashCode = hashCode * 59 + this.Documentsource.GetHashCode();
                if (this.Reportstatus != null)
                    hashCode = hashCode * 59 + this.Reportstatus.GetHashCode();
                if (this.Subject != null)
                    hashCode = hashCode * 59 + this.Subject.GetHashCode();
                if (this.Documenttypeid != null)
                    hashCode = hashCode * 59 + this.Documenttypeid.GetHashCode();
                if (this.Appointmentid != null)
                    hashCode = hashCode * 59 + this.Appointmentid.GetHashCode();
                if (this.Departmentid != null)
                    hashCode = hashCode * 59 + this.Departmentid.GetHashCode();
                if (this.Assignedto != null)
                    hashCode = hashCode * 59 + this.Assignedto.GetHashCode();
                if (this.Createduser != null)
                    hashCode = hashCode * 59 + this.Createduser.GetHashCode();
                if (this.Deleteddatetime != null)
                    hashCode = hashCode * 59 + this.Deleteddatetime.GetHashCode();
                if (this.Observationdate != null)
                    hashCode = hashCode * 59 + this.Observationdate.GetHashCode();
                if (this.Documentclass != null)
                    hashCode = hashCode * 59 + this.Documentclass.GetHashCode();
                if (this.Lastmodifieddate != null)
                    hashCode = hashCode * 59 + this.Lastmodifieddate.GetHashCode();
                if (this.Encounterdate != null)
                    hashCode = hashCode * 59 + this.Encounterdate.GetHashCode();
                if (this.Facilityid != null)
                    hashCode = hashCode * 59 + this.Facilityid.GetHashCode();
                if (this.Internalnote != null)
                    hashCode = hashCode * 59 + this.Internalnote.GetHashCode();
                if (this.Patientnote != null)
                    hashCode = hashCode * 59 + this.Patientnote.GetHashCode();
                if (this.Tietoorderid != null)
                    hashCode = hashCode * 59 + this.Tietoorderid.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
