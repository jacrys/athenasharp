/* 
 * athenahealth More Disruption Please (MDP) API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Jacrys.AthenaSharp.Client.SwaggerDateConverter;

namespace Jacrys.AthenaSharp.Model
{
    /// <summary>
    /// ProviderCreatedResponse
    /// </summary>
    [DataContract]
        public partial class ProviderCreatedResponse :  IEquatable<ProviderCreatedResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProviderCreatedResponse" /> class.
        /// </summary>
        /// <param name="providerid">The ID to be used for this provider. Note that in athenaNet, an individual provider (as defined by a unique NPI) may have multiple provider IDs. For the API, we have collapsed these to a single canonical ID. For updates and deletes, this will be either 1 or -1 depending on success or failure.  (required).</param>
        /// <param name="errorreason">Error message if the operation did not work..</param>
        /// <param name="alertmessage">Alert message if the operation did not work..</param>
        public ProviderCreatedResponse(int? providerid = default(int?), string errorreason = default(string), string alertmessage = default(string))
        {
            // to ensure "providerid" is required (not null)
            if (providerid == null)
            {
                throw new InvalidDataException("providerid is a required property for ProviderCreatedResponse and cannot be null");
            }
            else
            {
                this.Providerid = providerid;
            }
            this.Errorreason = errorreason;
            this.Alertmessage = alertmessage;
        }
        
        /// <summary>
        /// The ID to be used for this provider. Note that in athenaNet, an individual provider (as defined by a unique NPI) may have multiple provider IDs. For the API, we have collapsed these to a single canonical ID. For updates and deletes, this will be either 1 or -1 depending on success or failure. 
        /// </summary>
        /// <value>The ID to be used for this provider. Note that in athenaNet, an individual provider (as defined by a unique NPI) may have multiple provider IDs. For the API, we have collapsed these to a single canonical ID. For updates and deletes, this will be either 1 or -1 depending on success or failure. </value>
        [DataMember(Name="providerid", EmitDefaultValue=false)]
        public int? Providerid { get; set; }

        /// <summary>
        /// Error message if the operation did not work.
        /// </summary>
        /// <value>Error message if the operation did not work.</value>
        [DataMember(Name="errorreason", EmitDefaultValue=false)]
        public string Errorreason { get; set; }

        /// <summary>
        /// Alert message if the operation did not work.
        /// </summary>
        /// <value>Alert message if the operation did not work.</value>
        [DataMember(Name="alertmessage", EmitDefaultValue=false)]
        public string Alertmessage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProviderCreatedResponse {\n");
            sb.Append("  Providerid: ").Append(Providerid).Append("\n");
            sb.Append("  Errorreason: ").Append(Errorreason).Append("\n");
            sb.Append("  Alertmessage: ").Append(Alertmessage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProviderCreatedResponse);
        }

        /// <summary>
        /// Returns true if ProviderCreatedResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of ProviderCreatedResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProviderCreatedResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Providerid == input.Providerid ||
                    (this.Providerid != null &&
                    this.Providerid.Equals(input.Providerid))
                ) && 
                (
                    this.Errorreason == input.Errorreason ||
                    (this.Errorreason != null &&
                    this.Errorreason.Equals(input.Errorreason))
                ) && 
                (
                    this.Alertmessage == input.Alertmessage ||
                    (this.Alertmessage != null &&
                    this.Alertmessage.Equals(input.Alertmessage))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Providerid != null)
                    hashCode = hashCode * 59 + this.Providerid.GetHashCode();
                if (this.Errorreason != null)
                    hashCode = hashCode * 59 + this.Errorreason.GetHashCode();
                if (this.Alertmessage != null)
                    hashCode = hashCode * 59 + this.Alertmessage.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
