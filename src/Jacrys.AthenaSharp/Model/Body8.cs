/* 
 * athenahealth More Disruption Please (MDP) API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Body8
    /// </summary>
    [DataContract]
        public partial class Body8 :  IEquatable<Body8>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Body8" /> class.
        /// </summary>
        /// <param name="assessmenttext">The text to be updated to the assessment note. (required).</param>
        /// <param name="replacetext">If true, will replace the existing assessment text with the new one. If false, will append to the existing text. .</param>
        public Body8(string assessmenttext = default(string), bool? replacetext = default(bool?))
        {
            // to ensure "assessmenttext" is required (not null)
            if (assessmenttext == null)
            {
                throw new InvalidDataException("assessmenttext is a required property for Body8 and cannot be null");
            }
            else
            {
                this.Assessmenttext = assessmenttext;
            }
            this.Replacetext = replacetext;
        }
        
        /// <summary>
        /// The text to be updated to the assessment note.
        /// </summary>
        /// <value>The text to be updated to the assessment note.</value>
        [DataMember(Name="assessmenttext", EmitDefaultValue=false)]
        public string Assessmenttext { get; set; }

        /// <summary>
        /// If true, will replace the existing assessment text with the new one. If false, will append to the existing text. 
        /// </summary>
        /// <value>If true, will replace the existing assessment text with the new one. If false, will append to the existing text. </value>
        [DataMember(Name="replacetext", EmitDefaultValue=false)]
        public bool? Replacetext { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Body8 {\n");
            sb.Append("  Assessmenttext: ").Append(Assessmenttext).Append("\n");
            sb.Append("  Replacetext: ").Append(Replacetext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Body8);
        }

        /// <summary>
        /// Returns true if Body8 instances are equal
        /// </summary>
        /// <param name="input">Instance of Body8 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Body8 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Assessmenttext == input.Assessmenttext ||
                    (this.Assessmenttext != null &&
                    this.Assessmenttext.Equals(input.Assessmenttext))
                ) && 
                (
                    this.Replacetext == input.Replacetext ||
                    (this.Replacetext != null &&
                    this.Replacetext.Equals(input.Replacetext))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Assessmenttext != null)
                    hashCode = hashCode * 59 + this.Assessmenttext.GetHashCode();
                if (this.Replacetext != null)
                    hashCode = hashCode * 59 + this.Replacetext.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
