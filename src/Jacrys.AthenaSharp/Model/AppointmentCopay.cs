/* 
 * athenahealth More Disruption Please (MDP) API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Jacrys.AthenaSharp.Client.SwaggerDateConverter;

namespace Jacrys.AthenaSharp.Model
{
    /// <summary>
    /// AppointmentCopay
    /// </summary>
    [DataContract]
        public partial class AppointmentCopay :  IEquatable<AppointmentCopay>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AppointmentCopay" /> class.
        /// </summary>
        /// <param name="insurancecopay">The expected copay based on the patient&#x27;s primary insurance and appointment type..</param>
        /// <param name="collectedforappointment">Copay payments that have already been collected for this specific appointment..</param>
        /// <param name="collectedforother">Copay payments that have already been collected for this patient, but that have not yet been applied to any specific appointment..</param>
        public AppointmentCopay(string insurancecopay = default(string), string collectedforappointment = default(string), string collectedforother = default(string))
        {
            this.Insurancecopay = insurancecopay;
            this.Collectedforappointment = collectedforappointment;
            this.Collectedforother = collectedforother;
        }
        
        /// <summary>
        /// The expected copay based on the patient&#x27;s primary insurance and appointment type.
        /// </summary>
        /// <value>The expected copay based on the patient&#x27;s primary insurance and appointment type.</value>
        [DataMember(Name="insurancecopay", EmitDefaultValue=false)]
        public string Insurancecopay { get; set; }

        /// <summary>
        /// Copay payments that have already been collected for this specific appointment.
        /// </summary>
        /// <value>Copay payments that have already been collected for this specific appointment.</value>
        [DataMember(Name="collectedforappointment", EmitDefaultValue=false)]
        public string Collectedforappointment { get; set; }

        /// <summary>
        /// Copay payments that have already been collected for this patient, but that have not yet been applied to any specific appointment.
        /// </summary>
        /// <value>Copay payments that have already been collected for this patient, but that have not yet been applied to any specific appointment.</value>
        [DataMember(Name="collectedforother", EmitDefaultValue=false)]
        public string Collectedforother { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AppointmentCopay {\n");
            sb.Append("  Insurancecopay: ").Append(Insurancecopay).Append("\n");
            sb.Append("  Collectedforappointment: ").Append(Collectedforappointment).Append("\n");
            sb.Append("  Collectedforother: ").Append(Collectedforother).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AppointmentCopay);
        }

        /// <summary>
        /// Returns true if AppointmentCopay instances are equal
        /// </summary>
        /// <param name="input">Instance of AppointmentCopay to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AppointmentCopay input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Insurancecopay == input.Insurancecopay ||
                    (this.Insurancecopay != null &&
                    this.Insurancecopay.Equals(input.Insurancecopay))
                ) && 
                (
                    this.Collectedforappointment == input.Collectedforappointment ||
                    (this.Collectedforappointment != null &&
                    this.Collectedforappointment.Equals(input.Collectedforappointment))
                ) && 
                (
                    this.Collectedforother == input.Collectedforother ||
                    (this.Collectedforother != null &&
                    this.Collectedforother.Equals(input.Collectedforother))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Insurancecopay != null)
                    hashCode = hashCode * 59 + this.Insurancecopay.GetHashCode();
                if (this.Collectedforappointment != null)
                    hashCode = hashCode * 59 + this.Collectedforappointment.GetHashCode();
                if (this.Collectedforother != null)
                    hashCode = hashCode * 59 + this.Collectedforother.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
