/* 
 * athenahealth More Disruption Please (MDP) API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Jacrys.AthenaSharp.Client.SwaggerDateConverter;

namespace Jacrys.AthenaSharp.Model
{
    /// <summary>
    /// MedicationEvent
    /// </summary>
    [DataContract]
        public partial class MedicationEvent :  IEquatable<MedicationEvent>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MedicationEvent" /> class.
        /// </summary>
        /// <param name="type">The event type. Can be START, END, ORDER, ENTER, FILL, or HIDE. (required).</param>
        /// <param name="eventdate">The date this event occurred (required).</param>
        /// <param name="userdisplayname">The display name for the user most relevant for this event. May be null..</param>
        public MedicationEvent(string type = default(string), string eventdate = default(string), string userdisplayname = default(string))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for MedicationEvent and cannot be null");
            }
            else
            {
                this.Type = type;
            }
            // to ensure "eventdate" is required (not null)
            if (eventdate == null)
            {
                throw new InvalidDataException("eventdate is a required property for MedicationEvent and cannot be null");
            }
            else
            {
                this.Eventdate = eventdate;
            }
            this.Userdisplayname = userdisplayname;
        }
        
        /// <summary>
        /// The event type. Can be START, END, ORDER, ENTER, FILL, or HIDE.
        /// </summary>
        /// <value>The event type. Can be START, END, ORDER, ENTER, FILL, or HIDE.</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// The date this event occurred
        /// </summary>
        /// <value>The date this event occurred</value>
        [DataMember(Name="eventdate", EmitDefaultValue=false)]
        public string Eventdate { get; set; }

        /// <summary>
        /// The display name for the user most relevant for this event. May be null.
        /// </summary>
        /// <value>The display name for the user most relevant for this event. May be null.</value>
        [DataMember(Name="userdisplayname", EmitDefaultValue=false)]
        public string Userdisplayname { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MedicationEvent {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Eventdate: ").Append(Eventdate).Append("\n");
            sb.Append("  Userdisplayname: ").Append(Userdisplayname).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MedicationEvent);
        }

        /// <summary>
        /// Returns true if MedicationEvent instances are equal
        /// </summary>
        /// <param name="input">Instance of MedicationEvent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MedicationEvent input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Eventdate == input.Eventdate ||
                    (this.Eventdate != null &&
                    this.Eventdate.Equals(input.Eventdate))
                ) && 
                (
                    this.Userdisplayname == input.Userdisplayname ||
                    (this.Userdisplayname != null &&
                    this.Userdisplayname.Equals(input.Userdisplayname))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Eventdate != null)
                    hashCode = hashCode * 59 + this.Eventdate.GetHashCode();
                if (this.Userdisplayname != null)
                    hashCode = hashCode * 59 + this.Userdisplayname.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
