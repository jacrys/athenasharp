/* 
 * athenahealth More Disruption Please (MDP) API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Jacrys.AthenaSharp.Client.SwaggerDateConverter;

namespace Jacrys.AthenaSharp.Model
{
    /// <summary>
    /// Code
    /// </summary>
    [DataContract]
        public partial class Code :  IEquatable<Code>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Code" /> class.
        /// </summary>
        /// <param name="codeset">Codeset for this code (ICD9 or ICD10) (required).</param>
        /// <param name="code">Actual ICD code for this diagnosis (required).</param>
        /// <param name="description">Brief description for this code.</param>
        public Code(string codeset = default(string), string code = default(string), string description = default(string))
        {
            // to ensure "codeset" is required (not null)
            if (codeset == null)
            {
                throw new InvalidDataException("codeset is a required property for Code and cannot be null");
            }
            else
            {
                this.Codeset = codeset;
            }
            // to ensure "code" is required (not null)
            if (code == null)
            {
                throw new InvalidDataException("code is a required property for Code and cannot be null");
            }
            else
            {
                this._Code = code;
            }
            this.Description = description;
        }
        
        /// <summary>
        /// Codeset for this code (ICD9 or ICD10)
        /// </summary>
        /// <value>Codeset for this code (ICD9 or ICD10)</value>
        [DataMember(Name="codeset", EmitDefaultValue=false)]
        public string Codeset { get; set; }

        /// <summary>
        /// Actual ICD code for this diagnosis
        /// </summary>
        /// <value>Actual ICD code for this diagnosis</value>
        [DataMember(Name="code", EmitDefaultValue=false)]
        public string _Code { get; set; }

        /// <summary>
        /// Brief description for this code
        /// </summary>
        /// <value>Brief description for this code</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Code {\n");
            sb.Append("  Codeset: ").Append(Codeset).Append("\n");
            sb.Append("  _Code: ").Append(_Code).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Code);
        }

        /// <summary>
        /// Returns true if Code instances are equal
        /// </summary>
        /// <param name="input">Instance of Code to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Code input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Codeset == input.Codeset ||
                    (this.Codeset != null &&
                    this.Codeset.Equals(input.Codeset))
                ) && 
                (
                    this._Code == input._Code ||
                    (this._Code != null &&
                    this._Code.Equals(input._Code))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Codeset != null)
                    hashCode = hashCode * 59 + this.Codeset.GetHashCode();
                if (this._Code != null)
                    hashCode = hashCode * 59 + this._Code.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
