/* 
 * athenahealth More Disruption Please (MDP) API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Jacrys.AthenaSharp.Client.SwaggerDateConverter;

namespace Jacrys.AthenaSharp.Model
{
    /// <summary>
    /// CreatePatientProblemResponse
    /// </summary>
    [DataContract]
        public partial class CreatePatientProblemResponse :  IEquatable<CreatePatientProblemResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreatePatientProblemResponse" /> class.
        /// </summary>
        /// <param name="problemid">If successful, the athena ID of the newly created problem.</param>
        /// <param name="success">Whether the operation was successful or not. (required).</param>
        /// <param name="errormessage">If the operation failed, this will contain any error messages..</param>
        public CreatePatientProblemResponse(int? problemid = default(int?), bool? success = default(bool?), string errormessage = default(string))
        {
            // to ensure "success" is required (not null)
            if (success == null)
            {
                throw new InvalidDataException("success is a required property for CreatePatientProblemResponse and cannot be null");
            }
            else
            {
                this.Success = success;
            }
            this.Problemid = problemid;
            this.Errormessage = errormessage;
        }
        
        /// <summary>
        /// If successful, the athena ID of the newly created problem
        /// </summary>
        /// <value>If successful, the athena ID of the newly created problem</value>
        [DataMember(Name="problemid", EmitDefaultValue=false)]
        public int? Problemid { get; set; }

        /// <summary>
        /// Whether the operation was successful or not.
        /// </summary>
        /// <value>Whether the operation was successful or not.</value>
        [DataMember(Name="success", EmitDefaultValue=false)]
        public bool? Success { get; set; }

        /// <summary>
        /// If the operation failed, this will contain any error messages.
        /// </summary>
        /// <value>If the operation failed, this will contain any error messages.</value>
        [DataMember(Name="errormessage", EmitDefaultValue=false)]
        public string Errormessage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreatePatientProblemResponse {\n");
            sb.Append("  Problemid: ").Append(Problemid).Append("\n");
            sb.Append("  Success: ").Append(Success).Append("\n");
            sb.Append("  Errormessage: ").Append(Errormessage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreatePatientProblemResponse);
        }

        /// <summary>
        /// Returns true if CreatePatientProblemResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of CreatePatientProblemResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreatePatientProblemResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Problemid == input.Problemid ||
                    (this.Problemid != null &&
                    this.Problemid.Equals(input.Problemid))
                ) && 
                (
                    this.Success == input.Success ||
                    (this.Success != null &&
                    this.Success.Equals(input.Success))
                ) && 
                (
                    this.Errormessage == input.Errormessage ||
                    (this.Errormessage != null &&
                    this.Errormessage.Equals(input.Errormessage))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Problemid != null)
                    hashCode = hashCode * 59 + this.Problemid.GetHashCode();
                if (this.Success != null)
                    hashCode = hashCode * 59 + this.Success.GetHashCode();
                if (this.Errormessage != null)
                    hashCode = hashCode * 59 + this.Errormessage.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
