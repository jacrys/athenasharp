/* 
 * athenahealth More Disruption Please (MDP) API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Jacrys.AthenaSharp.Client.SwaggerDateConverter;

namespace Jacrys.AthenaSharp.Model
{
    /// <summary>
    /// PatientDeparmentStatus
    /// </summary>
    [DataContract]
        public partial class PatientDeparmentStatus :  IEquatable<PatientDeparmentStatus>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PatientDeparmentStatus" /> class.
        /// </summary>
        /// <param name="departmentid">The ID of a department that this patient is registered in..</param>
        /// <param name="primaryproviderid">The \&quot;primary\&quot; provider for this patient, if set..</param>
        /// <param name="status">The \&quot;status\&quot; of the patient, one of active, inactive, prospective, or deleted..</param>
        public PatientDeparmentStatus(int? departmentid = default(int?), string primaryproviderid = default(string), string status = default(string))
        {
            this.Departmentid = departmentid;
            this.Primaryproviderid = primaryproviderid;
            this.Status = status;
        }
        
        /// <summary>
        /// The ID of a department that this patient is registered in.
        /// </summary>
        /// <value>The ID of a department that this patient is registered in.</value>
        [DataMember(Name="departmentid", EmitDefaultValue=false)]
        public int? Departmentid { get; set; }

        /// <summary>
        /// The \&quot;primary\&quot; provider for this patient, if set.
        /// </summary>
        /// <value>The \&quot;primary\&quot; provider for this patient, if set.</value>
        [DataMember(Name="primaryproviderid", EmitDefaultValue=false)]
        public string Primaryproviderid { get; set; }

        /// <summary>
        /// The \&quot;status\&quot; of the patient, one of active, inactive, prospective, or deleted.
        /// </summary>
        /// <value>The \&quot;status\&quot; of the patient, one of active, inactive, prospective, or deleted.</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PatientDeparmentStatus {\n");
            sb.Append("  Departmentid: ").Append(Departmentid).Append("\n");
            sb.Append("  Primaryproviderid: ").Append(Primaryproviderid).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PatientDeparmentStatus);
        }

        /// <summary>
        /// Returns true if PatientDeparmentStatus instances are equal
        /// </summary>
        /// <param name="input">Instance of PatientDeparmentStatus to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PatientDeparmentStatus input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Departmentid == input.Departmentid ||
                    (this.Departmentid != null &&
                    this.Departmentid.Equals(input.Departmentid))
                ) && 
                (
                    this.Primaryproviderid == input.Primaryproviderid ||
                    (this.Primaryproviderid != null &&
                    this.Primaryproviderid.Equals(input.Primaryproviderid))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Departmentid != null)
                    hashCode = hashCode * 59 + this.Departmentid.GetHashCode();
                if (this.Primaryproviderid != null)
                    hashCode = hashCode * 59 + this.Primaryproviderid.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
