/* 
 * athenahealth More Disruption Please (MDP) API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Jacrys.AthenaSharp.Client.SwaggerDateConverter;

namespace Jacrys.AthenaSharp.Model
{
    /// <summary>
    /// EncounterAssesmentText
    /// </summary>
    [DataContract]
        public partial class EncounterAssesmentText :  IEquatable<EncounterAssesmentText>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EncounterAssesmentText" /> class.
        /// </summary>
        /// <param name="lastmodifieddatetime">The datetime that this text was last updated. (required).</param>
        /// <param name="assessmenttext">The text of the Assessment / Plan section. Not all practices use this. Some use it extensively with HTML templates.  (required).</param>
        /// <param name="lastmodifiedby">The username of the user who last updated this text. (required).</param>
        public EncounterAssesmentText(string lastmodifieddatetime = default(string), string assessmenttext = default(string), string lastmodifiedby = default(string))
        {
            // to ensure "lastmodifieddatetime" is required (not null)
            if (lastmodifieddatetime == null)
            {
                throw new InvalidDataException("lastmodifieddatetime is a required property for EncounterAssesmentText and cannot be null");
            }
            else
            {
                this.Lastmodifieddatetime = lastmodifieddatetime;
            }
            // to ensure "assessmenttext" is required (not null)
            if (assessmenttext == null)
            {
                throw new InvalidDataException("assessmenttext is a required property for EncounterAssesmentText and cannot be null");
            }
            else
            {
                this.Assessmenttext = assessmenttext;
            }
            // to ensure "lastmodifiedby" is required (not null)
            if (lastmodifiedby == null)
            {
                throw new InvalidDataException("lastmodifiedby is a required property for EncounterAssesmentText and cannot be null");
            }
            else
            {
                this.Lastmodifiedby = lastmodifiedby;
            }
        }
        
        /// <summary>
        /// The datetime that this text was last updated.
        /// </summary>
        /// <value>The datetime that this text was last updated.</value>
        [DataMember(Name="lastmodifieddatetime", EmitDefaultValue=false)]
        public string Lastmodifieddatetime { get; set; }

        /// <summary>
        /// The text of the Assessment / Plan section. Not all practices use this. Some use it extensively with HTML templates. 
        /// </summary>
        /// <value>The text of the Assessment / Plan section. Not all practices use this. Some use it extensively with HTML templates. </value>
        [DataMember(Name="assessmenttext", EmitDefaultValue=false)]
        public string Assessmenttext { get; set; }

        /// <summary>
        /// The username of the user who last updated this text.
        /// </summary>
        /// <value>The username of the user who last updated this text.</value>
        [DataMember(Name="lastmodifiedby", EmitDefaultValue=false)]
        public string Lastmodifiedby { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EncounterAssesmentText {\n");
            sb.Append("  Lastmodifieddatetime: ").Append(Lastmodifieddatetime).Append("\n");
            sb.Append("  Assessmenttext: ").Append(Assessmenttext).Append("\n");
            sb.Append("  Lastmodifiedby: ").Append(Lastmodifiedby).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EncounterAssesmentText);
        }

        /// <summary>
        /// Returns true if EncounterAssesmentText instances are equal
        /// </summary>
        /// <param name="input">Instance of EncounterAssesmentText to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EncounterAssesmentText input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Lastmodifieddatetime == input.Lastmodifieddatetime ||
                    (this.Lastmodifieddatetime != null &&
                    this.Lastmodifieddatetime.Equals(input.Lastmodifieddatetime))
                ) && 
                (
                    this.Assessmenttext == input.Assessmenttext ||
                    (this.Assessmenttext != null &&
                    this.Assessmenttext.Equals(input.Assessmenttext))
                ) && 
                (
                    this.Lastmodifiedby == input.Lastmodifiedby ||
                    (this.Lastmodifiedby != null &&
                    this.Lastmodifiedby.Equals(input.Lastmodifiedby))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Lastmodifieddatetime != null)
                    hashCode = hashCode * 59 + this.Lastmodifieddatetime.GetHashCode();
                if (this.Assessmenttext != null)
                    hashCode = hashCode * 59 + this.Assessmenttext.GetHashCode();
                if (this.Lastmodifiedby != null)
                    hashCode = hashCode * 59 + this.Lastmodifiedby.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
