/* 
 * athenahealth More Disruption Please (MDP) API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Jacrys.AthenaSharp.Client.SwaggerDateConverter;

namespace Jacrys.AthenaSharp.Model
{
    /// <summary>
    /// CreatePersonForm
    /// </summary>
    [DataContract]
        public partial class CreatePersonForm :  IEquatable<CreatePersonForm>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreatePersonForm" /> class.
        /// </summary>
        /// <param name="address1">Patient&#x27;s address - 1st line (Max length: 100).</param>
        /// <param name="address2">Patient&#x27;s address - 2nd line (Max length: 100).</param>
        /// <param name="city">Patient&#x27;s city (Max length: 30).</param>
        /// <param name="departmentid">Primary (registration) department ID..</param>
        /// <param name="dob">Patient&#x27;s DOB (mm/dd/yyyy) (required).</param>
        /// <param name="email">Patient&#x27;s email address. &#x27;declined&#x27; can be used to indicate just that..</param>
        /// <param name="firstname">Patient&#x27;s first name.</param>
        public CreatePersonForm(string address1 = default(string), string address2 = default(string), string city = default(string), int? departmentid = default(int?), string dob = default(string), string email = default(string), string firstname = default(string))
        {
            // to ensure "dob" is required (not null)
            if (dob == null)
            {
                throw new InvalidDataException("dob is a required property for CreatePersonForm and cannot be null");
            }
            else
            {
                this.Dob = dob;
            }
            this.Address1 = address1;
            this.Address2 = address2;
            this.City = city;
            this.Departmentid = departmentid;
            this.Email = email;
            this.Firstname = firstname;
        }
        
        /// <summary>
        /// Patient&#x27;s address - 1st line (Max length: 100)
        /// </summary>
        /// <value>Patient&#x27;s address - 1st line (Max length: 100)</value>
        [DataMember(Name="address1", EmitDefaultValue=false)]
        public string Address1 { get; set; }

        /// <summary>
        /// Patient&#x27;s address - 2nd line (Max length: 100)
        /// </summary>
        /// <value>Patient&#x27;s address - 2nd line (Max length: 100)</value>
        [DataMember(Name="address2", EmitDefaultValue=false)]
        public string Address2 { get; set; }

        /// <summary>
        /// Patient&#x27;s city (Max length: 30)
        /// </summary>
        /// <value>Patient&#x27;s city (Max length: 30)</value>
        [DataMember(Name="city", EmitDefaultValue=false)]
        public string City { get; set; }

        /// <summary>
        /// Primary (registration) department ID.
        /// </summary>
        /// <value>Primary (registration) department ID.</value>
        [DataMember(Name="departmentid", EmitDefaultValue=false)]
        public int? Departmentid { get; set; }

        /// <summary>
        /// Patient&#x27;s DOB (mm/dd/yyyy)
        /// </summary>
        /// <value>Patient&#x27;s DOB (mm/dd/yyyy)</value>
        [DataMember(Name="dob", EmitDefaultValue=false)]
        public string Dob { get; set; }

        /// <summary>
        /// Patient&#x27;s email address. &#x27;declined&#x27; can be used to indicate just that.
        /// </summary>
        /// <value>Patient&#x27;s email address. &#x27;declined&#x27; can be used to indicate just that.</value>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// Patient&#x27;s first name
        /// </summary>
        /// <value>Patient&#x27;s first name</value>
        [DataMember(Name="firstname", EmitDefaultValue=false)]
        public string Firstname { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreatePersonForm {\n");
            sb.Append("  Address1: ").Append(Address1).Append("\n");
            sb.Append("  Address2: ").Append(Address2).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  Departmentid: ").Append(Departmentid).Append("\n");
            sb.Append("  Dob: ").Append(Dob).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Firstname: ").Append(Firstname).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreatePersonForm);
        }

        /// <summary>
        /// Returns true if CreatePersonForm instances are equal
        /// </summary>
        /// <param name="input">Instance of CreatePersonForm to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreatePersonForm input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Address1 == input.Address1 ||
                    (this.Address1 != null &&
                    this.Address1.Equals(input.Address1))
                ) && 
                (
                    this.Address2 == input.Address2 ||
                    (this.Address2 != null &&
                    this.Address2.Equals(input.Address2))
                ) && 
                (
                    this.City == input.City ||
                    (this.City != null &&
                    this.City.Equals(input.City))
                ) && 
                (
                    this.Departmentid == input.Departmentid ||
                    (this.Departmentid != null &&
                    this.Departmentid.Equals(input.Departmentid))
                ) && 
                (
                    this.Dob == input.Dob ||
                    (this.Dob != null &&
                    this.Dob.Equals(input.Dob))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.Firstname == input.Firstname ||
                    (this.Firstname != null &&
                    this.Firstname.Equals(input.Firstname))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Address1 != null)
                    hashCode = hashCode * 59 + this.Address1.GetHashCode();
                if (this.Address2 != null)
                    hashCode = hashCode * 59 + this.Address2.GetHashCode();
                if (this.City != null)
                    hashCode = hashCode * 59 + this.City.GetHashCode();
                if (this.Departmentid != null)
                    hashCode = hashCode * 59 + this.Departmentid.GetHashCode();
                if (this.Dob != null)
                    hashCode = hashCode * 59 + this.Dob.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.Firstname != null)
                    hashCode = hashCode * 59 + this.Firstname.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
