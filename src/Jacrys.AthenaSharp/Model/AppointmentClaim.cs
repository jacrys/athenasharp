/* 
 * athenahealth More Disruption Please (MDP) API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Jacrys.AthenaSharp.Client.SwaggerDateConverter;

namespace Jacrys.AthenaSharp.Model
{
    /// <summary>
    /// AppointmentClaim
    /// </summary>
    [DataContract]
        public partial class AppointmentClaim :  IEquatable<AppointmentClaim>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AppointmentClaim" /> class.
        /// </summary>
        /// <param name="referringproviderid">The referring provider ID for this claim. See /referringproviders. This is not the same as the ID from the /providers call..</param>
        /// <param name="primaryinsurancepayer">primaryinsurancepayer.</param>
        /// <param name="secondaryinsurancepayer">secondaryinsurancepayer.</param>
        /// <param name="diagnoses">message.</param>
        /// <param name="claimcreateddate">The date the claim was created..</param>
        /// <param name="procedures">Procedures is an array of all procedures. /ccda is a better clinical representation. These fields are: .</param>
        /// <param name="billedservicedate">The billed date of service..</param>
        /// <param name="billedproviderid">The provider ID of the billing provider for this claim..</param>
        /// <param name="appointmentid">The appointment ID associated with this claim..</param>
        /// <param name="chargeamount">The total amount billed for all services from this claim..</param>
        /// <param name="transactionid">A unique ID for the primary transaction this claim represents. May be useful for debugging..</param>
        /// <param name="claimid">athenaNet&#x27;s internal ID for this claim, specific to the practice..</param>
        public AppointmentClaim(int? referringproviderid = default(int?), AppointmentInsurancePayer primaryinsurancepayer = default(AppointmentInsurancePayer), AppointmentInsurancePayer secondaryinsurancepayer = default(AppointmentInsurancePayer), List<AppointmentDiagnosis> diagnoses = default(List<AppointmentDiagnosis>), string claimcreateddate = default(string), List<AppointmentProcedure> procedures = default(List<AppointmentProcedure>), string billedservicedate = default(string), int? billedproviderid = default(int?), int? appointmentid = default(int?), string chargeamount = default(string), int? transactionid = default(int?), int? claimid = default(int?))
        {
            this.Referringproviderid = referringproviderid;
            this.Primaryinsurancepayer = primaryinsurancepayer;
            this.Secondaryinsurancepayer = secondaryinsurancepayer;
            this.Diagnoses = diagnoses;
            this.Claimcreateddate = claimcreateddate;
            this.Procedures = procedures;
            this.Billedservicedate = billedservicedate;
            this.Billedproviderid = billedproviderid;
            this.Appointmentid = appointmentid;
            this.Chargeamount = chargeamount;
            this.Transactionid = transactionid;
            this.Claimid = claimid;
        }
        
        /// <summary>
        /// The referring provider ID for this claim. See /referringproviders. This is not the same as the ID from the /providers call.
        /// </summary>
        /// <value>The referring provider ID for this claim. See /referringproviders. This is not the same as the ID from the /providers call.</value>
        [DataMember(Name="referringproviderid", EmitDefaultValue=false)]
        public int? Referringproviderid { get; set; }

        /// <summary>
        /// Gets or Sets Primaryinsurancepayer
        /// </summary>
        [DataMember(Name="primaryinsurancepayer", EmitDefaultValue=false)]
        public AppointmentInsurancePayer Primaryinsurancepayer { get; set; }

        /// <summary>
        /// Gets or Sets Secondaryinsurancepayer
        /// </summary>
        [DataMember(Name="secondaryinsurancepayer", EmitDefaultValue=false)]
        public AppointmentInsurancePayer Secondaryinsurancepayer { get; set; }

        /// <summary>
        /// message
        /// </summary>
        /// <value>message</value>
        [DataMember(Name="diagnoses", EmitDefaultValue=false)]
        public List<AppointmentDiagnosis> Diagnoses { get; set; }

        /// <summary>
        /// The date the claim was created.
        /// </summary>
        /// <value>The date the claim was created.</value>
        [DataMember(Name="claimcreateddate", EmitDefaultValue=false)]
        public string Claimcreateddate { get; set; }

        /// <summary>
        /// Procedures is an array of all procedures. /ccda is a better clinical representation. These fields are: 
        /// </summary>
        /// <value>Procedures is an array of all procedures. /ccda is a better clinical representation. These fields are: </value>
        [DataMember(Name="procedures", EmitDefaultValue=false)]
        public List<AppointmentProcedure> Procedures { get; set; }

        /// <summary>
        /// The billed date of service.
        /// </summary>
        /// <value>The billed date of service.</value>
        [DataMember(Name="billedservicedate", EmitDefaultValue=false)]
        public string Billedservicedate { get; set; }

        /// <summary>
        /// The provider ID of the billing provider for this claim.
        /// </summary>
        /// <value>The provider ID of the billing provider for this claim.</value>
        [DataMember(Name="billedproviderid", EmitDefaultValue=false)]
        public int? Billedproviderid { get; set; }

        /// <summary>
        /// The appointment ID associated with this claim.
        /// </summary>
        /// <value>The appointment ID associated with this claim.</value>
        [DataMember(Name="appointmentid", EmitDefaultValue=false)]
        public int? Appointmentid { get; set; }

        /// <summary>
        /// The total amount billed for all services from this claim.
        /// </summary>
        /// <value>The total amount billed for all services from this claim.</value>
        [DataMember(Name="chargeamount", EmitDefaultValue=false)]
        public string Chargeamount { get; set; }

        /// <summary>
        /// A unique ID for the primary transaction this claim represents. May be useful for debugging.
        /// </summary>
        /// <value>A unique ID for the primary transaction this claim represents. May be useful for debugging.</value>
        [DataMember(Name="transactionid", EmitDefaultValue=false)]
        public int? Transactionid { get; set; }

        /// <summary>
        /// athenaNet&#x27;s internal ID for this claim, specific to the practice.
        /// </summary>
        /// <value>athenaNet&#x27;s internal ID for this claim, specific to the practice.</value>
        [DataMember(Name="claimid", EmitDefaultValue=false)]
        public int? Claimid { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AppointmentClaim {\n");
            sb.Append("  Referringproviderid: ").Append(Referringproviderid).Append("\n");
            sb.Append("  Primaryinsurancepayer: ").Append(Primaryinsurancepayer).Append("\n");
            sb.Append("  Secondaryinsurancepayer: ").Append(Secondaryinsurancepayer).Append("\n");
            sb.Append("  Diagnoses: ").Append(Diagnoses).Append("\n");
            sb.Append("  Claimcreateddate: ").Append(Claimcreateddate).Append("\n");
            sb.Append("  Procedures: ").Append(Procedures).Append("\n");
            sb.Append("  Billedservicedate: ").Append(Billedservicedate).Append("\n");
            sb.Append("  Billedproviderid: ").Append(Billedproviderid).Append("\n");
            sb.Append("  Appointmentid: ").Append(Appointmentid).Append("\n");
            sb.Append("  Chargeamount: ").Append(Chargeamount).Append("\n");
            sb.Append("  Transactionid: ").Append(Transactionid).Append("\n");
            sb.Append("  Claimid: ").Append(Claimid).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AppointmentClaim);
        }

        /// <summary>
        /// Returns true if AppointmentClaim instances are equal
        /// </summary>
        /// <param name="input">Instance of AppointmentClaim to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AppointmentClaim input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Referringproviderid == input.Referringproviderid ||
                    (this.Referringproviderid != null &&
                    this.Referringproviderid.Equals(input.Referringproviderid))
                ) && 
                (
                    this.Primaryinsurancepayer == input.Primaryinsurancepayer ||
                    (this.Primaryinsurancepayer != null &&
                    this.Primaryinsurancepayer.Equals(input.Primaryinsurancepayer))
                ) && 
                (
                    this.Secondaryinsurancepayer == input.Secondaryinsurancepayer ||
                    (this.Secondaryinsurancepayer != null &&
                    this.Secondaryinsurancepayer.Equals(input.Secondaryinsurancepayer))
                ) && 
                (
                    this.Diagnoses == input.Diagnoses ||
                    this.Diagnoses != null &&
                    input.Diagnoses != null &&
                    this.Diagnoses.SequenceEqual(input.Diagnoses)
                ) && 
                (
                    this.Claimcreateddate == input.Claimcreateddate ||
                    (this.Claimcreateddate != null &&
                    this.Claimcreateddate.Equals(input.Claimcreateddate))
                ) && 
                (
                    this.Procedures == input.Procedures ||
                    this.Procedures != null &&
                    input.Procedures != null &&
                    this.Procedures.SequenceEqual(input.Procedures)
                ) && 
                (
                    this.Billedservicedate == input.Billedservicedate ||
                    (this.Billedservicedate != null &&
                    this.Billedservicedate.Equals(input.Billedservicedate))
                ) && 
                (
                    this.Billedproviderid == input.Billedproviderid ||
                    (this.Billedproviderid != null &&
                    this.Billedproviderid.Equals(input.Billedproviderid))
                ) && 
                (
                    this.Appointmentid == input.Appointmentid ||
                    (this.Appointmentid != null &&
                    this.Appointmentid.Equals(input.Appointmentid))
                ) && 
                (
                    this.Chargeamount == input.Chargeamount ||
                    (this.Chargeamount != null &&
                    this.Chargeamount.Equals(input.Chargeamount))
                ) && 
                (
                    this.Transactionid == input.Transactionid ||
                    (this.Transactionid != null &&
                    this.Transactionid.Equals(input.Transactionid))
                ) && 
                (
                    this.Claimid == input.Claimid ||
                    (this.Claimid != null &&
                    this.Claimid.Equals(input.Claimid))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Referringproviderid != null)
                    hashCode = hashCode * 59 + this.Referringproviderid.GetHashCode();
                if (this.Primaryinsurancepayer != null)
                    hashCode = hashCode * 59 + this.Primaryinsurancepayer.GetHashCode();
                if (this.Secondaryinsurancepayer != null)
                    hashCode = hashCode * 59 + this.Secondaryinsurancepayer.GetHashCode();
                if (this.Diagnoses != null)
                    hashCode = hashCode * 59 + this.Diagnoses.GetHashCode();
                if (this.Claimcreateddate != null)
                    hashCode = hashCode * 59 + this.Claimcreateddate.GetHashCode();
                if (this.Procedures != null)
                    hashCode = hashCode * 59 + this.Procedures.GetHashCode();
                if (this.Billedservicedate != null)
                    hashCode = hashCode * 59 + this.Billedservicedate.GetHashCode();
                if (this.Billedproviderid != null)
                    hashCode = hashCode * 59 + this.Billedproviderid.GetHashCode();
                if (this.Appointmentid != null)
                    hashCode = hashCode * 59 + this.Appointmentid.GetHashCode();
                if (this.Chargeamount != null)
                    hashCode = hashCode * 59 + this.Chargeamount.GetHashCode();
                if (this.Transactionid != null)
                    hashCode = hashCode * 59 + this.Transactionid.GetHashCode();
                if (this.Claimid != null)
                    hashCode = hashCode * 59 + this.Claimid.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
