/* 
 * athenahealth More Disruption Please (MDP) API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// SocialHistoryList
    /// </summary>
    [DataContract]
        public partial class SocialHistoryList :  IEquatable<SocialHistoryList>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SocialHistoryList" /> class.
        /// </summary>
        /// <param name="sectionnote">sectionnote.</param>
        /// <param name="templates">templates.</param>
        /// <param name="questions">questions.</param>
        public SocialHistoryList(string sectionnote = default(string), List<Template> templates = default(List<Template>), List<SocialHistoryAnswer> questions = default(List<SocialHistoryAnswer>))
        {
            this.Sectionnote = sectionnote;
            this.Templates = templates;
            this.Questions = questions;
        }
        
        /// <summary>
        /// Gets or Sets Sectionnote
        /// </summary>
        [DataMember(Name="sectionnote", EmitDefaultValue=false)]
        public string Sectionnote { get; set; }

        /// <summary>
        /// Gets or Sets Templates
        /// </summary>
        [DataMember(Name="templates", EmitDefaultValue=false)]
        public List<Template> Templates { get; set; }

        /// <summary>
        /// Gets or Sets Questions
        /// </summary>
        [DataMember(Name="questions", EmitDefaultValue=false)]
        public List<SocialHistoryAnswer> Questions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SocialHistoryList {\n");
            sb.Append("  Sectionnote: ").Append(Sectionnote).Append("\n");
            sb.Append("  Templates: ").Append(Templates).Append("\n");
            sb.Append("  Questions: ").Append(Questions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SocialHistoryList);
        }

        /// <summary>
        /// Returns true if SocialHistoryList instances are equal
        /// </summary>
        /// <param name="input">Instance of SocialHistoryList to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SocialHistoryList input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Sectionnote == input.Sectionnote ||
                    (this.Sectionnote != null &&
                    this.Sectionnote.Equals(input.Sectionnote))
                ) && 
                (
                    this.Templates == input.Templates ||
                    this.Templates != null &&
                    input.Templates != null &&
                    this.Templates.SequenceEqual(input.Templates)
                ) && 
                (
                    this.Questions == input.Questions ||
                    this.Questions != null &&
                    input.Questions != null &&
                    this.Questions.SequenceEqual(input.Questions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Sectionnote != null)
                    hashCode = hashCode * 59 + this.Sectionnote.GetHashCode();
                if (this.Templates != null)
                    hashCode = hashCode * 59 + this.Templates.GetHashCode();
                if (this.Questions != null)
                    hashCode = hashCode * 59 + this.Questions.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
