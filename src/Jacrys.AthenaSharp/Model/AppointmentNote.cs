/* 
 * athenahealth More Disruption Please (MDP) API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// AppointmentNote
    /// </summary>
    [DataContract]
        public partial class AppointmentNote :  IEquatable<AppointmentNote>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AppointmentNote" /> class.
        /// </summary>
        /// <param name="id">The id of the appointment note..</param>
        /// <param name="text">The note associated with the appointment..</param>
        /// <param name="displayonschedule">Whether the note should be displayed on the schedule..</param>
        public AppointmentNote(int? id = default(int?), string text = default(string), bool? displayonschedule = default(bool?))
        {
            this.Id = id;
            this.Text = text;
            this.Displayonschedule = displayonschedule;
        }
        
        /// <summary>
        /// The id of the appointment note.
        /// </summary>
        /// <value>The id of the appointment note.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// The note associated with the appointment.
        /// </summary>
        /// <value>The note associated with the appointment.</value>
        [DataMember(Name="text", EmitDefaultValue=false)]
        public string Text { get; set; }

        /// <summary>
        /// Whether the note should be displayed on the schedule.
        /// </summary>
        /// <value>Whether the note should be displayed on the schedule.</value>
        [DataMember(Name="displayonschedule", EmitDefaultValue=false)]
        public bool? Displayonschedule { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AppointmentNote {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  Displayonschedule: ").Append(Displayonschedule).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AppointmentNote);
        }

        /// <summary>
        /// Returns true if AppointmentNote instances are equal
        /// </summary>
        /// <param name="input">Instance of AppointmentNote to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AppointmentNote input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Text == input.Text ||
                    (this.Text != null &&
                    this.Text.Equals(input.Text))
                ) && 
                (
                    this.Displayonschedule == input.Displayonschedule ||
                    (this.Displayonschedule != null &&
                    this.Displayonschedule.Equals(input.Displayonschedule))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Text != null)
                    hashCode = hashCode * 59 + this.Text.GetHashCode();
                if (this.Displayonschedule != null)
                    hashCode = hashCode * 59 + this.Displayonschedule.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
