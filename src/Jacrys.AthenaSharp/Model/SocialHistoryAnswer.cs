/* 
 * athenahealth More Disruption Please (MDP) API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// SocialHistoryAnswer
    /// </summary>
    [DataContract]
        public partial class SocialHistoryAnswer :  IEquatable<SocialHistoryAnswer>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SocialHistoryAnswer" /> class.
        /// </summary>
        /// <param name="answer">The patient answer to this question.</param>
        /// <param name="questionid">Unique ID for this question within this template..</param>
        /// <param name="key">Unique key for this question, can exist in multiple templates..</param>
        /// <param name="question">Human readable question.</param>
        /// <param name="ordering">Display ordering for this question within this template.</param>
        /// <param name="templateid">The template where this question is listed. If it exists on multiple templates, then only one of them..</param>
        /// <param name="note">The notes associated with this question..</param>
        /// <param name="lastupdated">The date this answer was last updated (or first answered if never updated)..</param>
        /// <param name="notelastupdateddate">The date this note was last updated (or first added if never updated)..</param>
        public SocialHistoryAnswer(string answer = default(string), int? questionid = default(int?), string key = default(string), string question = default(string), int? ordering = default(int?), int? templateid = default(int?), string note = default(string), string lastupdated = default(string), string notelastupdateddate = default(string))
        {
            this.Answer = answer;
            this.Questionid = questionid;
            this.Key = key;
            this.Question = question;
            this.Ordering = ordering;
            this.Templateid = templateid;
            this.Note = note;
            this.Lastupdated = lastupdated;
            this.Notelastupdateddate = notelastupdateddate;
        }
        
        /// <summary>
        /// The patient answer to this question
        /// </summary>
        /// <value>The patient answer to this question</value>
        [DataMember(Name="answer", EmitDefaultValue=false)]
        public string Answer { get; set; }

        /// <summary>
        /// Unique ID for this question within this template.
        /// </summary>
        /// <value>Unique ID for this question within this template.</value>
        [DataMember(Name="questionid", EmitDefaultValue=false)]
        public int? Questionid { get; set; }

        /// <summary>
        /// Unique key for this question, can exist in multiple templates.
        /// </summary>
        /// <value>Unique key for this question, can exist in multiple templates.</value>
        [DataMember(Name="key", EmitDefaultValue=false)]
        public string Key { get; set; }

        /// <summary>
        /// Human readable question
        /// </summary>
        /// <value>Human readable question</value>
        [DataMember(Name="question", EmitDefaultValue=false)]
        public string Question { get; set; }

        /// <summary>
        /// Display ordering for this question within this template
        /// </summary>
        /// <value>Display ordering for this question within this template</value>
        [DataMember(Name="ordering", EmitDefaultValue=false)]
        public int? Ordering { get; set; }

        /// <summary>
        /// The template where this question is listed. If it exists on multiple templates, then only one of them.
        /// </summary>
        /// <value>The template where this question is listed. If it exists on multiple templates, then only one of them.</value>
        [DataMember(Name="templateid", EmitDefaultValue=false)]
        public int? Templateid { get; set; }

        /// <summary>
        /// The notes associated with this question.
        /// </summary>
        /// <value>The notes associated with this question.</value>
        [DataMember(Name="note", EmitDefaultValue=false)]
        public string Note { get; set; }

        /// <summary>
        /// The date this answer was last updated (or first answered if never updated).
        /// </summary>
        /// <value>The date this answer was last updated (or first answered if never updated).</value>
        [DataMember(Name="lastupdated", EmitDefaultValue=false)]
        public string Lastupdated { get; set; }

        /// <summary>
        /// The date this note was last updated (or first added if never updated).
        /// </summary>
        /// <value>The date this note was last updated (or first added if never updated).</value>
        [DataMember(Name="notelastupdateddate", EmitDefaultValue=false)]
        public string Notelastupdateddate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SocialHistoryAnswer {\n");
            sb.Append("  Answer: ").Append(Answer).Append("\n");
            sb.Append("  Questionid: ").Append(Questionid).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  Question: ").Append(Question).Append("\n");
            sb.Append("  Ordering: ").Append(Ordering).Append("\n");
            sb.Append("  Templateid: ").Append(Templateid).Append("\n");
            sb.Append("  Note: ").Append(Note).Append("\n");
            sb.Append("  Lastupdated: ").Append(Lastupdated).Append("\n");
            sb.Append("  Notelastupdateddate: ").Append(Notelastupdateddate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SocialHistoryAnswer);
        }

        /// <summary>
        /// Returns true if SocialHistoryAnswer instances are equal
        /// </summary>
        /// <param name="input">Instance of SocialHistoryAnswer to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SocialHistoryAnswer input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Answer == input.Answer ||
                    (this.Answer != null &&
                    this.Answer.Equals(input.Answer))
                ) && 
                (
                    this.Questionid == input.Questionid ||
                    (this.Questionid != null &&
                    this.Questionid.Equals(input.Questionid))
                ) && 
                (
                    this.Key == input.Key ||
                    (this.Key != null &&
                    this.Key.Equals(input.Key))
                ) && 
                (
                    this.Question == input.Question ||
                    (this.Question != null &&
                    this.Question.Equals(input.Question))
                ) && 
                (
                    this.Ordering == input.Ordering ||
                    (this.Ordering != null &&
                    this.Ordering.Equals(input.Ordering))
                ) && 
                (
                    this.Templateid == input.Templateid ||
                    (this.Templateid != null &&
                    this.Templateid.Equals(input.Templateid))
                ) && 
                (
                    this.Note == input.Note ||
                    (this.Note != null &&
                    this.Note.Equals(input.Note))
                ) && 
                (
                    this.Lastupdated == input.Lastupdated ||
                    (this.Lastupdated != null &&
                    this.Lastupdated.Equals(input.Lastupdated))
                ) && 
                (
                    this.Notelastupdateddate == input.Notelastupdateddate ||
                    (this.Notelastupdateddate != null &&
                    this.Notelastupdateddate.Equals(input.Notelastupdateddate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Answer != null)
                    hashCode = hashCode * 59 + this.Answer.GetHashCode();
                if (this.Questionid != null)
                    hashCode = hashCode * 59 + this.Questionid.GetHashCode();
                if (this.Key != null)
                    hashCode = hashCode * 59 + this.Key.GetHashCode();
                if (this.Question != null)
                    hashCode = hashCode * 59 + this.Question.GetHashCode();
                if (this.Ordering != null)
                    hashCode = hashCode * 59 + this.Ordering.GetHashCode();
                if (this.Templateid != null)
                    hashCode = hashCode * 59 + this.Templateid.GetHashCode();
                if (this.Note != null)
                    hashCode = hashCode * 59 + this.Note.GetHashCode();
                if (this.Lastupdated != null)
                    hashCode = hashCode * 59 + this.Lastupdated.GetHashCode();
                if (this.Notelastupdateddate != null)
                    hashCode = hashCode * 59 + this.Notelastupdateddate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
