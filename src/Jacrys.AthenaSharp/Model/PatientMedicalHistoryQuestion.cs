/* 
 * athenahealth More Disruption Please (MDP) API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Jacrys.AthenaSharp.Client.SwaggerDateConverter;

namespace Jacrys.AthenaSharp.Model
{
    /// <summary>
    /// PatientMedicalHistoryQuestion
    /// </summary>
    [DataContract]
        public partial class PatientMedicalHistoryQuestion :  IEquatable<PatientMedicalHistoryQuestion>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PatientMedicalHistoryQuestion" /> class.
        /// </summary>
        /// <param name="questionid">Athena ID for the question (required).</param>
        /// <param name="question">Disease being inquired about.</param>
        /// <param name="answer">The answer given by the patient to the question.</param>
        /// <param name="note">Any special notes.</param>
        /// <param name="diagnosiscode">Diagnosis code.</param>
        /// <param name="codeset">Codeset the diagnosis code belongs to.</param>
        /// <param name="description">Description of the code.</param>
        public PatientMedicalHistoryQuestion(int? questionid = default(int?), string question = default(string), string answer = default(string), string note = default(string), string diagnosiscode = default(string), string codeset = default(string), string description = default(string))
        {
            // to ensure "questionid" is required (not null)
            if (questionid == null)
            {
                throw new InvalidDataException("questionid is a required property for PatientMedicalHistoryQuestion and cannot be null");
            }
            else
            {
                this.Questionid = questionid;
            }
            this.Question = question;
            this.Answer = answer;
            this.Note = note;
            this.Diagnosiscode = diagnosiscode;
            this.Codeset = codeset;
            this.Description = description;
        }
        
        /// <summary>
        /// Athena ID for the question
        /// </summary>
        /// <value>Athena ID for the question</value>
        [DataMember(Name="questionid", EmitDefaultValue=false)]
        public int? Questionid { get; set; }

        /// <summary>
        /// Disease being inquired about
        /// </summary>
        /// <value>Disease being inquired about</value>
        [DataMember(Name="question", EmitDefaultValue=false)]
        public string Question { get; set; }

        /// <summary>
        /// The answer given by the patient to the question
        /// </summary>
        /// <value>The answer given by the patient to the question</value>
        [DataMember(Name="answer", EmitDefaultValue=false)]
        public string Answer { get; set; }

        /// <summary>
        /// Any special notes
        /// </summary>
        /// <value>Any special notes</value>
        [DataMember(Name="note", EmitDefaultValue=false)]
        public string Note { get; set; }

        /// <summary>
        /// Diagnosis code
        /// </summary>
        /// <value>Diagnosis code</value>
        [DataMember(Name="diagnosiscode", EmitDefaultValue=false)]
        public string Diagnosiscode { get; set; }

        /// <summary>
        /// Codeset the diagnosis code belongs to
        /// </summary>
        /// <value>Codeset the diagnosis code belongs to</value>
        [DataMember(Name="codeset", EmitDefaultValue=false)]
        public string Codeset { get; set; }

        /// <summary>
        /// Description of the code
        /// </summary>
        /// <value>Description of the code</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PatientMedicalHistoryQuestion {\n");
            sb.Append("  Questionid: ").Append(Questionid).Append("\n");
            sb.Append("  Question: ").Append(Question).Append("\n");
            sb.Append("  Answer: ").Append(Answer).Append("\n");
            sb.Append("  Note: ").Append(Note).Append("\n");
            sb.Append("  Diagnosiscode: ").Append(Diagnosiscode).Append("\n");
            sb.Append("  Codeset: ").Append(Codeset).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PatientMedicalHistoryQuestion);
        }

        /// <summary>
        /// Returns true if PatientMedicalHistoryQuestion instances are equal
        /// </summary>
        /// <param name="input">Instance of PatientMedicalHistoryQuestion to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PatientMedicalHistoryQuestion input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Questionid == input.Questionid ||
                    (this.Questionid != null &&
                    this.Questionid.Equals(input.Questionid))
                ) && 
                (
                    this.Question == input.Question ||
                    (this.Question != null &&
                    this.Question.Equals(input.Question))
                ) && 
                (
                    this.Answer == input.Answer ||
                    (this.Answer != null &&
                    this.Answer.Equals(input.Answer))
                ) && 
                (
                    this.Note == input.Note ||
                    (this.Note != null &&
                    this.Note.Equals(input.Note))
                ) && 
                (
                    this.Diagnosiscode == input.Diagnosiscode ||
                    (this.Diagnosiscode != null &&
                    this.Diagnosiscode.Equals(input.Diagnosiscode))
                ) && 
                (
                    this.Codeset == input.Codeset ||
                    (this.Codeset != null &&
                    this.Codeset.Equals(input.Codeset))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Questionid != null)
                    hashCode = hashCode * 59 + this.Questionid.GetHashCode();
                if (this.Question != null)
                    hashCode = hashCode * 59 + this.Question.GetHashCode();
                if (this.Answer != null)
                    hashCode = hashCode * 59 + this.Answer.GetHashCode();
                if (this.Note != null)
                    hashCode = hashCode * 59 + this.Note.GetHashCode();
                if (this.Diagnosiscode != null)
                    hashCode = hashCode * 59 + this.Diagnosiscode.GetHashCode();
                if (this.Codeset != null)
                    hashCode = hashCode * 59 + this.Codeset.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
