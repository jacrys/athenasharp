/* 
 * athenahealth More Disruption Please (MDP) API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Jacrys.AthenaSharp.Client.SwaggerDateConverter;

namespace Jacrys.AthenaSharp.Model
{
    /// <summary>
    /// AppointmentInsurancePayer
    /// </summary>
    [DataContract]
        public partial class AppointmentInsurancePayer :  IEquatable<AppointmentInsurancePayer>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AppointmentInsurancePayer" /> class.
        /// </summary>
        /// <param name="primarypatientinsuranceid">Id of the payer.</param>
        /// <param name="secondarypatientinsuranceid">Id of the payer.</param>
        /// <param name="note">The note that is attached to this status..</param>
        /// <param name="status">The status associated with this responsible payer..</param>
        public AppointmentInsurancePayer(string primarypatientinsuranceid = default(string), string secondarypatientinsuranceid = default(string), string note = default(string), string status = default(string))
        {
            this.Primarypatientinsuranceid = primarypatientinsuranceid;
            this.Secondarypatientinsuranceid = secondarypatientinsuranceid;
            this.Note = note;
            this.Status = status;
        }
        
        /// <summary>
        /// Id of the payer
        /// </summary>
        /// <value>Id of the payer</value>
        [DataMember(Name="primarypatientinsuranceid", EmitDefaultValue=false)]
        public string Primarypatientinsuranceid { get; set; }

        /// <summary>
        /// Id of the payer
        /// </summary>
        /// <value>Id of the payer</value>
        [DataMember(Name="secondarypatientinsuranceid", EmitDefaultValue=false)]
        public string Secondarypatientinsuranceid { get; set; }

        /// <summary>
        /// The note that is attached to this status.
        /// </summary>
        /// <value>The note that is attached to this status.</value>
        [DataMember(Name="note", EmitDefaultValue=false)]
        public string Note { get; set; }

        /// <summary>
        /// The status associated with this responsible payer.
        /// </summary>
        /// <value>The status associated with this responsible payer.</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AppointmentInsurancePayer {\n");
            sb.Append("  Primarypatientinsuranceid: ").Append(Primarypatientinsuranceid).Append("\n");
            sb.Append("  Secondarypatientinsuranceid: ").Append(Secondarypatientinsuranceid).Append("\n");
            sb.Append("  Note: ").Append(Note).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AppointmentInsurancePayer);
        }

        /// <summary>
        /// Returns true if AppointmentInsurancePayer instances are equal
        /// </summary>
        /// <param name="input">Instance of AppointmentInsurancePayer to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AppointmentInsurancePayer input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Primarypatientinsuranceid == input.Primarypatientinsuranceid ||
                    (this.Primarypatientinsuranceid != null &&
                    this.Primarypatientinsuranceid.Equals(input.Primarypatientinsuranceid))
                ) && 
                (
                    this.Secondarypatientinsuranceid == input.Secondarypatientinsuranceid ||
                    (this.Secondarypatientinsuranceid != null &&
                    this.Secondarypatientinsuranceid.Equals(input.Secondarypatientinsuranceid))
                ) && 
                (
                    this.Note == input.Note ||
                    (this.Note != null &&
                    this.Note.Equals(input.Note))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Primarypatientinsuranceid != null)
                    hashCode = hashCode * 59 + this.Primarypatientinsuranceid.GetHashCode();
                if (this.Secondarypatientinsuranceid != null)
                    hashCode = hashCode * 59 + this.Secondarypatientinsuranceid.GetHashCode();
                if (this.Note != null)
                    hashCode = hashCode * 59 + this.Note.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
