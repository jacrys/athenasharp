/* 
 * athenahealth More Disruption Please (MDP) API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Jacrys.AthenaSharp.Client.SwaggerDateConverter;

namespace Jacrys.AthenaSharp.Model
{
    /// <summary>
    /// PatientEncounterOrder
    /// </summary>
    [DataContract]
        public partial class PatientEncounterOrder :  IEquatable<PatientEncounterOrder>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PatientEncounterOrder" /> class.
        /// </summary>
        /// <param name="declinedreason">List of codes indicating why the order was not given. If this field is not present, the order was not declined. If the array is empty, no reason has been chosen. .</param>
        /// <param name="contraindicationreason">List of codes indicating why the order was contraindicated (for vaccines only). If this field is not present, the order does not contain a contraindication reason. .</param>
        /// <param name="externalcodes">When available, contains how this order maps to external vocabularies like LOINC, CVX, SNOMED, RXNORM, etc. .</param>
        /// <param name="createduser">The username of the person who created the order..</param>
        /// <param name="lastmodifiedby">The username of the person who last modified the order..</param>
        /// <param name="lastmodifieddatetime">The date this order was last modified..</param>
        /// <param name="orderid">The order (aka document) ID for this order..</param>
        /// <param name="declinedreasontext">The user-facing description of the reason the order was not given..</param>
        /// <param name="description">A human readable description for this order.</param>
        /// <param name="_class">The primary class of this order - - PRESCRIPTION, VACCINE, LAB, IMAGING, PATIENTINFO, etc. .</param>
        /// <param name="classdescription">The human-readable description of this document class, including sub class (prescription - new vs. prescription - renewal). .</param>
        /// <param name="ordertypeid">The athena ID for this type of order. Can be used to create another order of this type..</param>
        /// <param name="ordertype">The type of this order (Lab, Vaccine, etc.).</param>
        /// <param name="dateordered">The timestamp when the order was created..</param>
        /// <param name="orderingprovider">The username of the ordering provider, which is different than the ordering user - - who may be an intake nurse for example. .</param>
        /// <param name="assigneduser">The username of the user who this order task is currently assigned to for further processing as needed..</param>
        /// <param name="priority">Priority of a order..</param>
        /// <param name="status">The status the document is in (PEND, CLOSED, SUBMIT, SUBMITTED, etc). .</param>
        /// <param name="documentationonly">If true, this order is here just as a record, and does not need to actually go out..</param>
        /// <param name="quantityvalue">The dosage quantity value..</param>
        /// <param name="refills">The number of refills allowed..</param>
        /// <param name="futuresubmitdate">The date this order will be submitted..</param>
        /// <param name="ndc">The National Drug Code for the order.</param>
        public PatientEncounterOrder(List<Code> declinedreason = default(List<Code>), List<Code> contraindicationreason = default(List<Code>), List<Code> externalcodes = default(List<Code>), string createduser = default(string), string lastmodifiedby = default(string), string lastmodifieddatetime = default(string), int? orderid = default(int?), string declinedreasontext = default(string), string description = default(string), string _class = default(string), string classdescription = default(string), int? ordertypeid = default(int?), string ordertype = default(string), string dateordered = default(string), string orderingprovider = default(string), string assigneduser = default(string), int? priority = default(int?), string status = default(string), bool? documentationonly = default(bool?), string quantityvalue = default(string), string refills = default(string), string futuresubmitdate = default(string), string ndc = default(string))
        {
            this.Declinedreason = declinedreason;
            this.Contraindicationreason = contraindicationreason;
            this.Externalcodes = externalcodes;
            this.Createduser = createduser;
            this.Lastmodifiedby = lastmodifiedby;
            this.Lastmodifieddatetime = lastmodifieddatetime;
            this.Orderid = orderid;
            this.Declinedreasontext = declinedreasontext;
            this.Description = description;
            this._Class = _class;
            this.Classdescription = classdescription;
            this.Ordertypeid = ordertypeid;
            this.Ordertype = ordertype;
            this.Dateordered = dateordered;
            this.Orderingprovider = orderingprovider;
            this.Assigneduser = assigneduser;
            this.Priority = priority;
            this.Status = status;
            this.Documentationonly = documentationonly;
            this.Quantityvalue = quantityvalue;
            this.Refills = refills;
            this.Futuresubmitdate = futuresubmitdate;
            this.Ndc = ndc;
        }
        
        /// <summary>
        /// List of codes indicating why the order was not given. If this field is not present, the order was not declined. If the array is empty, no reason has been chosen. 
        /// </summary>
        /// <value>List of codes indicating why the order was not given. If this field is not present, the order was not declined. If the array is empty, no reason has been chosen. </value>
        [DataMember(Name="declinedreason", EmitDefaultValue=false)]
        public List<Code> Declinedreason { get; set; }

        /// <summary>
        /// List of codes indicating why the order was contraindicated (for vaccines only). If this field is not present, the order does not contain a contraindication reason. 
        /// </summary>
        /// <value>List of codes indicating why the order was contraindicated (for vaccines only). If this field is not present, the order does not contain a contraindication reason. </value>
        [DataMember(Name="contraindicationreason", EmitDefaultValue=false)]
        public List<Code> Contraindicationreason { get; set; }

        /// <summary>
        /// When available, contains how this order maps to external vocabularies like LOINC, CVX, SNOMED, RXNORM, etc. 
        /// </summary>
        /// <value>When available, contains how this order maps to external vocabularies like LOINC, CVX, SNOMED, RXNORM, etc. </value>
        [DataMember(Name="externalcodes", EmitDefaultValue=false)]
        public List<Code> Externalcodes { get; set; }

        /// <summary>
        /// The username of the person who created the order.
        /// </summary>
        /// <value>The username of the person who created the order.</value>
        [DataMember(Name="createduser", EmitDefaultValue=false)]
        public string Createduser { get; set; }

        /// <summary>
        /// The username of the person who last modified the order.
        /// </summary>
        /// <value>The username of the person who last modified the order.</value>
        [DataMember(Name="lastmodifiedby", EmitDefaultValue=false)]
        public string Lastmodifiedby { get; set; }

        /// <summary>
        /// The date this order was last modified.
        /// </summary>
        /// <value>The date this order was last modified.</value>
        [DataMember(Name="lastmodifieddatetime", EmitDefaultValue=false)]
        public string Lastmodifieddatetime { get; set; }

        /// <summary>
        /// The order (aka document) ID for this order.
        /// </summary>
        /// <value>The order (aka document) ID for this order.</value>
        [DataMember(Name="orderid", EmitDefaultValue=false)]
        public int? Orderid { get; set; }

        /// <summary>
        /// The user-facing description of the reason the order was not given.
        /// </summary>
        /// <value>The user-facing description of the reason the order was not given.</value>
        [DataMember(Name="declinedreasontext", EmitDefaultValue=false)]
        public string Declinedreasontext { get; set; }

        /// <summary>
        /// A human readable description for this order
        /// </summary>
        /// <value>A human readable description for this order</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// The primary class of this order - - PRESCRIPTION, VACCINE, LAB, IMAGING, PATIENTINFO, etc. 
        /// </summary>
        /// <value>The primary class of this order - - PRESCRIPTION, VACCINE, LAB, IMAGING, PATIENTINFO, etc. </value>
        [DataMember(Name="class", EmitDefaultValue=false)]
        public string _Class { get; set; }

        /// <summary>
        /// The human-readable description of this document class, including sub class (prescription - new vs. prescription - renewal). 
        /// </summary>
        /// <value>The human-readable description of this document class, including sub class (prescription - new vs. prescription - renewal). </value>
        [DataMember(Name="classdescription", EmitDefaultValue=false)]
        public string Classdescription { get; set; }

        /// <summary>
        /// The athena ID for this type of order. Can be used to create another order of this type.
        /// </summary>
        /// <value>The athena ID for this type of order. Can be used to create another order of this type.</value>
        [DataMember(Name="ordertypeid", EmitDefaultValue=false)]
        public int? Ordertypeid { get; set; }

        /// <summary>
        /// The type of this order (Lab, Vaccine, etc.)
        /// </summary>
        /// <value>The type of this order (Lab, Vaccine, etc.)</value>
        [DataMember(Name="ordertype", EmitDefaultValue=false)]
        public string Ordertype { get; set; }

        /// <summary>
        /// The timestamp when the order was created.
        /// </summary>
        /// <value>The timestamp when the order was created.</value>
        [DataMember(Name="dateordered", EmitDefaultValue=false)]
        public string Dateordered { get; set; }

        /// <summary>
        /// The username of the ordering provider, which is different than the ordering user - - who may be an intake nurse for example. 
        /// </summary>
        /// <value>The username of the ordering provider, which is different than the ordering user - - who may be an intake nurse for example. </value>
        [DataMember(Name="orderingprovider", EmitDefaultValue=false)]
        public string Orderingprovider { get; set; }

        /// <summary>
        /// The username of the user who this order task is currently assigned to for further processing as needed.
        /// </summary>
        /// <value>The username of the user who this order task is currently assigned to for further processing as needed.</value>
        [DataMember(Name="assigneduser", EmitDefaultValue=false)]
        public string Assigneduser { get; set; }

        /// <summary>
        /// Priority of a order.
        /// </summary>
        /// <value>Priority of a order.</value>
        [DataMember(Name="priority", EmitDefaultValue=false)]
        public int? Priority { get; set; }

        /// <summary>
        /// The status the document is in (PEND, CLOSED, SUBMIT, SUBMITTED, etc). 
        /// </summary>
        /// <value>The status the document is in (PEND, CLOSED, SUBMIT, SUBMITTED, etc). </value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// If true, this order is here just as a record, and does not need to actually go out.
        /// </summary>
        /// <value>If true, this order is here just as a record, and does not need to actually go out.</value>
        [DataMember(Name="documentationonly", EmitDefaultValue=false)]
        public bool? Documentationonly { get; set; }

        /// <summary>
        /// The dosage quantity value.
        /// </summary>
        /// <value>The dosage quantity value.</value>
        [DataMember(Name="quantityvalue", EmitDefaultValue=false)]
        public string Quantityvalue { get; set; }

        /// <summary>
        /// The number of refills allowed.
        /// </summary>
        /// <value>The number of refills allowed.</value>
        [DataMember(Name="refills", EmitDefaultValue=false)]
        public string Refills { get; set; }

        /// <summary>
        /// The date this order will be submitted.
        /// </summary>
        /// <value>The date this order will be submitted.</value>
        [DataMember(Name="futuresubmitdate", EmitDefaultValue=false)]
        public string Futuresubmitdate { get; set; }

        /// <summary>
        /// The National Drug Code for the order
        /// </summary>
        /// <value>The National Drug Code for the order</value>
        [DataMember(Name="ndc", EmitDefaultValue=false)]
        public string Ndc { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PatientEncounterOrder {\n");
            sb.Append("  Declinedreason: ").Append(Declinedreason).Append("\n");
            sb.Append("  Contraindicationreason: ").Append(Contraindicationreason).Append("\n");
            sb.Append("  Externalcodes: ").Append(Externalcodes).Append("\n");
            sb.Append("  Createduser: ").Append(Createduser).Append("\n");
            sb.Append("  Lastmodifiedby: ").Append(Lastmodifiedby).Append("\n");
            sb.Append("  Lastmodifieddatetime: ").Append(Lastmodifieddatetime).Append("\n");
            sb.Append("  Orderid: ").Append(Orderid).Append("\n");
            sb.Append("  Declinedreasontext: ").Append(Declinedreasontext).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  _Class: ").Append(_Class).Append("\n");
            sb.Append("  Classdescription: ").Append(Classdescription).Append("\n");
            sb.Append("  Ordertypeid: ").Append(Ordertypeid).Append("\n");
            sb.Append("  Ordertype: ").Append(Ordertype).Append("\n");
            sb.Append("  Dateordered: ").Append(Dateordered).Append("\n");
            sb.Append("  Orderingprovider: ").Append(Orderingprovider).Append("\n");
            sb.Append("  Assigneduser: ").Append(Assigneduser).Append("\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Documentationonly: ").Append(Documentationonly).Append("\n");
            sb.Append("  Quantityvalue: ").Append(Quantityvalue).Append("\n");
            sb.Append("  Refills: ").Append(Refills).Append("\n");
            sb.Append("  Futuresubmitdate: ").Append(Futuresubmitdate).Append("\n");
            sb.Append("  Ndc: ").Append(Ndc).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PatientEncounterOrder);
        }

        /// <summary>
        /// Returns true if PatientEncounterOrder instances are equal
        /// </summary>
        /// <param name="input">Instance of PatientEncounterOrder to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PatientEncounterOrder input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Declinedreason == input.Declinedreason ||
                    this.Declinedreason != null &&
                    input.Declinedreason != null &&
                    this.Declinedreason.SequenceEqual(input.Declinedreason)
                ) && 
                (
                    this.Contraindicationreason == input.Contraindicationreason ||
                    this.Contraindicationreason != null &&
                    input.Contraindicationreason != null &&
                    this.Contraindicationreason.SequenceEqual(input.Contraindicationreason)
                ) && 
                (
                    this.Externalcodes == input.Externalcodes ||
                    this.Externalcodes != null &&
                    input.Externalcodes != null &&
                    this.Externalcodes.SequenceEqual(input.Externalcodes)
                ) && 
                (
                    this.Createduser == input.Createduser ||
                    (this.Createduser != null &&
                    this.Createduser.Equals(input.Createduser))
                ) && 
                (
                    this.Lastmodifiedby == input.Lastmodifiedby ||
                    (this.Lastmodifiedby != null &&
                    this.Lastmodifiedby.Equals(input.Lastmodifiedby))
                ) && 
                (
                    this.Lastmodifieddatetime == input.Lastmodifieddatetime ||
                    (this.Lastmodifieddatetime != null &&
                    this.Lastmodifieddatetime.Equals(input.Lastmodifieddatetime))
                ) && 
                (
                    this.Orderid == input.Orderid ||
                    (this.Orderid != null &&
                    this.Orderid.Equals(input.Orderid))
                ) && 
                (
                    this.Declinedreasontext == input.Declinedreasontext ||
                    (this.Declinedreasontext != null &&
                    this.Declinedreasontext.Equals(input.Declinedreasontext))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this._Class == input._Class ||
                    (this._Class != null &&
                    this._Class.Equals(input._Class))
                ) && 
                (
                    this.Classdescription == input.Classdescription ||
                    (this.Classdescription != null &&
                    this.Classdescription.Equals(input.Classdescription))
                ) && 
                (
                    this.Ordertypeid == input.Ordertypeid ||
                    (this.Ordertypeid != null &&
                    this.Ordertypeid.Equals(input.Ordertypeid))
                ) && 
                (
                    this.Ordertype == input.Ordertype ||
                    (this.Ordertype != null &&
                    this.Ordertype.Equals(input.Ordertype))
                ) && 
                (
                    this.Dateordered == input.Dateordered ||
                    (this.Dateordered != null &&
                    this.Dateordered.Equals(input.Dateordered))
                ) && 
                (
                    this.Orderingprovider == input.Orderingprovider ||
                    (this.Orderingprovider != null &&
                    this.Orderingprovider.Equals(input.Orderingprovider))
                ) && 
                (
                    this.Assigneduser == input.Assigneduser ||
                    (this.Assigneduser != null &&
                    this.Assigneduser.Equals(input.Assigneduser))
                ) && 
                (
                    this.Priority == input.Priority ||
                    (this.Priority != null &&
                    this.Priority.Equals(input.Priority))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Documentationonly == input.Documentationonly ||
                    (this.Documentationonly != null &&
                    this.Documentationonly.Equals(input.Documentationonly))
                ) && 
                (
                    this.Quantityvalue == input.Quantityvalue ||
                    (this.Quantityvalue != null &&
                    this.Quantityvalue.Equals(input.Quantityvalue))
                ) && 
                (
                    this.Refills == input.Refills ||
                    (this.Refills != null &&
                    this.Refills.Equals(input.Refills))
                ) && 
                (
                    this.Futuresubmitdate == input.Futuresubmitdate ||
                    (this.Futuresubmitdate != null &&
                    this.Futuresubmitdate.Equals(input.Futuresubmitdate))
                ) && 
                (
                    this.Ndc == input.Ndc ||
                    (this.Ndc != null &&
                    this.Ndc.Equals(input.Ndc))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Declinedreason != null)
                    hashCode = hashCode * 59 + this.Declinedreason.GetHashCode();
                if (this.Contraindicationreason != null)
                    hashCode = hashCode * 59 + this.Contraindicationreason.GetHashCode();
                if (this.Externalcodes != null)
                    hashCode = hashCode * 59 + this.Externalcodes.GetHashCode();
                if (this.Createduser != null)
                    hashCode = hashCode * 59 + this.Createduser.GetHashCode();
                if (this.Lastmodifiedby != null)
                    hashCode = hashCode * 59 + this.Lastmodifiedby.GetHashCode();
                if (this.Lastmodifieddatetime != null)
                    hashCode = hashCode * 59 + this.Lastmodifieddatetime.GetHashCode();
                if (this.Orderid != null)
                    hashCode = hashCode * 59 + this.Orderid.GetHashCode();
                if (this.Declinedreasontext != null)
                    hashCode = hashCode * 59 + this.Declinedreasontext.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this._Class != null)
                    hashCode = hashCode * 59 + this._Class.GetHashCode();
                if (this.Classdescription != null)
                    hashCode = hashCode * 59 + this.Classdescription.GetHashCode();
                if (this.Ordertypeid != null)
                    hashCode = hashCode * 59 + this.Ordertypeid.GetHashCode();
                if (this.Ordertype != null)
                    hashCode = hashCode * 59 + this.Ordertype.GetHashCode();
                if (this.Dateordered != null)
                    hashCode = hashCode * 59 + this.Dateordered.GetHashCode();
                if (this.Orderingprovider != null)
                    hashCode = hashCode * 59 + this.Orderingprovider.GetHashCode();
                if (this.Assigneduser != null)
                    hashCode = hashCode * 59 + this.Assigneduser.GetHashCode();
                if (this.Priority != null)
                    hashCode = hashCode * 59 + this.Priority.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Documentationonly != null)
                    hashCode = hashCode * 59 + this.Documentationonly.GetHashCode();
                if (this.Quantityvalue != null)
                    hashCode = hashCode * 59 + this.Quantityvalue.GetHashCode();
                if (this.Refills != null)
                    hashCode = hashCode * 59 + this.Refills.GetHashCode();
                if (this.Futuresubmitdate != null)
                    hashCode = hashCode * 59 + this.Futuresubmitdate.GetHashCode();
                if (this.Ndc != null)
                    hashCode = hashCode * 59 + this.Ndc.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
