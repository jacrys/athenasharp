/* 
 * athenahealth More Disruption Please (MDP) API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Jacrys.AthenaSharp.Client.SwaggerDateConverter;

namespace Jacrys.AthenaSharp.Model
{
    /// <summary>
    /// Body7
    /// </summary>
    [DataContract]
        public partial class Body7 :  IEquatable<Body7>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Body7" /> class.
        /// </summary>
        /// <param name="status">Whether the problem is chronic or acute..</param>
        /// <param name="startdate">The onset date to be updated for this problem in MM/DD/YYYY format..</param>
        /// <param name="snomedcode">The SNOMED code of the problem you are adding..</param>
        /// <param name="departmentid">Primary (registration) department ID..</param>
        /// <param name="note">The note to be attached to this problem..</param>
        /// <param name="laterality">Update the laterality of this problem. Can be null, LEFT, RIGHT, or BILATERAL..</param>
        public Body7(string status = default(string), string startdate = default(string), int? snomedcode = default(int?), int? departmentid = default(int?), string note = default(string), string laterality = default(string))
        {
            this.Status = status;
            this.Startdate = startdate;
            this.Snomedcode = snomedcode;
            this.Departmentid = departmentid;
            this.Note = note;
            this.Laterality = laterality;
        }
        
        /// <summary>
        /// Whether the problem is chronic or acute.
        /// </summary>
        /// <value>Whether the problem is chronic or acute.</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// The onset date to be updated for this problem in MM/DD/YYYY format.
        /// </summary>
        /// <value>The onset date to be updated for this problem in MM/DD/YYYY format.</value>
        [DataMember(Name="startdate", EmitDefaultValue=false)]
        public string Startdate { get; set; }

        /// <summary>
        /// The SNOMED code of the problem you are adding.
        /// </summary>
        /// <value>The SNOMED code of the problem you are adding.</value>
        [DataMember(Name="snomedcode", EmitDefaultValue=false)]
        public int? Snomedcode { get; set; }

        /// <summary>
        /// Primary (registration) department ID.
        /// </summary>
        /// <value>Primary (registration) department ID.</value>
        [DataMember(Name="departmentid", EmitDefaultValue=false)]
        public int? Departmentid { get; set; }

        /// <summary>
        /// The note to be attached to this problem.
        /// </summary>
        /// <value>The note to be attached to this problem.</value>
        [DataMember(Name="note", EmitDefaultValue=false)]
        public string Note { get; set; }

        /// <summary>
        /// Update the laterality of this problem. Can be null, LEFT, RIGHT, or BILATERAL.
        /// </summary>
        /// <value>Update the laterality of this problem. Can be null, LEFT, RIGHT, or BILATERAL.</value>
        [DataMember(Name="laterality", EmitDefaultValue=false)]
        public string Laterality { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Body7 {\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Startdate: ").Append(Startdate).Append("\n");
            sb.Append("  Snomedcode: ").Append(Snomedcode).Append("\n");
            sb.Append("  Departmentid: ").Append(Departmentid).Append("\n");
            sb.Append("  Note: ").Append(Note).Append("\n");
            sb.Append("  Laterality: ").Append(Laterality).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Body7);
        }

        /// <summary>
        /// Returns true if Body7 instances are equal
        /// </summary>
        /// <param name="input">Instance of Body7 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Body7 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Startdate == input.Startdate ||
                    (this.Startdate != null &&
                    this.Startdate.Equals(input.Startdate))
                ) && 
                (
                    this.Snomedcode == input.Snomedcode ||
                    (this.Snomedcode != null &&
                    this.Snomedcode.Equals(input.Snomedcode))
                ) && 
                (
                    this.Departmentid == input.Departmentid ||
                    (this.Departmentid != null &&
                    this.Departmentid.Equals(input.Departmentid))
                ) && 
                (
                    this.Note == input.Note ||
                    (this.Note != null &&
                    this.Note.Equals(input.Note))
                ) && 
                (
                    this.Laterality == input.Laterality ||
                    (this.Laterality != null &&
                    this.Laterality.Equals(input.Laterality))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Startdate != null)
                    hashCode = hashCode * 59 + this.Startdate.GetHashCode();
                if (this.Snomedcode != null)
                    hashCode = hashCode * 59 + this.Snomedcode.GetHashCode();
                if (this.Departmentid != null)
                    hashCode = hashCode * 59 + this.Departmentid.GetHashCode();
                if (this.Note != null)
                    hashCode = hashCode * 59 + this.Note.GetHashCode();
                if (this.Laterality != null)
                    hashCode = hashCode * 59 + this.Laterality.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
