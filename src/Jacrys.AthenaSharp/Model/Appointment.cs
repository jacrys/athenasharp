/* 
 * athenahealth More Disruption Please (MDP) API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Appointment
    /// </summary>
    [DataContract]
        public partial class Appointment :  IEquatable<Appointment>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Appointment" /> class.
        /// </summary>
        /// <param name="reasonid">A list of reason IDs that could be used for this slot. Only present if multiple reason IDs are requested..</param>
        /// <param name="appointmentnotes">message.</param>
        /// <param name="appointmentstatus">The athenaNet appointment status. There are several possible statuses. x&#x3D;cancelled. f&#x3D;future. (It can include appointments where were never checked in, even if the appointment date is in the past. It is up to a practice to cancel appointments as a no show when appropriate to do so.) o&#x3D;open. 2&#x3D;checked in. 3&#x3D;checked out. 4&#x3D;charge entered (i.e. a past appointment). .</param>
        /// <param name="cancelleddatetime">The time (mm/dd/yyyy hh24:mi:ss; Eastern time) that this appointment was cancelled (if cancelled).</param>
        /// <param name="chargeentrynotrequired">This field will tell if an appointment has been marked as not requiring change entry..</param>
        /// <param name="hl7providerid">This is the raw provider ID that should be used ONLY if using this appointment in conjunction with an HL7 message and with athenahealth&#x27;s prior guidance. It is only available in some situations..</param>
        /// <param name="cancelreasonname">If the appointment was cancelled, the name (local to the practice) for the cancel reason. .</param>
        /// <param name="chargeentrynotrequiredreason">This field will give the reason that an appointment has been marked as not requiring charge entry..</param>
        /// <param name="lastmodified">The date/time when the appointment was last modified. Note: It may be possible for the lastmodified field to be updated without any other field in the API call being changed. This occurs when appointment fields not included in the API output are updated. .</param>
        /// <param name="departmentid">Id of the department.</param>
        /// <param name="checkoutdatetime">The time (mm/dd/yyyy hh24:mi:ss) that the appointment was checked out..</param>
        /// <param name="copay">Expected copay for this appointment. Based on the appointment type, the patient&#x27;s primary insurance, and any copays collected. To see the amounts used in this calculated value, see the APPOINTMENTCOPAY fields. .</param>
        /// <param name="encounterid">The encounter id associated with this appointment, useful for certain other calls. Only present for appointments with Clinicals that have been checked in. .</param>
        /// <param name="scheduledby">The username who scheduled the appointment..</param>
        /// <param name="checkindatetime">The time (mm/dd/yyyy hh24:mi:ss) that the appointment was checked in..</param>
        /// <param name="cancelledby">If the appointment has been cancelled, the username who cancelled the appointment. .</param>
        /// <param name="stopintakedatetime">The time (mm/dd/yyyy hh24:mi:ss) that the intake process was completed..</param>
        /// <param name="encounterstatus">The status of this patient in the encounter (READYFORSTAFF, WITHSTAFF, READFORPROVIDER, CHECKEDOUT). Only present for appointments with Clinicals that have been checked in. .</param>
        /// <param name="frozenyn">If true, this appointment slot is frozen .</param>
        /// <param name="appointmenttype">The practice-friendly (not patient friendly) name for this appointment type. Note that this may not be the same as the booked appointment because of \&quot;generic\&quot; slots. .</param>
        /// <param name="appointmenttypeid">This is the ID for the appointment type. Note that this may not be the same as the booked appointment because of \&quot;generic\&quot; slots..</param>
        /// <param name="cancelreasonid">If the appointment was cancelled, the numeric ID (local to the practice) for the cancel reason..</param>
        /// <param name="cancelreasonnoshow">If the appointment was cancelled, if the cancel reason is marked as a no show reason..</param>
        /// <param name="cancelreasonslotavailable">If the appointment was cancelled, if the cancel reason is marked as a slot available reason..</param>
        /// <param name="coordinatorenterpriseyn">If true, the appointment was booked through athenaCoordinator Enterprise..</param>
        /// <param name="duration">In minutes.</param>
        /// <param name="scheduleddatetime">The time (mm/dd/yyyy hh24:mi:ss; Eastern time) that this appointment was scheduled..</param>
        /// <param name="urgentyn">Urgent flag for the appointment..</param>
        /// <param name="startcheckin">The timestamp when the appointment started the check in process. If this is set while an appointment is still in status &#x27;f&#x27;, it means that the check-in process has begun but is not yet completed. .</param>
        /// <param name="appointmentconfirmationid">If there is an appointment confirmation result for this appointment, the numeric ID (global to athenaNet)..</param>
        /// <param name="suggestedoverbooking">High risk score for Smart Scheduling.</param>
        /// <param name="appointmentcopay">Detailed information about the copay for this appointment. Gives more detail than the COPAY field. Note: this information is not yet available in all practices, we are rolling this out slowly. .</param>
        /// <param name="appointmentid">Appointment ID of the booked appointment.</param>
        /// <param name="date">The appointment date..</param>
        /// <param name="patient">See /patients for details.</param>
        /// <param name="startcheckoutdatetime">The time (mm/dd/yyyy hh24:mi:ss) that the appointment check-out was started..</param>
        /// <param name="appointmentconfirmationname">If there is an appointment confirmation result for this appointment, the name (global to athenaNet)..</param>
        /// <param name="useexpectedprocedurecodes">An array of expected procedure codes attached to this appointment..</param>
        /// <param name="lastmodifiedby">The user who last modified the appointment..</param>
        /// <param name="patientappointmenttypename">The patient-friendly name for this appointment type. Note that this may not be the same as the booked appointment because of \&quot;generic\&quot; slots..</param>
        /// <param name="starttime">As HH:MM (where HH is the 0-23 hour and MM is the minute). This time is local to the department..</param>
        /// <param name="stopcheckin">The timestamp when the check-in process was finished for this appointment..</param>
        /// <param name="providerid">Id of the provider.</param>
        /// <param name="stopexamdatetime">The time (mm/dd/yyyy hh24:mi:ss) that the exam was completed..</param>
        /// <param name="renderingproviderid">The rendering provider ID..</param>
        /// <param name="supervisingproviderid">The supervising provider ID..</param>
        /// <param name="claims">As detailed in /claims, if requested..</param>
        /// <param name="patientlocationid">The location of the patient. See /patientlocation for practice list. Only present for appointments with Clinicals that have been checked in..</param>
        /// <param name="encounterstate">The status of the clinical encounter associated with this appointment (OPEN, CLOSED, DELETED, PEND, etc.). This differs from encounterstatus, which refers to the status of the patient in the encounter. .</param>
        /// <param name="rescheduledappointmentid">When an appointment is rescheduled, this is the ID of the replacement appointment..</param>
        /// <param name="referringproviderid">The referring provider ID..</param>
        /// <param name="reminderdetails">Detailed ReminderCall information made for this appointment..</param>
        /// <param name="templateappointmenttypeid">The original appointment type for this slot. This can change for generic appointments..</param>
        /// <param name="templateappointmentid">The original appointment ID. This is useful if an appointment has been cancelled and you want to find the original ID..</param>
        /// <param name="patientid">The athenaNet patient ID for this appointment.</param>
        public Appointment(int? reasonid = default(int?), List<AppointmentNote> appointmentnotes = default(List<AppointmentNote>), string appointmentstatus = default(string), string cancelleddatetime = default(string), bool? chargeentrynotrequired = default(bool?), int? hl7providerid = default(int?), string cancelreasonname = default(string), string chargeentrynotrequiredreason = default(string), string lastmodified = default(string), int? departmentid = default(int?), string checkoutdatetime = default(string), string copay = default(string), string encounterid = default(string), string scheduledby = default(string), string checkindatetime = default(string), string cancelledby = default(string), string stopintakedatetime = default(string), string encounterstatus = default(string), bool? frozenyn = default(bool?), string appointmenttype = default(string), int? appointmenttypeid = default(int?), int? cancelreasonid = default(int?), bool? cancelreasonnoshow = default(bool?), bool? cancelreasonslotavailable = default(bool?), bool? coordinatorenterpriseyn = default(bool?), int? duration = default(int?), string scheduleddatetime = default(string), bool? urgentyn = default(bool?), string startcheckin = default(string), int? appointmentconfirmationid = default(int?), string suggestedoverbooking = default(string), List<AppointmentCopay> appointmentcopay = default(List<AppointmentCopay>), int? appointmentid = default(int?), string date = default(string), string patient = default(string), string startcheckoutdatetime = default(string), string appointmentconfirmationname = default(string), List<ProcedureCode> useexpectedprocedurecodes = default(List<ProcedureCode>), string lastmodifiedby = default(string), string patientappointmenttypename = default(string), string starttime = default(string), string stopcheckin = default(string), int? providerid = default(int?), string stopexamdatetime = default(string), int? renderingproviderid = default(int?), string supervisingproviderid = default(string), List<AppointmentClaim> claims = default(List<AppointmentClaim>), int? patientlocationid = default(int?), string encounterstate = default(string), int? rescheduledappointmentid = default(int?), int? referringproviderid = default(int?), List<MessageResult> reminderdetails = default(List<MessageResult>), int? templateappointmenttypeid = default(int?), int? templateappointmentid = default(int?), int? patientid = default(int?))
        {
            this.Reasonid = reasonid;
            this.Appointmentnotes = appointmentnotes;
            this.Appointmentstatus = appointmentstatus;
            this.Cancelleddatetime = cancelleddatetime;
            this.Chargeentrynotrequired = chargeentrynotrequired;
            this.Hl7providerid = hl7providerid;
            this.Cancelreasonname = cancelreasonname;
            this.Chargeentrynotrequiredreason = chargeentrynotrequiredreason;
            this.Lastmodified = lastmodified;
            this.Departmentid = departmentid;
            this.Checkoutdatetime = checkoutdatetime;
            this.Copay = copay;
            this.Encounterid = encounterid;
            this.Scheduledby = scheduledby;
            this.Checkindatetime = checkindatetime;
            this.Cancelledby = cancelledby;
            this.Stopintakedatetime = stopintakedatetime;
            this.Encounterstatus = encounterstatus;
            this.Frozenyn = frozenyn;
            this.Appointmenttype = appointmenttype;
            this.Appointmenttypeid = appointmenttypeid;
            this.Cancelreasonid = cancelreasonid;
            this.Cancelreasonnoshow = cancelreasonnoshow;
            this.Cancelreasonslotavailable = cancelreasonslotavailable;
            this.Coordinatorenterpriseyn = coordinatorenterpriseyn;
            this.Duration = duration;
            this.Scheduleddatetime = scheduleddatetime;
            this.Urgentyn = urgentyn;
            this.Startcheckin = startcheckin;
            this.Appointmentconfirmationid = appointmentconfirmationid;
            this.Suggestedoverbooking = suggestedoverbooking;
            this.Appointmentcopay = appointmentcopay;
            this.Appointmentid = appointmentid;
            this.Date = date;
            this.Patient = patient;
            this.Startcheckoutdatetime = startcheckoutdatetime;
            this.Appointmentconfirmationname = appointmentconfirmationname;
            this.Useexpectedprocedurecodes = useexpectedprocedurecodes;
            this.Lastmodifiedby = lastmodifiedby;
            this.Patientappointmenttypename = patientappointmenttypename;
            this.Starttime = starttime;
            this.Stopcheckin = stopcheckin;
            this.Providerid = providerid;
            this.Stopexamdatetime = stopexamdatetime;
            this.Renderingproviderid = renderingproviderid;
            this.Supervisingproviderid = supervisingproviderid;
            this.Claims = claims;
            this.Patientlocationid = patientlocationid;
            this.Encounterstate = encounterstate;
            this.Rescheduledappointmentid = rescheduledappointmentid;
            this.Referringproviderid = referringproviderid;
            this.Reminderdetails = reminderdetails;
            this.Templateappointmenttypeid = templateappointmenttypeid;
            this.Templateappointmentid = templateappointmentid;
            this.Patientid = patientid;
        }
        
        /// <summary>
        /// A list of reason IDs that could be used for this slot. Only present if multiple reason IDs are requested.
        /// </summary>
        /// <value>A list of reason IDs that could be used for this slot. Only present if multiple reason IDs are requested.</value>
        [DataMember(Name="reasonid", EmitDefaultValue=false)]
        public int? Reasonid { get; set; }

        /// <summary>
        /// message
        /// </summary>
        /// <value>message</value>
        [DataMember(Name="appointmentnotes", EmitDefaultValue=false)]
        public List<AppointmentNote> Appointmentnotes { get; set; }

        /// <summary>
        /// The athenaNet appointment status. There are several possible statuses. x&#x3D;cancelled. f&#x3D;future. (It can include appointments where were never checked in, even if the appointment date is in the past. It is up to a practice to cancel appointments as a no show when appropriate to do so.) o&#x3D;open. 2&#x3D;checked in. 3&#x3D;checked out. 4&#x3D;charge entered (i.e. a past appointment). 
        /// </summary>
        /// <value>The athenaNet appointment status. There are several possible statuses. x&#x3D;cancelled. f&#x3D;future. (It can include appointments where were never checked in, even if the appointment date is in the past. It is up to a practice to cancel appointments as a no show when appropriate to do so.) o&#x3D;open. 2&#x3D;checked in. 3&#x3D;checked out. 4&#x3D;charge entered (i.e. a past appointment). </value>
        [DataMember(Name="appointmentstatus", EmitDefaultValue=false)]
        public string Appointmentstatus { get; set; }

        /// <summary>
        /// The time (mm/dd/yyyy hh24:mi:ss; Eastern time) that this appointment was cancelled (if cancelled)
        /// </summary>
        /// <value>The time (mm/dd/yyyy hh24:mi:ss; Eastern time) that this appointment was cancelled (if cancelled)</value>
        [DataMember(Name="cancelleddatetime", EmitDefaultValue=false)]
        public string Cancelleddatetime { get; set; }

        /// <summary>
        /// This field will tell if an appointment has been marked as not requiring change entry.
        /// </summary>
        /// <value>This field will tell if an appointment has been marked as not requiring change entry.</value>
        [DataMember(Name="chargeentrynotrequired", EmitDefaultValue=false)]
        public bool? Chargeentrynotrequired { get; set; }

        /// <summary>
        /// This is the raw provider ID that should be used ONLY if using this appointment in conjunction with an HL7 message and with athenahealth&#x27;s prior guidance. It is only available in some situations.
        /// </summary>
        /// <value>This is the raw provider ID that should be used ONLY if using this appointment in conjunction with an HL7 message and with athenahealth&#x27;s prior guidance. It is only available in some situations.</value>
        [DataMember(Name="hl7providerid", EmitDefaultValue=false)]
        public int? Hl7providerid { get; set; }

        /// <summary>
        /// If the appointment was cancelled, the name (local to the practice) for the cancel reason. 
        /// </summary>
        /// <value>If the appointment was cancelled, the name (local to the practice) for the cancel reason. </value>
        [DataMember(Name="cancelreasonname", EmitDefaultValue=false)]
        public string Cancelreasonname { get; set; }

        /// <summary>
        /// This field will give the reason that an appointment has been marked as not requiring charge entry.
        /// </summary>
        /// <value>This field will give the reason that an appointment has been marked as not requiring charge entry.</value>
        [DataMember(Name="chargeentrynotrequiredreason", EmitDefaultValue=false)]
        public string Chargeentrynotrequiredreason { get; set; }

        /// <summary>
        /// The date/time when the appointment was last modified. Note: It may be possible for the lastmodified field to be updated without any other field in the API call being changed. This occurs when appointment fields not included in the API output are updated. 
        /// </summary>
        /// <value>The date/time when the appointment was last modified. Note: It may be possible for the lastmodified field to be updated without any other field in the API call being changed. This occurs when appointment fields not included in the API output are updated. </value>
        [DataMember(Name="lastmodified", EmitDefaultValue=false)]
        public string Lastmodified { get; set; }

        /// <summary>
        /// Id of the department
        /// </summary>
        /// <value>Id of the department</value>
        [DataMember(Name="departmentid", EmitDefaultValue=false)]
        public int? Departmentid { get; set; }

        /// <summary>
        /// The time (mm/dd/yyyy hh24:mi:ss) that the appointment was checked out.
        /// </summary>
        /// <value>The time (mm/dd/yyyy hh24:mi:ss) that the appointment was checked out.</value>
        [DataMember(Name="checkoutdatetime", EmitDefaultValue=false)]
        public string Checkoutdatetime { get; set; }

        /// <summary>
        /// Expected copay for this appointment. Based on the appointment type, the patient&#x27;s primary insurance, and any copays collected. To see the amounts used in this calculated value, see the APPOINTMENTCOPAY fields. 
        /// </summary>
        /// <value>Expected copay for this appointment. Based on the appointment type, the patient&#x27;s primary insurance, and any copays collected. To see the amounts used in this calculated value, see the APPOINTMENTCOPAY fields. </value>
        [DataMember(Name="copay", EmitDefaultValue=false)]
        public string Copay { get; set; }

        /// <summary>
        /// The encounter id associated with this appointment, useful for certain other calls. Only present for appointments with Clinicals that have been checked in. 
        /// </summary>
        /// <value>The encounter id associated with this appointment, useful for certain other calls. Only present for appointments with Clinicals that have been checked in. </value>
        [DataMember(Name="encounterid", EmitDefaultValue=false)]
        public string Encounterid { get; set; }

        /// <summary>
        /// The username who scheduled the appointment.
        /// </summary>
        /// <value>The username who scheduled the appointment.</value>
        [DataMember(Name="scheduledby", EmitDefaultValue=false)]
        public string Scheduledby { get; set; }

        /// <summary>
        /// The time (mm/dd/yyyy hh24:mi:ss) that the appointment was checked in.
        /// </summary>
        /// <value>The time (mm/dd/yyyy hh24:mi:ss) that the appointment was checked in.</value>
        [DataMember(Name="checkindatetime", EmitDefaultValue=false)]
        public string Checkindatetime { get; set; }

        /// <summary>
        /// If the appointment has been cancelled, the username who cancelled the appointment. 
        /// </summary>
        /// <value>If the appointment has been cancelled, the username who cancelled the appointment. </value>
        [DataMember(Name="cancelledby", EmitDefaultValue=false)]
        public string Cancelledby { get; set; }

        /// <summary>
        /// The time (mm/dd/yyyy hh24:mi:ss) that the intake process was completed.
        /// </summary>
        /// <value>The time (mm/dd/yyyy hh24:mi:ss) that the intake process was completed.</value>
        [DataMember(Name="stopintakedatetime", EmitDefaultValue=false)]
        public string Stopintakedatetime { get; set; }

        /// <summary>
        /// The status of this patient in the encounter (READYFORSTAFF, WITHSTAFF, READFORPROVIDER, CHECKEDOUT). Only present for appointments with Clinicals that have been checked in. 
        /// </summary>
        /// <value>The status of this patient in the encounter (READYFORSTAFF, WITHSTAFF, READFORPROVIDER, CHECKEDOUT). Only present for appointments with Clinicals that have been checked in. </value>
        [DataMember(Name="encounterstatus", EmitDefaultValue=false)]
        public string Encounterstatus { get; set; }

        /// <summary>
        /// If true, this appointment slot is frozen 
        /// </summary>
        /// <value>If true, this appointment slot is frozen </value>
        [DataMember(Name="frozenyn", EmitDefaultValue=false)]
        public bool? Frozenyn { get; set; }

        /// <summary>
        /// The practice-friendly (not patient friendly) name for this appointment type. Note that this may not be the same as the booked appointment because of \&quot;generic\&quot; slots. 
        /// </summary>
        /// <value>The practice-friendly (not patient friendly) name for this appointment type. Note that this may not be the same as the booked appointment because of \&quot;generic\&quot; slots. </value>
        [DataMember(Name="appointmenttype", EmitDefaultValue=false)]
        public string Appointmenttype { get; set; }

        /// <summary>
        /// This is the ID for the appointment type. Note that this may not be the same as the booked appointment because of \&quot;generic\&quot; slots.
        /// </summary>
        /// <value>This is the ID for the appointment type. Note that this may not be the same as the booked appointment because of \&quot;generic\&quot; slots.</value>
        [DataMember(Name="appointmenttypeid", EmitDefaultValue=false)]
        public int? Appointmenttypeid { get; set; }

        /// <summary>
        /// If the appointment was cancelled, the numeric ID (local to the practice) for the cancel reason.
        /// </summary>
        /// <value>If the appointment was cancelled, the numeric ID (local to the practice) for the cancel reason.</value>
        [DataMember(Name="cancelreasonid", EmitDefaultValue=false)]
        public int? Cancelreasonid { get; set; }

        /// <summary>
        /// If the appointment was cancelled, if the cancel reason is marked as a no show reason.
        /// </summary>
        /// <value>If the appointment was cancelled, if the cancel reason is marked as a no show reason.</value>
        [DataMember(Name="cancelreasonnoshow", EmitDefaultValue=false)]
        public bool? Cancelreasonnoshow { get; set; }

        /// <summary>
        /// If the appointment was cancelled, if the cancel reason is marked as a slot available reason.
        /// </summary>
        /// <value>If the appointment was cancelled, if the cancel reason is marked as a slot available reason.</value>
        [DataMember(Name="cancelreasonslotavailable", EmitDefaultValue=false)]
        public bool? Cancelreasonslotavailable { get; set; }

        /// <summary>
        /// If true, the appointment was booked through athenaCoordinator Enterprise.
        /// </summary>
        /// <value>If true, the appointment was booked through athenaCoordinator Enterprise.</value>
        [DataMember(Name="coordinatorenterpriseyn", EmitDefaultValue=false)]
        public bool? Coordinatorenterpriseyn { get; set; }

        /// <summary>
        /// In minutes
        /// </summary>
        /// <value>In minutes</value>
        [DataMember(Name="duration", EmitDefaultValue=false)]
        public int? Duration { get; set; }

        /// <summary>
        /// The time (mm/dd/yyyy hh24:mi:ss; Eastern time) that this appointment was scheduled.
        /// </summary>
        /// <value>The time (mm/dd/yyyy hh24:mi:ss; Eastern time) that this appointment was scheduled.</value>
        [DataMember(Name="scheduleddatetime", EmitDefaultValue=false)]
        public string Scheduleddatetime { get; set; }

        /// <summary>
        /// Urgent flag for the appointment.
        /// </summary>
        /// <value>Urgent flag for the appointment.</value>
        [DataMember(Name="urgentyn", EmitDefaultValue=false)]
        public bool? Urgentyn { get; set; }

        /// <summary>
        /// The timestamp when the appointment started the check in process. If this is set while an appointment is still in status &#x27;f&#x27;, it means that the check-in process has begun but is not yet completed. 
        /// </summary>
        /// <value>The timestamp when the appointment started the check in process. If this is set while an appointment is still in status &#x27;f&#x27;, it means that the check-in process has begun but is not yet completed. </value>
        [DataMember(Name="startcheckin", EmitDefaultValue=false)]
        public string Startcheckin { get; set; }

        /// <summary>
        /// If there is an appointment confirmation result for this appointment, the numeric ID (global to athenaNet).
        /// </summary>
        /// <value>If there is an appointment confirmation result for this appointment, the numeric ID (global to athenaNet).</value>
        [DataMember(Name="appointmentconfirmationid", EmitDefaultValue=false)]
        public int? Appointmentconfirmationid { get; set; }

        /// <summary>
        /// High risk score for Smart Scheduling
        /// </summary>
        /// <value>High risk score for Smart Scheduling</value>
        [DataMember(Name="suggestedoverbooking", EmitDefaultValue=false)]
        public string Suggestedoverbooking { get; set; }

        /// <summary>
        /// Detailed information about the copay for this appointment. Gives more detail than the COPAY field. Note: this information is not yet available in all practices, we are rolling this out slowly. 
        /// </summary>
        /// <value>Detailed information about the copay for this appointment. Gives more detail than the COPAY field. Note: this information is not yet available in all practices, we are rolling this out slowly. </value>
        [DataMember(Name="appointmentcopay", EmitDefaultValue=false)]
        public List<AppointmentCopay> Appointmentcopay { get; set; }

        /// <summary>
        /// Appointment ID of the booked appointment
        /// </summary>
        /// <value>Appointment ID of the booked appointment</value>
        [DataMember(Name="appointmentid", EmitDefaultValue=false)]
        public int? Appointmentid { get; set; }

        /// <summary>
        /// The appointment date.
        /// </summary>
        /// <value>The appointment date.</value>
        [DataMember(Name="date", EmitDefaultValue=false)]
        public string Date { get; set; }

        /// <summary>
        /// See /patients for details
        /// </summary>
        /// <value>See /patients for details</value>
        [DataMember(Name="patient", EmitDefaultValue=false)]
        public string Patient { get; set; }

        /// <summary>
        /// The time (mm/dd/yyyy hh24:mi:ss) that the appointment check-out was started.
        /// </summary>
        /// <value>The time (mm/dd/yyyy hh24:mi:ss) that the appointment check-out was started.</value>
        [DataMember(Name="startcheckoutdatetime", EmitDefaultValue=false)]
        public string Startcheckoutdatetime { get; set; }

        /// <summary>
        /// If there is an appointment confirmation result for this appointment, the name (global to athenaNet).
        /// </summary>
        /// <value>If there is an appointment confirmation result for this appointment, the name (global to athenaNet).</value>
        [DataMember(Name="appointmentconfirmationname", EmitDefaultValue=false)]
        public string Appointmentconfirmationname { get; set; }

        /// <summary>
        /// An array of expected procedure codes attached to this appointment.
        /// </summary>
        /// <value>An array of expected procedure codes attached to this appointment.</value>
        [DataMember(Name="useexpectedprocedurecodes", EmitDefaultValue=false)]
        public List<ProcedureCode> Useexpectedprocedurecodes { get; set; }

        /// <summary>
        /// The user who last modified the appointment.
        /// </summary>
        /// <value>The user who last modified the appointment.</value>
        [DataMember(Name="lastmodifiedby", EmitDefaultValue=false)]
        public string Lastmodifiedby { get; set; }

        /// <summary>
        /// The patient-friendly name for this appointment type. Note that this may not be the same as the booked appointment because of \&quot;generic\&quot; slots.
        /// </summary>
        /// <value>The patient-friendly name for this appointment type. Note that this may not be the same as the booked appointment because of \&quot;generic\&quot; slots.</value>
        [DataMember(Name="patientappointmenttypename", EmitDefaultValue=false)]
        public string Patientappointmenttypename { get; set; }

        /// <summary>
        /// As HH:MM (where HH is the 0-23 hour and MM is the minute). This time is local to the department.
        /// </summary>
        /// <value>As HH:MM (where HH is the 0-23 hour and MM is the minute). This time is local to the department.</value>
        [DataMember(Name="starttime", EmitDefaultValue=false)]
        public string Starttime { get; set; }

        /// <summary>
        /// The timestamp when the check-in process was finished for this appointment.
        /// </summary>
        /// <value>The timestamp when the check-in process was finished for this appointment.</value>
        [DataMember(Name="stopcheckin", EmitDefaultValue=false)]
        public string Stopcheckin { get; set; }

        /// <summary>
        /// Id of the provider
        /// </summary>
        /// <value>Id of the provider</value>
        [DataMember(Name="providerid", EmitDefaultValue=false)]
        public int? Providerid { get; set; }

        /// <summary>
        /// The time (mm/dd/yyyy hh24:mi:ss) that the exam was completed.
        /// </summary>
        /// <value>The time (mm/dd/yyyy hh24:mi:ss) that the exam was completed.</value>
        [DataMember(Name="stopexamdatetime", EmitDefaultValue=false)]
        public string Stopexamdatetime { get; set; }

        /// <summary>
        /// The rendering provider ID.
        /// </summary>
        /// <value>The rendering provider ID.</value>
        [DataMember(Name="renderingproviderid", EmitDefaultValue=false)]
        public int? Renderingproviderid { get; set; }

        /// <summary>
        /// The supervising provider ID.
        /// </summary>
        /// <value>The supervising provider ID.</value>
        [DataMember(Name="supervisingproviderid", EmitDefaultValue=false)]
        public string Supervisingproviderid { get; set; }

        /// <summary>
        /// As detailed in /claims, if requested.
        /// </summary>
        /// <value>As detailed in /claims, if requested.</value>
        [DataMember(Name="claims", EmitDefaultValue=false)]
        public List<AppointmentClaim> Claims { get; set; }

        /// <summary>
        /// The location of the patient. See /patientlocation for practice list. Only present for appointments with Clinicals that have been checked in.
        /// </summary>
        /// <value>The location of the patient. See /patientlocation for practice list. Only present for appointments with Clinicals that have been checked in.</value>
        [DataMember(Name="patientlocationid", EmitDefaultValue=false)]
        public int? Patientlocationid { get; set; }

        /// <summary>
        /// The status of the clinical encounter associated with this appointment (OPEN, CLOSED, DELETED, PEND, etc.). This differs from encounterstatus, which refers to the status of the patient in the encounter. 
        /// </summary>
        /// <value>The status of the clinical encounter associated with this appointment (OPEN, CLOSED, DELETED, PEND, etc.). This differs from encounterstatus, which refers to the status of the patient in the encounter. </value>
        [DataMember(Name="encounterstate", EmitDefaultValue=false)]
        public string Encounterstate { get; set; }

        /// <summary>
        /// When an appointment is rescheduled, this is the ID of the replacement appointment.
        /// </summary>
        /// <value>When an appointment is rescheduled, this is the ID of the replacement appointment.</value>
        [DataMember(Name="rescheduledappointmentid", EmitDefaultValue=false)]
        public int? Rescheduledappointmentid { get; set; }

        /// <summary>
        /// The referring provider ID.
        /// </summary>
        /// <value>The referring provider ID.</value>
        [DataMember(Name="referringproviderid", EmitDefaultValue=false)]
        public int? Referringproviderid { get; set; }

        /// <summary>
        /// Detailed ReminderCall information made for this appointment.
        /// </summary>
        /// <value>Detailed ReminderCall information made for this appointment.</value>
        [DataMember(Name="reminderdetails", EmitDefaultValue=false)]
        public List<MessageResult> Reminderdetails { get; set; }

        /// <summary>
        /// The original appointment type for this slot. This can change for generic appointments.
        /// </summary>
        /// <value>The original appointment type for this slot. This can change for generic appointments.</value>
        [DataMember(Name="templateappointmenttypeid", EmitDefaultValue=false)]
        public int? Templateappointmenttypeid { get; set; }

        /// <summary>
        /// The original appointment ID. This is useful if an appointment has been cancelled and you want to find the original ID.
        /// </summary>
        /// <value>The original appointment ID. This is useful if an appointment has been cancelled and you want to find the original ID.</value>
        [DataMember(Name="templateappointmentid", EmitDefaultValue=false)]
        public int? Templateappointmentid { get; set; }

        /// <summary>
        /// The athenaNet patient ID for this appointment
        /// </summary>
        /// <value>The athenaNet patient ID for this appointment</value>
        [DataMember(Name="patientid", EmitDefaultValue=false)]
        public int? Patientid { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Appointment {\n");
            sb.Append("  Reasonid: ").Append(Reasonid).Append("\n");
            sb.Append("  Appointmentnotes: ").Append(Appointmentnotes).Append("\n");
            sb.Append("  Appointmentstatus: ").Append(Appointmentstatus).Append("\n");
            sb.Append("  Cancelleddatetime: ").Append(Cancelleddatetime).Append("\n");
            sb.Append("  Chargeentrynotrequired: ").Append(Chargeentrynotrequired).Append("\n");
            sb.Append("  Hl7providerid: ").Append(Hl7providerid).Append("\n");
            sb.Append("  Cancelreasonname: ").Append(Cancelreasonname).Append("\n");
            sb.Append("  Chargeentrynotrequiredreason: ").Append(Chargeentrynotrequiredreason).Append("\n");
            sb.Append("  Lastmodified: ").Append(Lastmodified).Append("\n");
            sb.Append("  Departmentid: ").Append(Departmentid).Append("\n");
            sb.Append("  Checkoutdatetime: ").Append(Checkoutdatetime).Append("\n");
            sb.Append("  Copay: ").Append(Copay).Append("\n");
            sb.Append("  Encounterid: ").Append(Encounterid).Append("\n");
            sb.Append("  Scheduledby: ").Append(Scheduledby).Append("\n");
            sb.Append("  Checkindatetime: ").Append(Checkindatetime).Append("\n");
            sb.Append("  Cancelledby: ").Append(Cancelledby).Append("\n");
            sb.Append("  Stopintakedatetime: ").Append(Stopintakedatetime).Append("\n");
            sb.Append("  Encounterstatus: ").Append(Encounterstatus).Append("\n");
            sb.Append("  Frozenyn: ").Append(Frozenyn).Append("\n");
            sb.Append("  Appointmenttype: ").Append(Appointmenttype).Append("\n");
            sb.Append("  Appointmenttypeid: ").Append(Appointmenttypeid).Append("\n");
            sb.Append("  Cancelreasonid: ").Append(Cancelreasonid).Append("\n");
            sb.Append("  Cancelreasonnoshow: ").Append(Cancelreasonnoshow).Append("\n");
            sb.Append("  Cancelreasonslotavailable: ").Append(Cancelreasonslotavailable).Append("\n");
            sb.Append("  Coordinatorenterpriseyn: ").Append(Coordinatorenterpriseyn).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  Scheduleddatetime: ").Append(Scheduleddatetime).Append("\n");
            sb.Append("  Urgentyn: ").Append(Urgentyn).Append("\n");
            sb.Append("  Startcheckin: ").Append(Startcheckin).Append("\n");
            sb.Append("  Appointmentconfirmationid: ").Append(Appointmentconfirmationid).Append("\n");
            sb.Append("  Suggestedoverbooking: ").Append(Suggestedoverbooking).Append("\n");
            sb.Append("  Appointmentcopay: ").Append(Appointmentcopay).Append("\n");
            sb.Append("  Appointmentid: ").Append(Appointmentid).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  Patient: ").Append(Patient).Append("\n");
            sb.Append("  Startcheckoutdatetime: ").Append(Startcheckoutdatetime).Append("\n");
            sb.Append("  Appointmentconfirmationname: ").Append(Appointmentconfirmationname).Append("\n");
            sb.Append("  Useexpectedprocedurecodes: ").Append(Useexpectedprocedurecodes).Append("\n");
            sb.Append("  Lastmodifiedby: ").Append(Lastmodifiedby).Append("\n");
            sb.Append("  Patientappointmenttypename: ").Append(Patientappointmenttypename).Append("\n");
            sb.Append("  Starttime: ").Append(Starttime).Append("\n");
            sb.Append("  Stopcheckin: ").Append(Stopcheckin).Append("\n");
            sb.Append("  Providerid: ").Append(Providerid).Append("\n");
            sb.Append("  Stopexamdatetime: ").Append(Stopexamdatetime).Append("\n");
            sb.Append("  Renderingproviderid: ").Append(Renderingproviderid).Append("\n");
            sb.Append("  Supervisingproviderid: ").Append(Supervisingproviderid).Append("\n");
            sb.Append("  Claims: ").Append(Claims).Append("\n");
            sb.Append("  Patientlocationid: ").Append(Patientlocationid).Append("\n");
            sb.Append("  Encounterstate: ").Append(Encounterstate).Append("\n");
            sb.Append("  Rescheduledappointmentid: ").Append(Rescheduledappointmentid).Append("\n");
            sb.Append("  Referringproviderid: ").Append(Referringproviderid).Append("\n");
            sb.Append("  Reminderdetails: ").Append(Reminderdetails).Append("\n");
            sb.Append("  Templateappointmenttypeid: ").Append(Templateappointmenttypeid).Append("\n");
            sb.Append("  Templateappointmentid: ").Append(Templateappointmentid).Append("\n");
            sb.Append("  Patientid: ").Append(Patientid).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Appointment);
        }

        /// <summary>
        /// Returns true if Appointment instances are equal
        /// </summary>
        /// <param name="input">Instance of Appointment to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Appointment input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Reasonid == input.Reasonid ||
                    (this.Reasonid != null &&
                    this.Reasonid.Equals(input.Reasonid))
                ) && 
                (
                    this.Appointmentnotes == input.Appointmentnotes ||
                    this.Appointmentnotes != null &&
                    input.Appointmentnotes != null &&
                    this.Appointmentnotes.SequenceEqual(input.Appointmentnotes)
                ) && 
                (
                    this.Appointmentstatus == input.Appointmentstatus ||
                    (this.Appointmentstatus != null &&
                    this.Appointmentstatus.Equals(input.Appointmentstatus))
                ) && 
                (
                    this.Cancelleddatetime == input.Cancelleddatetime ||
                    (this.Cancelleddatetime != null &&
                    this.Cancelleddatetime.Equals(input.Cancelleddatetime))
                ) && 
                (
                    this.Chargeentrynotrequired == input.Chargeentrynotrequired ||
                    (this.Chargeentrynotrequired != null &&
                    this.Chargeentrynotrequired.Equals(input.Chargeentrynotrequired))
                ) && 
                (
                    this.Hl7providerid == input.Hl7providerid ||
                    (this.Hl7providerid != null &&
                    this.Hl7providerid.Equals(input.Hl7providerid))
                ) && 
                (
                    this.Cancelreasonname == input.Cancelreasonname ||
                    (this.Cancelreasonname != null &&
                    this.Cancelreasonname.Equals(input.Cancelreasonname))
                ) && 
                (
                    this.Chargeentrynotrequiredreason == input.Chargeentrynotrequiredreason ||
                    (this.Chargeentrynotrequiredreason != null &&
                    this.Chargeentrynotrequiredreason.Equals(input.Chargeentrynotrequiredreason))
                ) && 
                (
                    this.Lastmodified == input.Lastmodified ||
                    (this.Lastmodified != null &&
                    this.Lastmodified.Equals(input.Lastmodified))
                ) && 
                (
                    this.Departmentid == input.Departmentid ||
                    (this.Departmentid != null &&
                    this.Departmentid.Equals(input.Departmentid))
                ) && 
                (
                    this.Checkoutdatetime == input.Checkoutdatetime ||
                    (this.Checkoutdatetime != null &&
                    this.Checkoutdatetime.Equals(input.Checkoutdatetime))
                ) && 
                (
                    this.Copay == input.Copay ||
                    (this.Copay != null &&
                    this.Copay.Equals(input.Copay))
                ) && 
                (
                    this.Encounterid == input.Encounterid ||
                    (this.Encounterid != null &&
                    this.Encounterid.Equals(input.Encounterid))
                ) && 
                (
                    this.Scheduledby == input.Scheduledby ||
                    (this.Scheduledby != null &&
                    this.Scheduledby.Equals(input.Scheduledby))
                ) && 
                (
                    this.Checkindatetime == input.Checkindatetime ||
                    (this.Checkindatetime != null &&
                    this.Checkindatetime.Equals(input.Checkindatetime))
                ) && 
                (
                    this.Cancelledby == input.Cancelledby ||
                    (this.Cancelledby != null &&
                    this.Cancelledby.Equals(input.Cancelledby))
                ) && 
                (
                    this.Stopintakedatetime == input.Stopintakedatetime ||
                    (this.Stopintakedatetime != null &&
                    this.Stopintakedatetime.Equals(input.Stopintakedatetime))
                ) && 
                (
                    this.Encounterstatus == input.Encounterstatus ||
                    (this.Encounterstatus != null &&
                    this.Encounterstatus.Equals(input.Encounterstatus))
                ) && 
                (
                    this.Frozenyn == input.Frozenyn ||
                    (this.Frozenyn != null &&
                    this.Frozenyn.Equals(input.Frozenyn))
                ) && 
                (
                    this.Appointmenttype == input.Appointmenttype ||
                    (this.Appointmenttype != null &&
                    this.Appointmenttype.Equals(input.Appointmenttype))
                ) && 
                (
                    this.Appointmenttypeid == input.Appointmenttypeid ||
                    (this.Appointmenttypeid != null &&
                    this.Appointmenttypeid.Equals(input.Appointmenttypeid))
                ) && 
                (
                    this.Cancelreasonid == input.Cancelreasonid ||
                    (this.Cancelreasonid != null &&
                    this.Cancelreasonid.Equals(input.Cancelreasonid))
                ) && 
                (
                    this.Cancelreasonnoshow == input.Cancelreasonnoshow ||
                    (this.Cancelreasonnoshow != null &&
                    this.Cancelreasonnoshow.Equals(input.Cancelreasonnoshow))
                ) && 
                (
                    this.Cancelreasonslotavailable == input.Cancelreasonslotavailable ||
                    (this.Cancelreasonslotavailable != null &&
                    this.Cancelreasonslotavailable.Equals(input.Cancelreasonslotavailable))
                ) && 
                (
                    this.Coordinatorenterpriseyn == input.Coordinatorenterpriseyn ||
                    (this.Coordinatorenterpriseyn != null &&
                    this.Coordinatorenterpriseyn.Equals(input.Coordinatorenterpriseyn))
                ) && 
                (
                    this.Duration == input.Duration ||
                    (this.Duration != null &&
                    this.Duration.Equals(input.Duration))
                ) && 
                (
                    this.Scheduleddatetime == input.Scheduleddatetime ||
                    (this.Scheduleddatetime != null &&
                    this.Scheduleddatetime.Equals(input.Scheduleddatetime))
                ) && 
                (
                    this.Urgentyn == input.Urgentyn ||
                    (this.Urgentyn != null &&
                    this.Urgentyn.Equals(input.Urgentyn))
                ) && 
                (
                    this.Startcheckin == input.Startcheckin ||
                    (this.Startcheckin != null &&
                    this.Startcheckin.Equals(input.Startcheckin))
                ) && 
                (
                    this.Appointmentconfirmationid == input.Appointmentconfirmationid ||
                    (this.Appointmentconfirmationid != null &&
                    this.Appointmentconfirmationid.Equals(input.Appointmentconfirmationid))
                ) && 
                (
                    this.Suggestedoverbooking == input.Suggestedoverbooking ||
                    (this.Suggestedoverbooking != null &&
                    this.Suggestedoverbooking.Equals(input.Suggestedoverbooking))
                ) && 
                (
                    this.Appointmentcopay == input.Appointmentcopay ||
                    this.Appointmentcopay != null &&
                    input.Appointmentcopay != null &&
                    this.Appointmentcopay.SequenceEqual(input.Appointmentcopay)
                ) && 
                (
                    this.Appointmentid == input.Appointmentid ||
                    (this.Appointmentid != null &&
                    this.Appointmentid.Equals(input.Appointmentid))
                ) && 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && 
                (
                    this.Patient == input.Patient ||
                    (this.Patient != null &&
                    this.Patient.Equals(input.Patient))
                ) && 
                (
                    this.Startcheckoutdatetime == input.Startcheckoutdatetime ||
                    (this.Startcheckoutdatetime != null &&
                    this.Startcheckoutdatetime.Equals(input.Startcheckoutdatetime))
                ) && 
                (
                    this.Appointmentconfirmationname == input.Appointmentconfirmationname ||
                    (this.Appointmentconfirmationname != null &&
                    this.Appointmentconfirmationname.Equals(input.Appointmentconfirmationname))
                ) && 
                (
                    this.Useexpectedprocedurecodes == input.Useexpectedprocedurecodes ||
                    this.Useexpectedprocedurecodes != null &&
                    input.Useexpectedprocedurecodes != null &&
                    this.Useexpectedprocedurecodes.SequenceEqual(input.Useexpectedprocedurecodes)
                ) && 
                (
                    this.Lastmodifiedby == input.Lastmodifiedby ||
                    (this.Lastmodifiedby != null &&
                    this.Lastmodifiedby.Equals(input.Lastmodifiedby))
                ) && 
                (
                    this.Patientappointmenttypename == input.Patientappointmenttypename ||
                    (this.Patientappointmenttypename != null &&
                    this.Patientappointmenttypename.Equals(input.Patientappointmenttypename))
                ) && 
                (
                    this.Starttime == input.Starttime ||
                    (this.Starttime != null &&
                    this.Starttime.Equals(input.Starttime))
                ) && 
                (
                    this.Stopcheckin == input.Stopcheckin ||
                    (this.Stopcheckin != null &&
                    this.Stopcheckin.Equals(input.Stopcheckin))
                ) && 
                (
                    this.Providerid == input.Providerid ||
                    (this.Providerid != null &&
                    this.Providerid.Equals(input.Providerid))
                ) && 
                (
                    this.Stopexamdatetime == input.Stopexamdatetime ||
                    (this.Stopexamdatetime != null &&
                    this.Stopexamdatetime.Equals(input.Stopexamdatetime))
                ) && 
                (
                    this.Renderingproviderid == input.Renderingproviderid ||
                    (this.Renderingproviderid != null &&
                    this.Renderingproviderid.Equals(input.Renderingproviderid))
                ) && 
                (
                    this.Supervisingproviderid == input.Supervisingproviderid ||
                    (this.Supervisingproviderid != null &&
                    this.Supervisingproviderid.Equals(input.Supervisingproviderid))
                ) && 
                (
                    this.Claims == input.Claims ||
                    this.Claims != null &&
                    input.Claims != null &&
                    this.Claims.SequenceEqual(input.Claims)
                ) && 
                (
                    this.Patientlocationid == input.Patientlocationid ||
                    (this.Patientlocationid != null &&
                    this.Patientlocationid.Equals(input.Patientlocationid))
                ) && 
                (
                    this.Encounterstate == input.Encounterstate ||
                    (this.Encounterstate != null &&
                    this.Encounterstate.Equals(input.Encounterstate))
                ) && 
                (
                    this.Rescheduledappointmentid == input.Rescheduledappointmentid ||
                    (this.Rescheduledappointmentid != null &&
                    this.Rescheduledappointmentid.Equals(input.Rescheduledappointmentid))
                ) && 
                (
                    this.Referringproviderid == input.Referringproviderid ||
                    (this.Referringproviderid != null &&
                    this.Referringproviderid.Equals(input.Referringproviderid))
                ) && 
                (
                    this.Reminderdetails == input.Reminderdetails ||
                    this.Reminderdetails != null &&
                    input.Reminderdetails != null &&
                    this.Reminderdetails.SequenceEqual(input.Reminderdetails)
                ) && 
                (
                    this.Templateappointmenttypeid == input.Templateappointmenttypeid ||
                    (this.Templateappointmenttypeid != null &&
                    this.Templateappointmenttypeid.Equals(input.Templateappointmenttypeid))
                ) && 
                (
                    this.Templateappointmentid == input.Templateappointmentid ||
                    (this.Templateappointmentid != null &&
                    this.Templateappointmentid.Equals(input.Templateappointmentid))
                ) && 
                (
                    this.Patientid == input.Patientid ||
                    (this.Patientid != null &&
                    this.Patientid.Equals(input.Patientid))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Reasonid != null)
                    hashCode = hashCode * 59 + this.Reasonid.GetHashCode();
                if (this.Appointmentnotes != null)
                    hashCode = hashCode * 59 + this.Appointmentnotes.GetHashCode();
                if (this.Appointmentstatus != null)
                    hashCode = hashCode * 59 + this.Appointmentstatus.GetHashCode();
                if (this.Cancelleddatetime != null)
                    hashCode = hashCode * 59 + this.Cancelleddatetime.GetHashCode();
                if (this.Chargeentrynotrequired != null)
                    hashCode = hashCode * 59 + this.Chargeentrynotrequired.GetHashCode();
                if (this.Hl7providerid != null)
                    hashCode = hashCode * 59 + this.Hl7providerid.GetHashCode();
                if (this.Cancelreasonname != null)
                    hashCode = hashCode * 59 + this.Cancelreasonname.GetHashCode();
                if (this.Chargeentrynotrequiredreason != null)
                    hashCode = hashCode * 59 + this.Chargeentrynotrequiredreason.GetHashCode();
                if (this.Lastmodified != null)
                    hashCode = hashCode * 59 + this.Lastmodified.GetHashCode();
                if (this.Departmentid != null)
                    hashCode = hashCode * 59 + this.Departmentid.GetHashCode();
                if (this.Checkoutdatetime != null)
                    hashCode = hashCode * 59 + this.Checkoutdatetime.GetHashCode();
                if (this.Copay != null)
                    hashCode = hashCode * 59 + this.Copay.GetHashCode();
                if (this.Encounterid != null)
                    hashCode = hashCode * 59 + this.Encounterid.GetHashCode();
                if (this.Scheduledby != null)
                    hashCode = hashCode * 59 + this.Scheduledby.GetHashCode();
                if (this.Checkindatetime != null)
                    hashCode = hashCode * 59 + this.Checkindatetime.GetHashCode();
                if (this.Cancelledby != null)
                    hashCode = hashCode * 59 + this.Cancelledby.GetHashCode();
                if (this.Stopintakedatetime != null)
                    hashCode = hashCode * 59 + this.Stopintakedatetime.GetHashCode();
                if (this.Encounterstatus != null)
                    hashCode = hashCode * 59 + this.Encounterstatus.GetHashCode();
                if (this.Frozenyn != null)
                    hashCode = hashCode * 59 + this.Frozenyn.GetHashCode();
                if (this.Appointmenttype != null)
                    hashCode = hashCode * 59 + this.Appointmenttype.GetHashCode();
                if (this.Appointmenttypeid != null)
                    hashCode = hashCode * 59 + this.Appointmenttypeid.GetHashCode();
                if (this.Cancelreasonid != null)
                    hashCode = hashCode * 59 + this.Cancelreasonid.GetHashCode();
                if (this.Cancelreasonnoshow != null)
                    hashCode = hashCode * 59 + this.Cancelreasonnoshow.GetHashCode();
                if (this.Cancelreasonslotavailable != null)
                    hashCode = hashCode * 59 + this.Cancelreasonslotavailable.GetHashCode();
                if (this.Coordinatorenterpriseyn != null)
                    hashCode = hashCode * 59 + this.Coordinatorenterpriseyn.GetHashCode();
                if (this.Duration != null)
                    hashCode = hashCode * 59 + this.Duration.GetHashCode();
                if (this.Scheduleddatetime != null)
                    hashCode = hashCode * 59 + this.Scheduleddatetime.GetHashCode();
                if (this.Urgentyn != null)
                    hashCode = hashCode * 59 + this.Urgentyn.GetHashCode();
                if (this.Startcheckin != null)
                    hashCode = hashCode * 59 + this.Startcheckin.GetHashCode();
                if (this.Appointmentconfirmationid != null)
                    hashCode = hashCode * 59 + this.Appointmentconfirmationid.GetHashCode();
                if (this.Suggestedoverbooking != null)
                    hashCode = hashCode * 59 + this.Suggestedoverbooking.GetHashCode();
                if (this.Appointmentcopay != null)
                    hashCode = hashCode * 59 + this.Appointmentcopay.GetHashCode();
                if (this.Appointmentid != null)
                    hashCode = hashCode * 59 + this.Appointmentid.GetHashCode();
                if (this.Date != null)
                    hashCode = hashCode * 59 + this.Date.GetHashCode();
                if (this.Patient != null)
                    hashCode = hashCode * 59 + this.Patient.GetHashCode();
                if (this.Startcheckoutdatetime != null)
                    hashCode = hashCode * 59 + this.Startcheckoutdatetime.GetHashCode();
                if (this.Appointmentconfirmationname != null)
                    hashCode = hashCode * 59 + this.Appointmentconfirmationname.GetHashCode();
                if (this.Useexpectedprocedurecodes != null)
                    hashCode = hashCode * 59 + this.Useexpectedprocedurecodes.GetHashCode();
                if (this.Lastmodifiedby != null)
                    hashCode = hashCode * 59 + this.Lastmodifiedby.GetHashCode();
                if (this.Patientappointmenttypename != null)
                    hashCode = hashCode * 59 + this.Patientappointmenttypename.GetHashCode();
                if (this.Starttime != null)
                    hashCode = hashCode * 59 + this.Starttime.GetHashCode();
                if (this.Stopcheckin != null)
                    hashCode = hashCode * 59 + this.Stopcheckin.GetHashCode();
                if (this.Providerid != null)
                    hashCode = hashCode * 59 + this.Providerid.GetHashCode();
                if (this.Stopexamdatetime != null)
                    hashCode = hashCode * 59 + this.Stopexamdatetime.GetHashCode();
                if (this.Renderingproviderid != null)
                    hashCode = hashCode * 59 + this.Renderingproviderid.GetHashCode();
                if (this.Supervisingproviderid != null)
                    hashCode = hashCode * 59 + this.Supervisingproviderid.GetHashCode();
                if (this.Claims != null)
                    hashCode = hashCode * 59 + this.Claims.GetHashCode();
                if (this.Patientlocationid != null)
                    hashCode = hashCode * 59 + this.Patientlocationid.GetHashCode();
                if (this.Encounterstate != null)
                    hashCode = hashCode * 59 + this.Encounterstate.GetHashCode();
                if (this.Rescheduledappointmentid != null)
                    hashCode = hashCode * 59 + this.Rescheduledappointmentid.GetHashCode();
                if (this.Referringproviderid != null)
                    hashCode = hashCode * 59 + this.Referringproviderid.GetHashCode();
                if (this.Reminderdetails != null)
                    hashCode = hashCode * 59 + this.Reminderdetails.GetHashCode();
                if (this.Templateappointmenttypeid != null)
                    hashCode = hashCode * 59 + this.Templateappointmenttypeid.GetHashCode();
                if (this.Templateappointmentid != null)
                    hashCode = hashCode * 59 + this.Templateappointmentid.GetHashCode();
                if (this.Patientid != null)
                    hashCode = hashCode * 59 + this.Patientid.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
