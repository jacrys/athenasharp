/* 
 * athenahealth More Disruption Please (MDP) API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Jacrys.AthenaSharp.Client.SwaggerDateConverter;

namespace Jacrys.AthenaSharp.Model
{
    /// <summary>
    /// PatientProcedure
    /// </summary>
    [DataContract]
        public partial class PatientProcedure :  IEquatable<PatientProcedure>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PatientProcedure" /> class.
        /// </summary>
        /// <param name="procedureid">Athena ID for this surgery (required).</param>
        /// <param name="procedurecode">Procedure code.</param>
        /// <param name="description">Surgery description for this procedure code.</param>
        /// <param name="source">Source of this procedure. Can be encounter (if performed) or historical.</param>
        /// <param name="providerid">ID of the provider that performed this procedure. Only returned for entries with source&#x3D;\&quot;encounter\&quot;..</param>
        /// <param name="note">Additional note for this surgery, if available.</param>
        /// <param name="proceduredate">Date when the surgery was performed.</param>
        public PatientProcedure(int? procedureid = default(int?), string procedurecode = default(string), string description = default(string), string source = default(string), int? providerid = default(int?), string note = default(string), string proceduredate = default(string))
        {
            // to ensure "procedureid" is required (not null)
            if (procedureid == null)
            {
                throw new InvalidDataException("procedureid is a required property for PatientProcedure and cannot be null");
            }
            else
            {
                this.Procedureid = procedureid;
            }
            this.Procedurecode = procedurecode;
            this.Description = description;
            this.Source = source;
            this.Providerid = providerid;
            this.Note = note;
            this.Proceduredate = proceduredate;
        }
        
        /// <summary>
        /// Athena ID for this surgery
        /// </summary>
        /// <value>Athena ID for this surgery</value>
        [DataMember(Name="procedureid", EmitDefaultValue=false)]
        public int? Procedureid { get; set; }

        /// <summary>
        /// Procedure code
        /// </summary>
        /// <value>Procedure code</value>
        [DataMember(Name="procedurecode", EmitDefaultValue=false)]
        public string Procedurecode { get; set; }

        /// <summary>
        /// Surgery description for this procedure code
        /// </summary>
        /// <value>Surgery description for this procedure code</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Source of this procedure. Can be encounter (if performed) or historical
        /// </summary>
        /// <value>Source of this procedure. Can be encounter (if performed) or historical</value>
        [DataMember(Name="source", EmitDefaultValue=false)]
        public string Source { get; set; }

        /// <summary>
        /// ID of the provider that performed this procedure. Only returned for entries with source&#x3D;\&quot;encounter\&quot;.
        /// </summary>
        /// <value>ID of the provider that performed this procedure. Only returned for entries with source&#x3D;\&quot;encounter\&quot;.</value>
        [DataMember(Name="providerid", EmitDefaultValue=false)]
        public int? Providerid { get; set; }

        /// <summary>
        /// Additional note for this surgery, if available
        /// </summary>
        /// <value>Additional note for this surgery, if available</value>
        [DataMember(Name="note", EmitDefaultValue=false)]
        public string Note { get; set; }

        /// <summary>
        /// Date when the surgery was performed
        /// </summary>
        /// <value>Date when the surgery was performed</value>
        [DataMember(Name="proceduredate", EmitDefaultValue=false)]
        public string Proceduredate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PatientProcedure {\n");
            sb.Append("  Procedureid: ").Append(Procedureid).Append("\n");
            sb.Append("  Procedurecode: ").Append(Procedurecode).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  Providerid: ").Append(Providerid).Append("\n");
            sb.Append("  Note: ").Append(Note).Append("\n");
            sb.Append("  Proceduredate: ").Append(Proceduredate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PatientProcedure);
        }

        /// <summary>
        /// Returns true if PatientProcedure instances are equal
        /// </summary>
        /// <param name="input">Instance of PatientProcedure to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PatientProcedure input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Procedureid == input.Procedureid ||
                    (this.Procedureid != null &&
                    this.Procedureid.Equals(input.Procedureid))
                ) && 
                (
                    this.Procedurecode == input.Procedurecode ||
                    (this.Procedurecode != null &&
                    this.Procedurecode.Equals(input.Procedurecode))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Source == input.Source ||
                    (this.Source != null &&
                    this.Source.Equals(input.Source))
                ) && 
                (
                    this.Providerid == input.Providerid ||
                    (this.Providerid != null &&
                    this.Providerid.Equals(input.Providerid))
                ) && 
                (
                    this.Note == input.Note ||
                    (this.Note != null &&
                    this.Note.Equals(input.Note))
                ) && 
                (
                    this.Proceduredate == input.Proceduredate ||
                    (this.Proceduredate != null &&
                    this.Proceduredate.Equals(input.Proceduredate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Procedureid != null)
                    hashCode = hashCode * 59 + this.Procedureid.GetHashCode();
                if (this.Procedurecode != null)
                    hashCode = hashCode * 59 + this.Procedurecode.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Source != null)
                    hashCode = hashCode * 59 + this.Source.GetHashCode();
                if (this.Providerid != null)
                    hashCode = hashCode * 59 + this.Providerid.GetHashCode();
                if (this.Note != null)
                    hashCode = hashCode * 59 + this.Note.GetHashCode();
                if (this.Proceduredate != null)
                    hashCode = hashCode * 59 + this.Proceduredate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
