/* 
 * athenahealth More Disruption Please (MDP) API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Jacrys.AthenaSharp.Client.SwaggerDateConverter;

namespace Jacrys.AthenaSharp.Model
{
    /// <summary>
    /// PercentileSpec
    /// </summary>
    [DataContract]
        public partial class PercentileSpec :  IEquatable<PercentileSpec>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PercentileSpec" /> class.
        /// </summary>
        /// <param name="high">The highest value the y value could be..</param>
        /// <param name="highordinal">Ordinal of the high value..</param>
        /// <param name="low">The lowest value that y could be..</param>
        /// <param name="lowordinal">Ordinal of the lowest value..</param>
        /// <param name="prefix">Indicator of less than or greater. Possible values: (&gt;,&lt;) .</param>
        public PercentileSpec(int? high = default(int?), string highordinal = default(string), int? low = default(int?), string lowordinal = default(string), string prefix = default(string))
        {
            this.High = high;
            this.Highordinal = highordinal;
            this.Low = low;
            this.Lowordinal = lowordinal;
            this.Prefix = prefix;
        }
        
        /// <summary>
        /// The highest value the y value could be.
        /// </summary>
        /// <value>The highest value the y value could be.</value>
        [DataMember(Name="high", EmitDefaultValue=false)]
        public int? High { get; set; }

        /// <summary>
        /// Ordinal of the high value.
        /// </summary>
        /// <value>Ordinal of the high value.</value>
        [DataMember(Name="highordinal", EmitDefaultValue=false)]
        public string Highordinal { get; set; }

        /// <summary>
        /// The lowest value that y could be.
        /// </summary>
        /// <value>The lowest value that y could be.</value>
        [DataMember(Name="low", EmitDefaultValue=false)]
        public int? Low { get; set; }

        /// <summary>
        /// Ordinal of the lowest value.
        /// </summary>
        /// <value>Ordinal of the lowest value.</value>
        [DataMember(Name="lowordinal", EmitDefaultValue=false)]
        public string Lowordinal { get; set; }

        /// <summary>
        /// Indicator of less than or greater. Possible values: (&gt;,&lt;) 
        /// </summary>
        /// <value>Indicator of less than or greater. Possible values: (&gt;,&lt;) </value>
        [DataMember(Name="prefix", EmitDefaultValue=false)]
        public string Prefix { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PercentileSpec {\n");
            sb.Append("  High: ").Append(High).Append("\n");
            sb.Append("  Highordinal: ").Append(Highordinal).Append("\n");
            sb.Append("  Low: ").Append(Low).Append("\n");
            sb.Append("  Lowordinal: ").Append(Lowordinal).Append("\n");
            sb.Append("  Prefix: ").Append(Prefix).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PercentileSpec);
        }

        /// <summary>
        /// Returns true if PercentileSpec instances are equal
        /// </summary>
        /// <param name="input">Instance of PercentileSpec to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PercentileSpec input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.High == input.High ||
                    (this.High != null &&
                    this.High.Equals(input.High))
                ) && 
                (
                    this.Highordinal == input.Highordinal ||
                    (this.Highordinal != null &&
                    this.Highordinal.Equals(input.Highordinal))
                ) && 
                (
                    this.Low == input.Low ||
                    (this.Low != null &&
                    this.Low.Equals(input.Low))
                ) && 
                (
                    this.Lowordinal == input.Lowordinal ||
                    (this.Lowordinal != null &&
                    this.Lowordinal.Equals(input.Lowordinal))
                ) && 
                (
                    this.Prefix == input.Prefix ||
                    (this.Prefix != null &&
                    this.Prefix.Equals(input.Prefix))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.High != null)
                    hashCode = hashCode * 59 + this.High.GetHashCode();
                if (this.Highordinal != null)
                    hashCode = hashCode * 59 + this.Highordinal.GetHashCode();
                if (this.Low != null)
                    hashCode = hashCode * 59 + this.Low.GetHashCode();
                if (this.Lowordinal != null)
                    hashCode = hashCode * 59 + this.Lowordinal.GetHashCode();
                if (this.Prefix != null)
                    hashCode = hashCode * 59 + this.Prefix.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
