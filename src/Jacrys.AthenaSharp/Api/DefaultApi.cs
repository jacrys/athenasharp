/*
 * athenahealth More Disruption Please (MDP) API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0.0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using Jacrys.AthenaSharp.Client;
using Jacrys.AthenaSharp.Model;
using RestSharp;

namespace Jacrys.AthenaSharp.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IDefaultApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Append text to the assessment note
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="encounterid">The encounter ID.</param>
        /// <returns>OperationStatusData</returns>
        OperationStatusData AddEncounterAssesmentText (Body8 body, int? practiceid, string apivariant, int? encounterid);

        /// <summary>
        /// Append text to the assessment note
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="encounterid">The encounter ID.</param>
        /// <returns>ApiResponse of OperationStatusData</returns>
        ApiResponse<OperationStatusData> AddEncounterAssesmentTextWithHttpInfo (Body8 body, int? practiceid, string apivariant, int? encounterid);
        /// <summary>
        /// Set Information about a single patient&#x27;s appointment by id
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="patientid"></param>
        /// <param name="appointmenttypeid"></param>
        /// <param name="bookingnote"></param>
        /// <param name="departmentid"></param>
        /// <param name="donotsendconfirmationemail"></param>
        /// <param name="ignoreschedulablepermission"></param>
        /// <param name="insurancecompany"></param>
        /// <param name="insurancegroupid"></param>
        /// <param name="insuranceidnumber"></param>
        /// <param name="insurancenote"></param>
        /// <param name="insurancephone"></param>
        /// <param name="insuranceplanname"></param>
        /// <param name="insurancepolicyholder"></param>
        /// <param name="nopatientcase"></param>
        /// <param name="reasonid"></param>
        /// <param name="urgentyn"></param>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="appointmentId">Id of the appointment.</param>
        /// <returns>AppointmentArray</returns>
        AppointmentArray BookAppointmentById (int? patientid, int? appointmenttypeid, string bookingnote, int? departmentid, bool? donotsendconfirmationemail, bool? ignoreschedulablepermission, string insurancecompany, string insurancegroupid, string insuranceidnumber, string insurancenote, string insurancephone, string insuranceplanname, string insurancepolicyholder, bool? nopatientcase, int? reasonid, bool? urgentyn, int? practiceid, string apivariant, int? appointmentId);

        /// <summary>
        /// Set Information about a single patient&#x27;s appointment by id
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="patientid"></param>
        /// <param name="appointmenttypeid"></param>
        /// <param name="bookingnote"></param>
        /// <param name="departmentid"></param>
        /// <param name="donotsendconfirmationemail"></param>
        /// <param name="ignoreschedulablepermission"></param>
        /// <param name="insurancecompany"></param>
        /// <param name="insurancegroupid"></param>
        /// <param name="insuranceidnumber"></param>
        /// <param name="insurancenote"></param>
        /// <param name="insurancephone"></param>
        /// <param name="insuranceplanname"></param>
        /// <param name="insurancepolicyholder"></param>
        /// <param name="nopatientcase"></param>
        /// <param name="reasonid"></param>
        /// <param name="urgentyn"></param>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="appointmentId">Id of the appointment.</param>
        /// <returns>ApiResponse of AppointmentArray</returns>
        ApiResponse<AppointmentArray> BookAppointmentByIdWithHttpInfo (int? patientid, int? appointmenttypeid, string bookingnote, int? departmentid, bool? donotsendconfirmationemail, bool? ignoreschedulablepermission, string insurancecompany, string insurancegroupid, string insuranceidnumber, string insurancenote, string insurancephone, string insuranceplanname, string insurancepolicyholder, bool? nopatientcase, int? reasonid, bool? urgentyn, int? practiceid, string apivariant, int? appointmentId);
        /// <summary>
        /// Cancel an existing appointment.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="patientid"></param>
        /// <param name="appointmentcancelreasonid"></param>
        /// <param name="cancellationreason"></param>
        /// <param name="departmentid"></param>
        /// <param name="ignoreschedulablepermission"></param>
        /// <param name="nopatientcase"></param>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="appointmentId">Id of the appointment.</param>
        /// <returns>OperationStatusData</returns>
        OperationStatusData CancelAppointmentById (int? patientid, int? appointmentcancelreasonid, string cancellationreason, int? departmentid, bool? ignoreschedulablepermission, bool? nopatientcase, int? practiceid, string apivariant, int? appointmentId);

        /// <summary>
        /// Cancel an existing appointment.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="patientid"></param>
        /// <param name="appointmentcancelreasonid"></param>
        /// <param name="cancellationreason"></param>
        /// <param name="departmentid"></param>
        /// <param name="ignoreschedulablepermission"></param>
        /// <param name="nopatientcase"></param>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="appointmentId">Id of the appointment.</param>
        /// <returns>ApiResponse of OperationStatusData</returns>
        ApiResponse<OperationStatusData> CancelAppointmentByIdWithHttpInfo (int? patientid, int? appointmentcancelreasonid, string cancellationreason, int? departmentid, bool? ignoreschedulablepermission, bool? nopatientcase, int? practiceid, string apivariant, int? appointmentId);
        /// <summary>
        /// Creates new appointment type
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="duration"></param>
        /// <param name="generic"></param>
        /// <param name="name"></param>
        /// <param name="patient"></param>
        /// <param name="shortname"></param>
        /// <param name="templatetypeonly"></param>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <returns>InlineResponse2001</returns>
        InlineResponse2001 CreateAppointmentType (int? duration, bool? generic, string name, bool? patient, string shortname, bool? templatetypeonly, int? practiceid, string apivariant);

        /// <summary>
        /// Creates new appointment type
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="duration"></param>
        /// <param name="generic"></param>
        /// <param name="name"></param>
        /// <param name="patient"></param>
        /// <param name="shortname"></param>
        /// <param name="templatetypeonly"></param>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        ApiResponse<InlineResponse2001> CreateAppointmentTypeWithHttpInfo (int? duration, bool? generic, string name, bool? patient, string shortname, bool? templatetypeonly, int? practiceid, string apivariant);
        /// <summary>
        /// Register new patient
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address1"></param>
        /// <param name="address2"></param>
        /// <param name="city"></param>
        /// <param name="departmentid"></param>
        /// <param name="dob"></param>
        /// <param name="email"></param>
        /// <param name="firstname"></param>
        /// <param name="homephone"></param>
        /// <param name="lastname"></param>
        /// <param name="mobilephone"></param>
        /// <param name="state"></param>
        /// <param name="zip"></param>
        /// <param name="sex"></param>
        /// <param name="race"></param>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <returns>List{PatientCreatedResponse}</returns>
        List<PatientCreatedResponse> CreatePatient (string address1, string address2, string city, int? departmentid, string dob, string email, string firstname, string homephone, string lastname, string mobilephone, string state, string zip, string sex, string race, int? practiceid, string apivariant);

        /// <summary>
        /// Register new patient
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address1"></param>
        /// <param name="address2"></param>
        /// <param name="city"></param>
        /// <param name="departmentid"></param>
        /// <param name="dob"></param>
        /// <param name="email"></param>
        /// <param name="firstname"></param>
        /// <param name="homephone"></param>
        /// <param name="lastname"></param>
        /// <param name="mobilephone"></param>
        /// <param name="state"></param>
        /// <param name="zip"></param>
        /// <param name="sex"></param>
        /// <param name="race"></param>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <returns>ApiResponse of List{PatientCreatedResponse}</returns>
        ApiResponse<List<PatientCreatedResponse>> CreatePatientWithHttpInfo (string address1, string address2, string city, int? departmentid, string dob, string email, string firstname, string homephone, string lastname, string mobilephone, string state, string zip, string sex, string race, int? practiceid, string apivariant);
        /// <summary>
        /// Create single lab result
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessionid"></param>
        /// <param name="analytes"></param>
        /// <param name="attachmentcontents"></param>
        /// <param name="attachmenttype"></param>
        /// <param name="autoclose"></param>
        /// <param name="departmentid"></param>
        /// <param name="documenttypeid"></param>
        /// <param name="facilityid"></param>
        /// <param name="internalnote"></param>
        /// <param name="interpretation"></param>
        /// <param name="observationdate"></param>
        /// <param name="observationtime"></param>
        /// <param name="priority"></param>
        /// <param name="providerid"></param>
        /// <param name="reportstatus"></param>
        /// <param name="resultstatus"></param>
        /// <param name="specimenreceiveddatetime"></param>
        /// <param name="specimenreporteddatetime"></param>
        /// <param name="tietoorderid"></param>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="patientId">Id of the patient for which get information</param>
        /// <returns>CreateLabResultDocumentResponse</returns>
        CreateLabResultDocumentResponse CreatePatientLabResultDocument (string accessionid, string analytes, string attachmentcontents, string attachmenttype, string autoclose, int? departmentid, int? documenttypeid, int? facilityid, string internalnote, string interpretation, string observationdate, string observationtime, string priority, int? providerid, string reportstatus, string resultstatus, string specimenreceiveddatetime, string specimenreporteddatetime, int? tietoorderid, int? practiceid, string apivariant, int? patientId);

        /// <summary>
        /// Create single lab result
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessionid"></param>
        /// <param name="analytes"></param>
        /// <param name="attachmentcontents"></param>
        /// <param name="attachmenttype"></param>
        /// <param name="autoclose"></param>
        /// <param name="departmentid"></param>
        /// <param name="documenttypeid"></param>
        /// <param name="facilityid"></param>
        /// <param name="internalnote"></param>
        /// <param name="interpretation"></param>
        /// <param name="observationdate"></param>
        /// <param name="observationtime"></param>
        /// <param name="priority"></param>
        /// <param name="providerid"></param>
        /// <param name="reportstatus"></param>
        /// <param name="resultstatus"></param>
        /// <param name="specimenreceiveddatetime"></param>
        /// <param name="specimenreporteddatetime"></param>
        /// <param name="tietoorderid"></param>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="patientId">Id of the patient for which get information</param>
        /// <returns>ApiResponse of CreateLabResultDocumentResponse</returns>
        ApiResponse<CreateLabResultDocumentResponse> CreatePatientLabResultDocumentWithHttpInfo (string accessionid, string analytes, string attachmentcontents, string attachmenttype, string autoclose, int? departmentid, int? documenttypeid, int? facilityid, string internalnote, string interpretation, string observationdate, string observationtime, string priority, int? providerid, string reportstatus, string resultstatus, string specimenreceiveddatetime, string specimenreporteddatetime, int? tietoorderid, int? practiceid, string apivariant, int? patientId);
        /// <summary>
        /// Adds problem to patient chart.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status"></param>
        /// <param name="startdate"></param>
        /// <param name="snomedcode"></param>
        /// <param name="departmentid"></param>
        /// <param name="note"></param>
        /// <param name="laterality"></param>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="patientId">Id of the patient for which get medications</param>
        /// <returns>CreatePatientProblemResponse</returns>
        CreatePatientProblemResponse CreatePatientProblem (string status, string startdate, int? snomedcode, int? departmentid, string note, string laterality, int? practiceid, string apivariant, int? patientId);

        /// <summary>
        /// Adds problem to patient chart.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status"></param>
        /// <param name="startdate"></param>
        /// <param name="snomedcode"></param>
        /// <param name="departmentid"></param>
        /// <param name="note"></param>
        /// <param name="laterality"></param>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="patientId">Id of the patient for which get medications</param>
        /// <returns>ApiResponse of CreatePatientProblemResponse</returns>
        ApiResponse<CreatePatientProblemResponse> CreatePatientProblemWithHttpInfo (string status, string startdate, int? snomedcode, int? departmentid, string note, string laterality, int? practiceid, string apivariant, int? patientId);
        /// <summary>
        /// Create new provider
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alternatephone"></param>
        /// <param name="ansicode"></param>
        /// <param name="billable"></param>
        /// <param name="billednamecase"></param>
        /// <param name="communicatordisplayname"></param>
        /// <param name="communicatorhomedepartment"></param>
        /// <param name="crdreferring"></param>
        /// <param name="createencounteroncheckin"></param>
        /// <param name="directaddress"></param>
        /// <param name="entitytypeid"></param>
        /// <param name="firstname"></param>
        /// <param name="hideinportal"></param>
        /// <param name="lastname"></param>
        /// <param name="medicalgroupid"></param>
        /// <param name="middleinitial"></param>
        /// <param name="namesuffix"></param>
        /// <param name="ndctatnumber"></param>
        /// <param name="npinumber"></param>
        /// <param name="practiceroleid"></param>
        /// <param name="providergroupid"></param>
        /// <param name="providerprofileid"></param>
        /// <param name="providertype"></param>
        /// <param name="reportingname"></param>
        /// <param name="scheduleresourcetypeid"></param>
        /// <param name="schedulingname"></param>
        /// <param name="schedulingnote"></param>
        /// <param name="sex"></param>
        /// <param name="signatureonfileflag"></param>
        /// <param name="specialtyid"></param>
        /// <param name="ssn"></param>
        /// <param name="staffbucket"></param>
        /// <param name="supervisingproviderid"></param>
        /// <param name="supervisingprovidertype"></param>
        /// <param name="trackmissingslips"></param>
        /// <param name="username"></param>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <returns>ProviderCreatedResponse</returns>
        ProviderCreatedResponse CreateProvider (string alternatephone, string ansicode, bool? billable, string billednamecase, string communicatordisplayname, int? communicatorhomedepartment, bool? crdreferring, bool? createencounteroncheckin, string directaddress, int? entitytypeid, string firstname, bool? hideinportal, string lastname, int? medicalgroupid, string middleinitial, string namesuffix, string ndctatnumber, long? npinumber, int? practiceroleid, int? providergroupid, string providerprofileid, string providertype, string reportingname, int? scheduleresourcetypeid, string schedulingname, string schedulingnote, string sex, bool? signatureonfileflag, string specialtyid, int? ssn, bool? staffbucket, int? supervisingproviderid, string supervisingprovidertype, bool? trackmissingslips, string username, int? practiceid, string apivariant);

        /// <summary>
        /// Create new provider
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alternatephone"></param>
        /// <param name="ansicode"></param>
        /// <param name="billable"></param>
        /// <param name="billednamecase"></param>
        /// <param name="communicatordisplayname"></param>
        /// <param name="communicatorhomedepartment"></param>
        /// <param name="crdreferring"></param>
        /// <param name="createencounteroncheckin"></param>
        /// <param name="directaddress"></param>
        /// <param name="entitytypeid"></param>
        /// <param name="firstname"></param>
        /// <param name="hideinportal"></param>
        /// <param name="lastname"></param>
        /// <param name="medicalgroupid"></param>
        /// <param name="middleinitial"></param>
        /// <param name="namesuffix"></param>
        /// <param name="ndctatnumber"></param>
        /// <param name="npinumber"></param>
        /// <param name="practiceroleid"></param>
        /// <param name="providergroupid"></param>
        /// <param name="providerprofileid"></param>
        /// <param name="providertype"></param>
        /// <param name="reportingname"></param>
        /// <param name="scheduleresourcetypeid"></param>
        /// <param name="schedulingname"></param>
        /// <param name="schedulingnote"></param>
        /// <param name="sex"></param>
        /// <param name="signatureonfileflag"></param>
        /// <param name="specialtyid"></param>
        /// <param name="ssn"></param>
        /// <param name="staffbucket"></param>
        /// <param name="supervisingproviderid"></param>
        /// <param name="supervisingprovidertype"></param>
        /// <param name="trackmissingslips"></param>
        /// <param name="username"></param>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <returns>ApiResponse of ProviderCreatedResponse</returns>
        ApiResponse<ProviderCreatedResponse> CreateProviderWithHttpInfo (string alternatephone, string ansicode, bool? billable, string billednamecase, string communicatordisplayname, int? communicatorhomedepartment, bool? crdreferring, bool? createencounteroncheckin, string directaddress, int? entitytypeid, string firstname, bool? hideinportal, string lastname, int? medicalgroupid, string middleinitial, string namesuffix, string ndctatnumber, long? npinumber, int? practiceroleid, int? providergroupid, string providerprofileid, string providertype, string reportingname, int? scheduleresourcetypeid, string schedulingname, string schedulingnote, string sex, bool? signatureonfileflag, string specialtyid, int? ssn, bool? staffbucket, int? supervisingproviderid, string supervisingprovidertype, bool? trackmissingslips, string username, int? practiceid, string apivariant);
        /// <summary>
        /// Delete information about a single patient&#x27;s appointment by id. Only open appointments can be deleted.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="appointmentId">Id of the appointment.</param>
        /// <returns>AppointmentIds</returns>
        AppointmentIds DeleteAppointmentById (int? practiceid, string apivariant, int? appointmentId);

        /// <summary>
        /// Delete information about a single patient&#x27;s appointment by id. Only open appointments can be deleted.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="appointmentId">Id of the appointment.</param>
        /// <returns>ApiResponse of AppointmentIds</returns>
        ApiResponse<AppointmentIds> DeleteAppointmentByIdWithHttpInfo (int? practiceid, string apivariant, int? appointmentId);
        /// <summary>
        /// Delete single lab result
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="patientId">Id of the patient for which get information</param>
        /// <param name="labResultId">Id of the lab result</param>
        /// <returns>DeleteLabResultDocumentResponse</returns>
        DeleteLabResultDocumentResponse DeleteePatientLabResultDocument (int? practiceid, string apivariant, int? patientId, int? labResultId);

        /// <summary>
        /// Delete single lab result
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="patientId">Id of the patient for which get information</param>
        /// <param name="labResultId">Id of the lab result</param>
        /// <returns>ApiResponse of DeleteLabResultDocumentResponse</returns>
        ApiResponse<DeleteLabResultDocumentResponse> DeleteePatientLabResultDocumentWithHttpInfo (int? practiceid, string apivariant, int? patientId, int? labResultId);
        /// <summary>
        /// Get Information about a single patient&#x27;s appointment by id
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="appointmentId">Id of the appointment.</param>
        /// <param name="ignorerestrictions">When showing patient detail for appointments, the patient information for patients with record restrictions and blocked patients will not be shown. Setting this flag to true will show that information for those patients.  (optional)</param>
        /// <param name="showclaimdetail">Include claim information, if available, associated with an appointment.  (optional)</param>
        /// <param name="showcopay">By default, the expected co-pay is returned. For performance purposes, you can set this to false and copay will not be populated.  (optional)</param>
        /// <param name="showexpectedprocedurecodes">Show the expetcted procedurecodes. (optional)</param>
        /// <param name="showinsurance">Include patient insurance information. Shows insurance packages for the appointment if any are selected, and all patient packages otherwise.  (optional)</param>
        /// <param name="showpatientdetail">Include patient information for each patient associated with an appointment. (optional)</param>
        /// <returns>Appointment</returns>
        Appointment GetAppointmentById (int? practiceid, string apivariant, int? appointmentId, bool? ignorerestrictions = null, bool? showclaimdetail = null, bool? showcopay = null, bool? showexpectedprocedurecodes = null, bool? showinsurance = null, bool? showpatientdetail = null);

        /// <summary>
        /// Get Information about a single patient&#x27;s appointment by id
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="appointmentId">Id of the appointment.</param>
        /// <param name="ignorerestrictions">When showing patient detail for appointments, the patient information for patients with record restrictions and blocked patients will not be shown. Setting this flag to true will show that information for those patients.  (optional)</param>
        /// <param name="showclaimdetail">Include claim information, if available, associated with an appointment.  (optional)</param>
        /// <param name="showcopay">By default, the expected co-pay is returned. For performance purposes, you can set this to false and copay will not be populated.  (optional)</param>
        /// <param name="showexpectedprocedurecodes">Show the expetcted procedurecodes. (optional)</param>
        /// <param name="showinsurance">Include patient insurance information. Shows insurance packages for the appointment if any are selected, and all patient packages otherwise.  (optional)</param>
        /// <param name="showpatientdetail">Include patient information for each patient associated with an appointment. (optional)</param>
        /// <returns>ApiResponse of Appointment</returns>
        ApiResponse<Appointment> GetAppointmentByIdWithHttpInfo (int? practiceid, string apivariant, int? appointmentId, bool? ignorerestrictions = null, bool? showclaimdetail = null, bool? showcopay = null, bool? showexpectedprocedurecodes = null, bool? showinsurance = null, bool? showpatientdetail = null);
        /// <summary>
        /// Get appointment types
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="hidegeneric">By default, we show both generic and non-generic types. Setting this to true will hide the generic types (and show only non-generic types). (optional)</param>
        /// <param name="hidenongeneric">By default, we show both generic and non-generic types. Setting this to true will hide non-generic types (and show only generic types). (optional)</param>
        /// <param name="hidenonpatient">This defaults to true if not specified, and thus will hide non-patient facing types. Setting this to false would thus show non-patient facing types. (optional)</param>
        /// <param name="hidetemplatetypeonly">By default, we show both \&quot;template only\&quot; and not-template only types. Setting this to true, the results will omit template only types. (\&quot;Template only\&quot; is a setting that makes the type appear in schedules, but forces users to select a non-template type upon booking.) (optional)</param>
        /// <returns>AppointmentTypeList</returns>
        AppointmentTypeList GetAppointmentTypes (int? practiceid, string apivariant, bool? hidegeneric = null, bool? hidenongeneric = null, bool? hidenonpatient = null, bool? hidetemplatetypeonly = null);

        /// <summary>
        /// Get appointment types
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="hidegeneric">By default, we show both generic and non-generic types. Setting this to true will hide the generic types (and show only non-generic types). (optional)</param>
        /// <param name="hidenongeneric">By default, we show both generic and non-generic types. Setting this to true will hide non-generic types (and show only generic types). (optional)</param>
        /// <param name="hidenonpatient">This defaults to true if not specified, and thus will hide non-patient facing types. Setting this to false would thus show non-patient facing types. (optional)</param>
        /// <param name="hidetemplatetypeonly">By default, we show both \&quot;template only\&quot; and not-template only types. Setting this to true, the results will omit template only types. (\&quot;Template only\&quot; is a setting that makes the type appear in schedules, but forces users to select a non-template type upon booking.) (optional)</param>
        /// <returns>ApiResponse of AppointmentTypeList</returns>
        ApiResponse<AppointmentTypeList> GetAppointmentTypesWithHttpInfo (int? practiceid, string apivariant, bool? hidegeneric = null, bool? hidenongeneric = null, bool? hidenonpatient = null, bool? hidetemplatetypeonly = null);
        /// <summary>
        /// Get booked appointments
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="appointmentstatus">Filter appointments by status. (optional)</param>
        /// <param name="appointmenttypeid">Filter by appointment type ID. (optional)</param>
        /// <param name="departmentid">The athenaNet department ID. (optional)</param>
        /// <param name="enddate">End of the appointment search date range (mm/dd/yyyy). Inclusive. (optional)</param>
        /// <param name="endlastmodified">Identify appointments modified prior to this date/time (mm/dd/yyyy hh:mi:ss). Inclusive. Note: This can only be used if a startlastmodified value is supplied as well.  (optional)</param>
        /// <param name="ignorerestrictions">When showing patient detail for appointments, the patient information for patients with record restrictions and blocked patients will not be shown. Setting this flag to true will show that information for those patients.  (optional)</param>
        /// <param name="patientid">The athenaNet patient ID. If operating in a Provider Group Enterprise practice, this should be the enterprise patient ID.  (optional)</param>
        /// <param name="providerid">The athenaNet provider ID. Multiple IDs (either as a comma delimited list or multiple POSTed values) are allowed. (optional)</param>
        /// <param name="scheduledenddate">End of the appointment scheduled search date range (mm/dd/yyyy). Inclusive. (optional)</param>
        /// <param name="scheduledstartdate">Start of the appointment scheduled search date range (mm/dd/yyyy). Inclusive. (optional)</param>
        /// <param name="showcancelled">Include appointments that have been cancelled. (optional)</param>
        /// <param name="showclaimdetail">Include claim information, if available, associated with an appointment.  (optional)</param>
        /// <param name="showcopay">By default, the expected co-pay is returned. For performance purposes, you can set this to false and copay will not be populated.  (optional)</param>
        /// <param name="showexpectedprocedurecodes">Show the expetcted procedurecodes. (optional)</param>
        /// <param name="showinsurance">Include patient insurance information. Shows insurance packages for the appointment if any are selected, and all patient packages otherwise.  (optional)</param>
        /// <param name="showpatientdetail">Include patient information for each patient associated with an appointment. (optional)</param>
        /// <param name="showremindercalldetail">Include all remindercall related results, if available, associated with an appointment.  (optional)</param>
        /// <param name="startdate">Start of the appointment search date range (mm/dd/yyyy). Inclusive. (optional)</param>
        /// <param name="startlastmodified">Identify appointments modified after this date/time (mm/dd/yyyy hh:mi:ss). Inclusive. (optional)</param>
        /// <returns>AppointmentList</returns>
        AppointmentList GetBookedAppointments (int? practiceid, string apivariant, string appointmentstatus = null, int? appointmenttypeid = null, int? departmentid = null, string enddate = null, string endlastmodified = null, bool? ignorerestrictions = null, int? patientid = null, string providerid = null, string scheduledenddate = null, string scheduledstartdate = null, bool? showcancelled = null, bool? showclaimdetail = null, bool? showcopay = null, bool? showexpectedprocedurecodes = null, bool? showinsurance = null, bool? showpatientdetail = null, bool? showremindercalldetail = null, string startdate = null, string startlastmodified = null);

        /// <summary>
        /// Get booked appointments
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="appointmentstatus">Filter appointments by status. (optional)</param>
        /// <param name="appointmenttypeid">Filter by appointment type ID. (optional)</param>
        /// <param name="departmentid">The athenaNet department ID. (optional)</param>
        /// <param name="enddate">End of the appointment search date range (mm/dd/yyyy). Inclusive. (optional)</param>
        /// <param name="endlastmodified">Identify appointments modified prior to this date/time (mm/dd/yyyy hh:mi:ss). Inclusive. Note: This can only be used if a startlastmodified value is supplied as well.  (optional)</param>
        /// <param name="ignorerestrictions">When showing patient detail for appointments, the patient information for patients with record restrictions and blocked patients will not be shown. Setting this flag to true will show that information for those patients.  (optional)</param>
        /// <param name="patientid">The athenaNet patient ID. If operating in a Provider Group Enterprise practice, this should be the enterprise patient ID.  (optional)</param>
        /// <param name="providerid">The athenaNet provider ID. Multiple IDs (either as a comma delimited list or multiple POSTed values) are allowed. (optional)</param>
        /// <param name="scheduledenddate">End of the appointment scheduled search date range (mm/dd/yyyy). Inclusive. (optional)</param>
        /// <param name="scheduledstartdate">Start of the appointment scheduled search date range (mm/dd/yyyy). Inclusive. (optional)</param>
        /// <param name="showcancelled">Include appointments that have been cancelled. (optional)</param>
        /// <param name="showclaimdetail">Include claim information, if available, associated with an appointment.  (optional)</param>
        /// <param name="showcopay">By default, the expected co-pay is returned. For performance purposes, you can set this to false and copay will not be populated.  (optional)</param>
        /// <param name="showexpectedprocedurecodes">Show the expetcted procedurecodes. (optional)</param>
        /// <param name="showinsurance">Include patient insurance information. Shows insurance packages for the appointment if any are selected, and all patient packages otherwise.  (optional)</param>
        /// <param name="showpatientdetail">Include patient information for each patient associated with an appointment. (optional)</param>
        /// <param name="showremindercalldetail">Include all remindercall related results, if available, associated with an appointment.  (optional)</param>
        /// <param name="startdate">Start of the appointment search date range (mm/dd/yyyy). Inclusive. (optional)</param>
        /// <param name="startlastmodified">Identify appointments modified after this date/time (mm/dd/yyyy hh:mi:ss). Inclusive. (optional)</param>
        /// <returns>ApiResponse of AppointmentList</returns>
        ApiResponse<AppointmentList> GetBookedAppointmentsWithHttpInfo (int? practiceid, string apivariant, string appointmentstatus = null, int? appointmenttypeid = null, int? departmentid = null, string enddate = null, string endlastmodified = null, bool? ignorerestrictions = null, int? patientid = null, string providerid = null, string scheduledenddate = null, string scheduledstartdate = null, bool? showcancelled = null, bool? showclaimdetail = null, bool? showcopay = null, bool? showexpectedprocedurecodes = null, bool? showinsurance = null, bool? showpatientdetail = null, bool? showremindercalldetail = null, string startdate = null, string startlastmodified = null);
        /// <summary>
        /// Get booked appointments
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="appointmentstatus">Filter appointments by status. (optional)</param>
        /// <param name="appointmenttypeid">Filter by appointment type ID. (optional)</param>
        /// <param name="departmentid">The athenaNet department ID. Multiple IDs (either as a comma delimited list or multiple POSTed values) are allowed. (optional)</param>
        /// <param name="enddate">End of the appointment search date range (mm/dd/yyyy). Inclusive. (optional)</param>
        /// <param name="endlastmodified">Identify appointments modified prior to this date/time (mm/dd/yyyy hh:mi:ss). Inclusive. Note: This can only be used if a startlastmodified value is supplied as well.  (optional)</param>
        /// <param name="ignorerestrictions">When showing patient detail for appointments, the patient information for patients with record restrictions and blocked patients will not be shown. Setting this flag to true will show that information for those patients.  (optional)</param>
        /// <param name="patientid">The athenaNet patient ID. If operating in a Provider Group Enterprise practice, this should be the enterprise patient ID.  (optional)</param>
        /// <param name="providerid">The athenaNet provider ID. Multiple IDs (either as a comma delimited list or multiple POSTed values) are allowed. (optional)</param>
        /// <param name="scheduledenddate">End of the appointment scheduled search date range (mm/dd/yyyy). Inclusive. (optional)</param>
        /// <param name="scheduledstartdate">Start of the appointment scheduled search date range (mm/dd/yyyy). Inclusive. (optional)</param>
        /// <param name="showcancelled">Include appointments that have been cancelled. (optional)</param>
        /// <param name="showclaimdetail">Include claim information, if available, associated with an appointment.  (optional)</param>
        /// <param name="showcopay">By default, the expected co-pay is returned. For performance purposes, you can set this to false and copay will not be populated.  (optional)</param>
        /// <param name="showexpectedprocedurecodes">Show the expetcted procedurecodes. (optional)</param>
        /// <param name="showinsurance">Include patient insurance information. Shows insurance packages for the appointment if any are selected, and all patient packages otherwise.  (optional)</param>
        /// <param name="showpatientdetail">Include patient information for each patient associated with an appointment. (optional)</param>
        /// <param name="showremindercalldetail">Include all remindercall related results, if available, associated with an appointment.  (optional)</param>
        /// <param name="startdate">Start of the appointment search date range (mm/dd/yyyy). Inclusive. (optional)</param>
        /// <param name="startlastmodified">Identify appointments modified after this date/time (mm/dd/yyyy hh:mi:ss). Inclusive. (optional)</param>
        /// <returns>AppointmentList</returns>
        AppointmentList GetBookedAppointmentsFromMultipleDepartments (int? practiceid, string apivariant, string appointmentstatus = null, int? appointmenttypeid = null, string departmentid = null, string enddate = null, string endlastmodified = null, bool? ignorerestrictions = null, int? patientid = null, string providerid = null, string scheduledenddate = null, string scheduledstartdate = null, bool? showcancelled = null, bool? showclaimdetail = null, bool? showcopay = null, bool? showexpectedprocedurecodes = null, bool? showinsurance = null, bool? showpatientdetail = null, bool? showremindercalldetail = null, string startdate = null, string startlastmodified = null);

        /// <summary>
        /// Get booked appointments
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="appointmentstatus">Filter appointments by status. (optional)</param>
        /// <param name="appointmenttypeid">Filter by appointment type ID. (optional)</param>
        /// <param name="departmentid">The athenaNet department ID. Multiple IDs (either as a comma delimited list or multiple POSTed values) are allowed. (optional)</param>
        /// <param name="enddate">End of the appointment search date range (mm/dd/yyyy). Inclusive. (optional)</param>
        /// <param name="endlastmodified">Identify appointments modified prior to this date/time (mm/dd/yyyy hh:mi:ss). Inclusive. Note: This can only be used if a startlastmodified value is supplied as well.  (optional)</param>
        /// <param name="ignorerestrictions">When showing patient detail for appointments, the patient information for patients with record restrictions and blocked patients will not be shown. Setting this flag to true will show that information for those patients.  (optional)</param>
        /// <param name="patientid">The athenaNet patient ID. If operating in a Provider Group Enterprise practice, this should be the enterprise patient ID.  (optional)</param>
        /// <param name="providerid">The athenaNet provider ID. Multiple IDs (either as a comma delimited list or multiple POSTed values) are allowed. (optional)</param>
        /// <param name="scheduledenddate">End of the appointment scheduled search date range (mm/dd/yyyy). Inclusive. (optional)</param>
        /// <param name="scheduledstartdate">Start of the appointment scheduled search date range (mm/dd/yyyy). Inclusive. (optional)</param>
        /// <param name="showcancelled">Include appointments that have been cancelled. (optional)</param>
        /// <param name="showclaimdetail">Include claim information, if available, associated with an appointment.  (optional)</param>
        /// <param name="showcopay">By default, the expected co-pay is returned. For performance purposes, you can set this to false and copay will not be populated.  (optional)</param>
        /// <param name="showexpectedprocedurecodes">Show the expetcted procedurecodes. (optional)</param>
        /// <param name="showinsurance">Include patient insurance information. Shows insurance packages for the appointment if any are selected, and all patient packages otherwise.  (optional)</param>
        /// <param name="showpatientdetail">Include patient information for each patient associated with an appointment. (optional)</param>
        /// <param name="showremindercalldetail">Include all remindercall related results, if available, associated with an appointment.  (optional)</param>
        /// <param name="startdate">Start of the appointment search date range (mm/dd/yyyy). Inclusive. (optional)</param>
        /// <param name="startlastmodified">Identify appointments modified after this date/time (mm/dd/yyyy hh:mi:ss). Inclusive. (optional)</param>
        /// <returns>ApiResponse of AppointmentList</returns>
        ApiResponse<AppointmentList> GetBookedAppointmentsFromMultipleDepartmentsWithHttpInfo (int? practiceid, string apivariant, string appointmentstatus = null, int? appointmenttypeid = null, string departmentid = null, string enddate = null, string endlastmodified = null, bool? ignorerestrictions = null, int? patientid = null, string providerid = null, string scheduledenddate = null, string scheduledstartdate = null, bool? showcancelled = null, bool? showclaimdetail = null, bool? showcopay = null, bool? showexpectedprocedurecodes = null, bool? showinsurance = null, bool? showpatientdetail = null, bool? showremindercalldetail = null, string startdate = null, string startlastmodified = null);
        /// <summary>
        /// Get claims
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="appointmentid">One or more appointment IDs. (optional)</param>
        /// <param name="providerid">Will match either the provider or the supervising provider. (optional)</param>
        /// <param name="departmentid">The department ID of the service department for the claims being searched for. (optional)</param>
        /// <param name="createdenddate">The claim creation date, end of range, inclusive. (optional)</param>
        /// <param name="createdstartdate">The claim creation date, start of range, inclusive. (optional)</param>
        /// <param name="patientid">The patient ID associated with the claims to search for (optional)</param>
        /// <param name="procedurecodes">One or more procedure codes (optional)</param>
        /// <param name="serviceenddate">The service date, end of range, inclusive. (optional)</param>
        /// <param name="servicestartdate">The service date, start of range, inclusive. (optional)</param>
        /// <param name="showcustomfields">Include custom fields for the claims. (optional)</param>
        /// <returns>ClaimsList</returns>
        ClaimsList GetClaims (int? practiceid, string apivariant, int? appointmentid = null, int? providerid = null, int? departmentid = null, string createdenddate = null, string createdstartdate = null, int? patientid = null, string procedurecodes = null, string serviceenddate = null, string servicestartdate = null, bool? showcustomfields = null);

        /// <summary>
        /// Get claims
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="appointmentid">One or more appointment IDs. (optional)</param>
        /// <param name="providerid">Will match either the provider or the supervising provider. (optional)</param>
        /// <param name="departmentid">The department ID of the service department for the claims being searched for. (optional)</param>
        /// <param name="createdenddate">The claim creation date, end of range, inclusive. (optional)</param>
        /// <param name="createdstartdate">The claim creation date, start of range, inclusive. (optional)</param>
        /// <param name="patientid">The patient ID associated with the claims to search for (optional)</param>
        /// <param name="procedurecodes">One or more procedure codes (optional)</param>
        /// <param name="serviceenddate">The service date, end of range, inclusive. (optional)</param>
        /// <param name="servicestartdate">The service date, start of range, inclusive. (optional)</param>
        /// <param name="showcustomfields">Include custom fields for the claims. (optional)</param>
        /// <returns>ApiResponse of ClaimsList</returns>
        ApiResponse<ClaimsList> GetClaimsWithHttpInfo (int? practiceid, string apivariant, int? appointmentid = null, int? providerid = null, int? departmentid = null, string createdenddate = null, string createdstartdate = null, int? patientid = null, string procedurecodes = null, string serviceenddate = null, string servicestartdate = null, bool? showcustomfields = null);
        /// <summary>
        /// Get department IDs
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="limit">Number of entries to return (default 1500, max 5000) (optional)</param>
        /// <param name="offset">Starting point of entries; 0-indexed (optional)</param>
        /// <param name="hospitalonly">If set to true, return hospital only departments. (optional)</param>
        /// <param name="showalldepartments">By default, departments hidden in the portal do not appear. When this is set to true, that restriction is not applied. Default is false. (optional)</param>
        /// <param name="providerlist">If set to true, list providers who see patients in this department. Default is false. (optional)</param>
        /// <returns>DepartmentList</returns>
        DepartmentList GetDepartments (int? practiceid, string apivariant, int? limit = null, int? offset = null, bool? hospitalonly = null, bool? showalldepartments = null, bool? providerlist = null);

        /// <summary>
        /// Get department IDs
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="limit">Number of entries to return (default 1500, max 5000) (optional)</param>
        /// <param name="offset">Starting point of entries; 0-indexed (optional)</param>
        /// <param name="hospitalonly">If set to true, return hospital only departments. (optional)</param>
        /// <param name="showalldepartments">By default, departments hidden in the portal do not appear. When this is set to true, that restriction is not applied. Default is false. (optional)</param>
        /// <param name="providerlist">If set to true, list providers who see patients in this department. Default is false. (optional)</param>
        /// <returns>ApiResponse of DepartmentList</returns>
        ApiResponse<DepartmentList> GetDepartmentsWithHttpInfo (int? practiceid, string apivariant, int? limit = null, int? offset = null, bool? hospitalonly = null, bool? showalldepartments = null, bool? providerlist = null);
        /// <summary>
        /// Get encounter by id.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="encounterid">The encounter ID.</param>
        /// <returns>List{Encounter}</returns>
        List<Encounter> GetEncounter (int? practiceid, string apivariant, int? encounterid);

        /// <summary>
        /// Get encounter by id.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="encounterid">The encounter ID.</param>
        /// <returns>ApiResponse of List{Encounter}</returns>
        ApiResponse<List<Encounter>> GetEncounterWithHttpInfo (int? practiceid, string apivariant, int? encounterid);
        /// <summary>
        /// Given an encounter returns the assessment text.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="encounterid">The encounter ID.</param>
        /// <returns>List{EncounterAssesmentText}</returns>
        List<EncounterAssesmentText> GetEncounterAssesmentText (int? practiceid, string apivariant, int? encounterid);

        /// <summary>
        /// Given an encounter returns the assessment text.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="encounterid">The encounter ID.</param>
        /// <returns>ApiResponse of List{EncounterAssesmentText}</returns>
        ApiResponse<List<EncounterAssesmentText>> GetEncounterAssesmentTextWithHttpInfo (int? practiceid, string apivariant, int? encounterid);
        /// <summary>
        /// Get open appointment slots
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="appointmenttypeid">Normally, an appointment reason ID should be used which will map to the correct underlying appointment type in athenaNet. This field will ignore the practice&#x27;s existing setup for what should be scheduled. Please consult with athenahealth before using. Either an appointmenttypeid or a reasonid must be specified or no results will be returned.  (optional)</param>
        /// <param name="bypassscheduletimechecks">Bypass checks that usually require returned appointments to be some amount of hours in the future (as configured by the practice, defaulting to 24 hours), and also ignores the setting that only  shows appointments for a certain number of days in the future (also configurable by the practice, defaulting to 90 days).  (optional)</param>
        /// <param name="departmentid">The athenaNet department ID. (optional)</param>
        /// <param name="enddate">End of the appointment search date range (mm/dd/yyyy). Inclusive. Defaults to seven days from startdate. (optional)</param>
        /// <param name="ignoreschedulablepermission">By default, we show only appointments that are are available to scheduled via the API. This flag allows you to bypass that restriction for viewing available appointments (but you still may not be able to schedule based on this permission!). This flag does not, however, show the full schedule (that is, appointments that are already booked).   (optional)</param>
        /// <param name="providerid">The athenaNet provider ID. Required if a reasonid other than -1 is specified. (optional)</param>
        /// <param name="reasonid">The athenaNet patient appointment reason ID, from GET /patientappointmentreasons. While this is not technically required due to some unusual use cases, it is highly recommended for most calls. We do allow a special value of -1 for the reasonid. This reasonid will return open, web-schedulable slots regardless of reason. However, slots returned using a search of -1 may return slots that are not bookable by any reason ID (they may be bookable by specific appointment type IDs instead). This argument allows multiple valid reason IDs to be specified (e.g. reasonid&#x3D;1,2,3), so if you are looking for slots that match \&quot;any\&quot; reason, it is recommended that you enumerate the set of reasons you are looking for. Either a reasonid or an appointmenttypeid must be specified or no results will be returned. If a reasonid other than -1 is specified then a providerid must also be specified.  (optional)</param>
        /// <param name="showfrozenslots">By default, we hide appointments that are frozen from being returned via the API.  This flag allows you to show frozen slots in the set of results returned.  (optional)</param>
        /// <param name="startdate">Start of the appointment search date range (mm/dd/yyyy). Inclusive. Defaults to today. (optional)</param>
        /// <returns>AppointmentList</returns>
        AppointmentList GetOpenAppointments (int? practiceid, string apivariant, int? appointmenttypeid = null, bool? bypassscheduletimechecks = null, int? departmentid = null, string enddate = null, bool? ignoreschedulablepermission = null, string providerid = null, string reasonid = null, bool? showfrozenslots = null, string startdate = null);

        /// <summary>
        /// Get open appointment slots
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="appointmenttypeid">Normally, an appointment reason ID should be used which will map to the correct underlying appointment type in athenaNet. This field will ignore the practice&#x27;s existing setup for what should be scheduled. Please consult with athenahealth before using. Either an appointmenttypeid or a reasonid must be specified or no results will be returned.  (optional)</param>
        /// <param name="bypassscheduletimechecks">Bypass checks that usually require returned appointments to be some amount of hours in the future (as configured by the practice, defaulting to 24 hours), and also ignores the setting that only  shows appointments for a certain number of days in the future (also configurable by the practice, defaulting to 90 days).  (optional)</param>
        /// <param name="departmentid">The athenaNet department ID. (optional)</param>
        /// <param name="enddate">End of the appointment search date range (mm/dd/yyyy). Inclusive. Defaults to seven days from startdate. (optional)</param>
        /// <param name="ignoreschedulablepermission">By default, we show only appointments that are are available to scheduled via the API. This flag allows you to bypass that restriction for viewing available appointments (but you still may not be able to schedule based on this permission!). This flag does not, however, show the full schedule (that is, appointments that are already booked).   (optional)</param>
        /// <param name="providerid">The athenaNet provider ID. Required if a reasonid other than -1 is specified. (optional)</param>
        /// <param name="reasonid">The athenaNet patient appointment reason ID, from GET /patientappointmentreasons. While this is not technically required due to some unusual use cases, it is highly recommended for most calls. We do allow a special value of -1 for the reasonid. This reasonid will return open, web-schedulable slots regardless of reason. However, slots returned using a search of -1 may return slots that are not bookable by any reason ID (they may be bookable by specific appointment type IDs instead). This argument allows multiple valid reason IDs to be specified (e.g. reasonid&#x3D;1,2,3), so if you are looking for slots that match \&quot;any\&quot; reason, it is recommended that you enumerate the set of reasons you are looking for. Either a reasonid or an appointmenttypeid must be specified or no results will be returned. If a reasonid other than -1 is specified then a providerid must also be specified.  (optional)</param>
        /// <param name="showfrozenslots">By default, we hide appointments that are frozen from being returned via the API.  This flag allows you to show frozen slots in the set of results returned.  (optional)</param>
        /// <param name="startdate">Start of the appointment search date range (mm/dd/yyyy). Inclusive. Defaults to today. (optional)</param>
        /// <returns>ApiResponse of AppointmentList</returns>
        ApiResponse<AppointmentList> GetOpenAppointmentsWithHttpInfo (int? practiceid, string apivariant, int? appointmenttypeid = null, bool? bypassscheduletimechecks = null, int? departmentid = null, string enddate = null, bool? ignoreschedulablepermission = null, string providerid = null, string reasonid = null, bool? showfrozenslots = null, string startdate = null);
        /// <summary>
        /// Get patient medical history
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="patientId">Id of the patient for which get medications</param>
        /// <param name="departmentid">The athenanet department ID</param>
        /// <param name="allresultsbyencounterid">ID used to return lab results for a specific encounter. (optional)</param>
        /// <param name="analyteresultstatus">Filter the results based on the analyte&#x27;s result status. Since the result status is a free text field, this list is not exhaustive, but does represent a majority of the used statuses.  (optional)</param>
        /// <param name="enddate">Filter lab orders not individual results that are on or before this date. Example: enddate&#x3D;1/21/2018. If no enddate is specified, all lab orders found since startdate will be included if specified.  (optional)</param>
        /// <param name="labresultstatus">Filter the results based on the lab result&#x27;s result status. Since the result status is a free text field, this list is not exhaustive, but does represent a majority of the used statuses.  (optional)</param>
        /// <param name="showabnormaldetails">Include the translation of the abnormalflag into HL7 code standards. (optional)</param>
        /// <param name="showhidden">Includes the lab results and analytes marked as hidden. Hidden lab results and analytes are created when they are manually entered, for example on the qm tab or in flowsheets.  (optional)</param>
        /// <param name="showtemplate">If true, interpretation template added to the document is also returned. (optional)</param>
        /// <param name="startdate">Filter lab orders not individual results that are on or after this date. Example: startdate&#x3D;6/21/2015. If no startdate is specified, all prior lab orders will be included until enddate if specified.  (optional)</param>
        /// <returns>List{AnalytesList}</returns>
        List<AnalytesList> GetPatientAnalytes (int? practiceid, string apivariant, int? patientId, int? departmentid, int? allresultsbyencounterid = null, string analyteresultstatus = null, string enddate = null, string labresultstatus = null, bool? showabnormaldetails = null, bool? showhidden = null, bool? showtemplate = null, string startdate = null);

        /// <summary>
        /// Get patient medical history
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="patientId">Id of the patient for which get medications</param>
        /// <param name="departmentid">The athenanet department ID</param>
        /// <param name="allresultsbyencounterid">ID used to return lab results for a specific encounter. (optional)</param>
        /// <param name="analyteresultstatus">Filter the results based on the analyte&#x27;s result status. Since the result status is a free text field, this list is not exhaustive, but does represent a majority of the used statuses.  (optional)</param>
        /// <param name="enddate">Filter lab orders not individual results that are on or before this date. Example: enddate&#x3D;1/21/2018. If no enddate is specified, all lab orders found since startdate will be included if specified.  (optional)</param>
        /// <param name="labresultstatus">Filter the results based on the lab result&#x27;s result status. Since the result status is a free text field, this list is not exhaustive, but does represent a majority of the used statuses.  (optional)</param>
        /// <param name="showabnormaldetails">Include the translation of the abnormalflag into HL7 code standards. (optional)</param>
        /// <param name="showhidden">Includes the lab results and analytes marked as hidden. Hidden lab results and analytes are created when they are manually entered, for example on the qm tab or in flowsheets.  (optional)</param>
        /// <param name="showtemplate">If true, interpretation template added to the document is also returned. (optional)</param>
        /// <param name="startdate">Filter lab orders not individual results that are on or after this date. Example: startdate&#x3D;6/21/2015. If no startdate is specified, all prior lab orders will be included until enddate if specified.  (optional)</param>
        /// <returns>ApiResponse of List{AnalytesList}</returns>
        ApiResponse<List<AnalytesList>> GetPatientAnalytesWithHttpInfo (int? practiceid, string apivariant, int? patientId, int? departmentid, int? allresultsbyencounterid = null, string analyteresultstatus = null, string enddate = null, string labresultstatus = null, bool? showabnormaldetails = null, bool? showhidden = null, bool? showtemplate = null, string startdate = null);
        /// <summary>
        /// Get a patient by ID
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="patientId">Id of the patient for which get information</param>
        /// <param name="departmentid">This is the ID for the department of the patient you are retrieving. If you are calling this on an enterprise practice with multiple financial groups (also called \&quot;provider groups\&quot;), this  will ensure you are retrieving the correct patient and not a copy that is in a different department.  (optional)</param>
        /// <param name="ignorerestrictions">Set to true to allow ability to find patients with record restrictions and blocked patients. This should only be used when there is no reflection to the patient at all that a match was found or not found.  (optional)</param>
        /// <param name="show2015edcehrtvalues">Use 2015 Ed. CEHRT compliant strings for describing gender identity and sexual orientation. (optional)</param>
        /// <param name="showallclaims">Include information on claims where there is no outstanding patient balance. (Only to be used when showbalancedetails is selected.)  (optional)</param>
        /// <param name="showallpatientdepartmentstatus">Include an array of all departments the patient is a part of along with all statuses for those departments. (optional)</param>
        /// <param name="showbalancedetails">Show detailed information on patient balances. (optional)</param>
        /// <param name="showcustomfields">Include custom fields for the patient. (optional)</param>
        /// <param name="showfullssn">If set, will show full SSN instead of a masked number. (optional)</param>
        /// <param name="showinsurance">Include patient insurance information. (optional)</param>
        /// <param name="showlocalpatientid">If set, will show local patient id. (optional)</param>
        /// <param name="showportalstatus">If set, will include portal enrollment status in response. (optional)</param>
        /// <returns>List{Patient}</returns>
        List<Patient> GetPatientById (int? practiceid, string apivariant, int? patientId, int? departmentid = null, bool? ignorerestrictions = null, bool? show2015edcehrtvalues = null, bool? showallclaims = null, bool? showallpatientdepartmentstatus = null, bool? showbalancedetails = null, bool? showcustomfields = null, bool? showfullssn = null, bool? showinsurance = null, bool? showlocalpatientid = null, bool? showportalstatus = null);

        /// <summary>
        /// Get a patient by ID
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="patientId">Id of the patient for which get information</param>
        /// <param name="departmentid">This is the ID for the department of the patient you are retrieving. If you are calling this on an enterprise practice with multiple financial groups (also called \&quot;provider groups\&quot;), this  will ensure you are retrieving the correct patient and not a copy that is in a different department.  (optional)</param>
        /// <param name="ignorerestrictions">Set to true to allow ability to find patients with record restrictions and blocked patients. This should only be used when there is no reflection to the patient at all that a match was found or not found.  (optional)</param>
        /// <param name="show2015edcehrtvalues">Use 2015 Ed. CEHRT compliant strings for describing gender identity and sexual orientation. (optional)</param>
        /// <param name="showallclaims">Include information on claims where there is no outstanding patient balance. (Only to be used when showbalancedetails is selected.)  (optional)</param>
        /// <param name="showallpatientdepartmentstatus">Include an array of all departments the patient is a part of along with all statuses for those departments. (optional)</param>
        /// <param name="showbalancedetails">Show detailed information on patient balances. (optional)</param>
        /// <param name="showcustomfields">Include custom fields for the patient. (optional)</param>
        /// <param name="showfullssn">If set, will show full SSN instead of a masked number. (optional)</param>
        /// <param name="showinsurance">Include patient insurance information. (optional)</param>
        /// <param name="showlocalpatientid">If set, will show local patient id. (optional)</param>
        /// <param name="showportalstatus">If set, will include portal enrollment status in response. (optional)</param>
        /// <returns>ApiResponse of List{Patient}</returns>
        ApiResponse<List<Patient>> GetPatientByIdWithHttpInfo (int? practiceid, string apivariant, int? patientId, int? departmentid = null, bool? ignorerestrictions = null, bool? show2015edcehrtvalues = null, bool? showallclaims = null, bool? showallpatientdepartmentstatus = null, bool? showbalancedetails = null, bool? showcustomfields = null, bool? showfullssn = null, bool? showinsurance = null, bool? showlocalpatientid = null, bool? showportalstatus = null);
        /// <summary>
        /// Get a patient CCDA informtion by ID
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="patientId">Id of the patient for which get information</param>
        /// <returns>List{PatientCcda}</returns>
        List<PatientCcda> GetPatientCcdaRecord (int? practiceid, string apivariant, int? patientId);

        /// <summary>
        /// Get a patient CCDA informtion by ID
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="patientId">Id of the patient for which get information</param>
        /// <returns>ApiResponse of List{PatientCcda}</returns>
        ApiResponse<List<PatientCcda>> GetPatientCcdaRecordWithHttpInfo (int? practiceid, string apivariant, int? patientId);
        /// <summary>
        /// Get encounters for the speicic patient.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="encounterid">The encounter ID.</param>
        /// <param name="allowdischargetype">If set, this will allow getting orders for a discharge encounter type. (optional)</param>
        /// <param name="showclinicalprovider">If set, this will show the information about the provider receiving the order. (optional)</param>
        /// <param name="showdeclinedorders">If set, include orders that were declined (optional)</param>
        /// <param name="showexternalcodes">If set, translate the order information to relevant external vocabularies, where available. Examples are medictions to RxNorm and NDC, vaccines to CVX and MVX, labs to LOINC, etc. Our mappings are not exhaustive.  (optional)</param>
        /// <returns>List{EncounterDiagnosesList}</returns>
        List<EncounterDiagnosesList> GetPatientEncounterOrders (int? practiceid, string apivariant, int? encounterid, bool? allowdischargetype = null, bool? showclinicalprovider = null, bool? showdeclinedorders = null, bool? showexternalcodes = null);

        /// <summary>
        /// Get encounters for the speicic patient.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="encounterid">The encounter ID.</param>
        /// <param name="allowdischargetype">If set, this will allow getting orders for a discharge encounter type. (optional)</param>
        /// <param name="showclinicalprovider">If set, this will show the information about the provider receiving the order. (optional)</param>
        /// <param name="showdeclinedorders">If set, include orders that were declined (optional)</param>
        /// <param name="showexternalcodes">If set, translate the order information to relevant external vocabularies, where available. Examples are medictions to RxNorm and NDC, vaccines to CVX and MVX, labs to LOINC, etc. Our mappings are not exhaustive.  (optional)</param>
        /// <returns>ApiResponse of List{EncounterDiagnosesList}</returns>
        ApiResponse<List<EncounterDiagnosesList>> GetPatientEncounterOrdersWithHttpInfo (int? practiceid, string apivariant, int? encounterid, bool? allowdischargetype = null, bool? showclinicalprovider = null, bool? showdeclinedorders = null, bool? showexternalcodes = null);
        /// <summary>
        /// Get encounters for the speicic patient.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="patientId">Id of the patient for which get medications</param>
        /// <param name="departmentid">The department for this patient. A patient may have multiple charts, and the department determines which chart to retrieve. </param>
        /// <param name="appointmentid">Find the encounter for this appointment. (optional)</param>
        /// <param name="providerid">The ID of the provider for this encounter (optional)</param>
        /// <param name="enddate">Omit any encounters later than this date (optional)</param>
        /// <param name="startdate">Omit any encounters earlier than this date (optional)</param>
        /// <param name="showallstatuses">By default only encounters in OPEN, CLOSED, or REVIEW status are retrieved, with this flag, encounters aren&#x27;t filtered by status.  (optional)</param>
        /// <param name="showalltypes">Retrieve all encounter types, by default only VISIT and ORDERSONLY are retrieved. (optional)</param>
        /// <param name="showdiagnoses">Query diagnosis information for every encounter (optional)</param>
        /// <returns>List{EncountersList}</returns>
        List<EncountersList> GetPatientEncounters (int? practiceid, string apivariant, int? patientId, int? departmentid, int? appointmentid = null, int? providerid = null, string enddate = null, string startdate = null, bool? showallstatuses = null, bool? showalltypes = null, bool? showdiagnoses = null);

        /// <summary>
        /// Get encounters for the speicic patient.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="patientId">Id of the patient for which get medications</param>
        /// <param name="departmentid">The department for this patient. A patient may have multiple charts, and the department determines which chart to retrieve. </param>
        /// <param name="appointmentid">Find the encounter for this appointment. (optional)</param>
        /// <param name="providerid">The ID of the provider for this encounter (optional)</param>
        /// <param name="enddate">Omit any encounters later than this date (optional)</param>
        /// <param name="startdate">Omit any encounters earlier than this date (optional)</param>
        /// <param name="showallstatuses">By default only encounters in OPEN, CLOSED, or REVIEW status are retrieved, with this flag, encounters aren&#x27;t filtered by status.  (optional)</param>
        /// <param name="showalltypes">Retrieve all encounter types, by default only VISIT and ORDERSONLY are retrieved. (optional)</param>
        /// <param name="showdiagnoses">Query diagnosis information for every encounter (optional)</param>
        /// <returns>ApiResponse of List{EncountersList}</returns>
        ApiResponse<List<EncountersList>> GetPatientEncountersWithHttpInfo (int? practiceid, string apivariant, int? patientId, int? departmentid, int? appointmentid = null, int? providerid = null, string enddate = null, string startdate = null, bool? showallstatuses = null, bool? showalltypes = null, bool? showdiagnoses = null);
        /// <summary>
        /// Get information about patient lab result document
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="patientId">Id of the patient for which get information</param>
        /// <param name="labResultId">Id of the lab result</param>
        /// <param name="showtemplate">If true, interpretation template added to the document is also returned.  (optional)</param>
        /// <returns>List{PatientLabResultDocumentDetails}</returns>
        List<PatientLabResultDocumentDetails> GetPatientLabResultDocument (int? practiceid, string apivariant, int? patientId, int? labResultId, bool? showtemplate = null);

        /// <summary>
        /// Get information about patient lab result document
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="patientId">Id of the patient for which get information</param>
        /// <param name="labResultId">Id of the lab result</param>
        /// <param name="showtemplate">If true, interpretation template added to the document is also returned.  (optional)</param>
        /// <returns>ApiResponse of List{PatientLabResultDocumentDetails}</returns>
        ApiResponse<List<PatientLabResultDocumentDetails>> GetPatientLabResultDocumentWithHttpInfo (int? practiceid, string apivariant, int? patientId, int? labResultId, bool? showtemplate = null);
        /// <summary>
        /// Get a patient lab results documents
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="patientId">Id of the patient for which get information</param>
        /// <param name="departmentid">The athenaNet department id.  (optional)</param>
        /// <param name="documentsubclass">The document subclass to filter document results.  (optional)</param>
        /// <param name="encounterid">Show only documents attached to this encounter.  (optional)</param>
        /// <param name="showdeleted">The document subclass to filter document results.  (optional)</param>
        /// <param name="showtemplate">If true, interpretation template added to the document is also returned.  (optional)</param>
        /// <param name="status">The status of the task to filter document results.  (optional)</param>
        /// <returns>PatientLabResultDocumentList</returns>
        PatientLabResultDocumentList GetPatientLabResultDocuments (int? practiceid, string apivariant, int? patientId, int? departmentid = null, string documentsubclass = null, int? encounterid = null, bool? showdeleted = null, bool? showtemplate = null, string status = null);

        /// <summary>
        /// Get a patient lab results documents
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="patientId">Id of the patient for which get information</param>
        /// <param name="departmentid">The athenaNet department id.  (optional)</param>
        /// <param name="documentsubclass">The document subclass to filter document results.  (optional)</param>
        /// <param name="encounterid">Show only documents attached to this encounter.  (optional)</param>
        /// <param name="showdeleted">The document subclass to filter document results.  (optional)</param>
        /// <param name="showtemplate">If true, interpretation template added to the document is also returned.  (optional)</param>
        /// <param name="status">The status of the task to filter document results.  (optional)</param>
        /// <returns>ApiResponse of PatientLabResultDocumentList</returns>
        ApiResponse<PatientLabResultDocumentList> GetPatientLabResultDocumentsWithHttpInfo (int? practiceid, string apivariant, int? patientId, int? departmentid = null, string documentsubclass = null, int? encounterid = null, bool? showdeleted = null, bool? showtemplate = null, string status = null);
        /// <summary>
        /// Get patient medical history
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="patientId">Id of the patient for which get medications</param>
        /// <param name="departmentid">The athenanet department ID</param>
        /// <param name="allresultsbyencounterid">ID used to return lab results for a specific encounter. (optional)</param>
        /// <param name="analyteresultstatus">Filter the results based on the analyte&#x27;s result status. Since the result status is a free text field, this list is not exhaustive, but does represent a majority of the used statuses.  (optional)</param>
        /// <param name="enddate">Filter lab orders not individual results that are on or before this date. Example: enddate&#x3D;1/21/2018. If no enddate is specified, all lab orders found since startdate will be included if specified.  (optional)</param>
        /// <param name="labresultstatus">Filter the results based on the lab result&#x27;s result status. Since the result status is a free text field, this list is not exhaustive, but does represent a majority of the used statuses.  (optional)</param>
        /// <param name="showabnormaldetails">Include the translation of the abnormalflag into HL7 code standards. (optional)</param>
        /// <param name="showhidden">Includes the lab results and analytes marked as hidden. Hidden lab results and analytes are created when they are manually entered, for example on the qm tab or in flowsheets.  (optional)</param>
        /// <param name="showtemplate">If true, interpretation template added to the document is also returned. (optional)</param>
        /// <param name="startdate">Filter lab orders not individual results that are on or after this date. Example: startdate&#x3D;6/21/2015. If no startdate is specified, all prior lab orders will be included until enddate if specified.  (optional)</param>
        /// <returns>LabResultList</returns>
        LabResultList GetPatientLabResults (int? practiceid, string apivariant, int? patientId, int? departmentid, int? allresultsbyencounterid = null, string analyteresultstatus = null, string enddate = null, string labresultstatus = null, bool? showabnormaldetails = null, bool? showhidden = null, bool? showtemplate = null, string startdate = null);

        /// <summary>
        /// Get patient medical history
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="patientId">Id of the patient for which get medications</param>
        /// <param name="departmentid">The athenanet department ID</param>
        /// <param name="allresultsbyencounterid">ID used to return lab results for a specific encounter. (optional)</param>
        /// <param name="analyteresultstatus">Filter the results based on the analyte&#x27;s result status. Since the result status is a free text field, this list is not exhaustive, but does represent a majority of the used statuses.  (optional)</param>
        /// <param name="enddate">Filter lab orders not individual results that are on or before this date. Example: enddate&#x3D;1/21/2018. If no enddate is specified, all lab orders found since startdate will be included if specified.  (optional)</param>
        /// <param name="labresultstatus">Filter the results based on the lab result&#x27;s result status. Since the result status is a free text field, this list is not exhaustive, but does represent a majority of the used statuses.  (optional)</param>
        /// <param name="showabnormaldetails">Include the translation of the abnormalflag into HL7 code standards. (optional)</param>
        /// <param name="showhidden">Includes the lab results and analytes marked as hidden. Hidden lab results and analytes are created when they are manually entered, for example on the qm tab or in flowsheets.  (optional)</param>
        /// <param name="showtemplate">If true, interpretation template added to the document is also returned. (optional)</param>
        /// <param name="startdate">Filter lab orders not individual results that are on or after this date. Example: startdate&#x3D;6/21/2015. If no startdate is specified, all prior lab orders will be included until enddate if specified.  (optional)</param>
        /// <returns>ApiResponse of LabResultList</returns>
        ApiResponse<LabResultList> GetPatientLabResultsWithHttpInfo (int? practiceid, string apivariant, int? patientId, int? departmentid, int? allresultsbyencounterid = null, string analyteresultstatus = null, string enddate = null, string labresultstatus = null, bool? showabnormaldetails = null, bool? showhidden = null, bool? showtemplate = null, string startdate = null);
        /// <summary>
        /// Get patient medical history
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="patientId">Id of the patient for which get medications</param>
        /// <param name="departmentid">The athenanet department ID</param>
        /// <returns>PatientMedicalHistory</returns>
        PatientMedicalHistory GetPatientMedicalHistory (int? practiceid, string apivariant, int? patientId, int? departmentid);

        /// <summary>
        /// Get patient medical history
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="patientId">Id of the patient for which get medications</param>
        /// <param name="departmentid">The athenanet department ID</param>
        /// <returns>ApiResponse of PatientMedicalHistory</returns>
        ApiResponse<PatientMedicalHistory> GetPatientMedicalHistoryWithHttpInfo (int? practiceid, string apivariant, int? patientId, int? departmentid);
        /// <summary>
        /// Get patient medications
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="patientId">Id of the patient for which get medications</param>
        /// <param name="departmentid">The athenanet department ID</param>
        /// <param name="medicationtype">Historical or Active or Denied. Will return a list of a patient&#x27;s active or historical or denied medications. (optional)</param>
        /// <param name="showndc">Shows the list of NDC numbers related to the medication. (optional)</param>
        /// <param name="showpend">Include pending medications associated with approved future orders. These medications have not yet been submitted. (optional)</param>
        /// <param name="showrxnorm">Shows the list of RxNorm Identifiers related to the medication. The list may contain both branded and generic identifiers. (optional)</param>
        /// <returns>PatientMedication</returns>
        PatientMedication GetPatientMedications (int? practiceid, string apivariant, int? patientId, int? departmentid, string medicationtype = null, bool? showndc = null, bool? showpend = null, bool? showrxnorm = null);

        /// <summary>
        /// Get patient medications
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="patientId">Id of the patient for which get medications</param>
        /// <param name="departmentid">The athenanet department ID</param>
        /// <param name="medicationtype">Historical or Active or Denied. Will return a list of a patient&#x27;s active or historical or denied medications. (optional)</param>
        /// <param name="showndc">Shows the list of NDC numbers related to the medication. (optional)</param>
        /// <param name="showpend">Include pending medications associated with approved future orders. These medications have not yet been submitted. (optional)</param>
        /// <param name="showrxnorm">Shows the list of RxNorm Identifiers related to the medication. The list may contain both branded and generic identifiers. (optional)</param>
        /// <returns>ApiResponse of PatientMedication</returns>
        ApiResponse<PatientMedication> GetPatientMedicationsWithHttpInfo (int? practiceid, string apivariant, int? patientId, int? departmentid, string medicationtype = null, bool? showndc = null, bool? showpend = null, bool? showrxnorm = null);
        /// <summary>
        /// Get patient medical history
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="patientId">Id of the patient for which get medications</param>
        /// <param name="departmentid">The department for this patient. A patient may have multiple charts, and the department determines which chart to retrieve. </param>
        /// <param name="showdiagnosisinfo">If true, will include every encounter and associated diagnosis with each problem.  Also fills the bestmatchicd10code field with the best conversion from the problem SNOMED  code to ICD10 code if there is no user-selected ICD10 code in an encounter diagnosis event. Please note that the bestmatchicd10code may not always be accurate.  (optional)</param>
        /// <param name="showinactive">Also show inactive (but not soft deleted) problems. (optional)</param>
        /// <returns>ProblemsList</returns>
        ProblemsList GetPatientProblems (int? practiceid, string apivariant, int? patientId, int? departmentid, bool? showdiagnosisinfo = null, bool? showinactive = null);

        /// <summary>
        /// Get patient medical history
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="patientId">Id of the patient for which get medications</param>
        /// <param name="departmentid">The department for this patient. A patient may have multiple charts, and the department determines which chart to retrieve. </param>
        /// <param name="showdiagnosisinfo">If true, will include every encounter and associated diagnosis with each problem.  Also fills the bestmatchicd10code field with the best conversion from the problem SNOMED  code to ICD10 code if there is no user-selected ICD10 code in an encounter diagnosis event. Please note that the bestmatchicd10code may not always be accurate.  (optional)</param>
        /// <param name="showinactive">Also show inactive (but not soft deleted) problems. (optional)</param>
        /// <returns>ApiResponse of ProblemsList</returns>
        ApiResponse<ProblemsList> GetPatientProblemsWithHttpInfo (int? practiceid, string apivariant, int? patientId, int? departmentid, bool? showdiagnosisinfo = null, bool? showinactive = null);
        /// <summary>
        /// List of social history data for this patient.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="patientId">Id of the patient for which get medications</param>
        /// <param name="departmentid">The department for this patient. A patient may have multiple charts, and the department determines which chart to retrieve. </param>
        /// <param name="recipientcategory">The intended audience for the data. If given, questions marked as confidential for this audience will be withheld.   (optional)</param>
        /// <param name="shownotperformedquestions">Include questions that the provider did not perform. (optional)</param>
        /// <param name="showunansweredquestions">Include questions where there is no current answer. (optional)</param>
        /// <returns>SocialHistoryList</returns>
        SocialHistoryList GetPatientSocialHistory (int? practiceid, string apivariant, int? patientId, int? departmentid, string recipientcategory = null, bool? shownotperformedquestions = null, bool? showunansweredquestions = null);

        /// <summary>
        /// List of social history data for this patient.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="patientId">Id of the patient for which get medications</param>
        /// <param name="departmentid">The department for this patient. A patient may have multiple charts, and the department determines which chart to retrieve. </param>
        /// <param name="recipientcategory">The intended audience for the data. If given, questions marked as confidential for this audience will be withheld.   (optional)</param>
        /// <param name="shownotperformedquestions">Include questions that the provider did not perform. (optional)</param>
        /// <param name="showunansweredquestions">Include questions where there is no current answer. (optional)</param>
        /// <returns>ApiResponse of SocialHistoryList</returns>
        ApiResponse<SocialHistoryList> GetPatientSocialHistoryWithHttpInfo (int? practiceid, string apivariant, int? patientId, int? departmentid, string recipientcategory = null, bool? shownotperformedquestions = null, bool? showunansweredquestions = null);
        /// <summary>
        /// Get patient medical history
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="patientId">Id of the patient for which get medications</param>
        /// <param name="departmentid">The department for this patient. A patient may have multiple charts, and the department determines which chart to retrieve. </param>
        /// <returns>ProceduresList</returns>
        ProceduresList GetPatientSurgicalHistory (int? practiceid, string apivariant, int? patientId, int? departmentid);

        /// <summary>
        /// Get patient medical history
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="patientId">Id of the patient for which get medications</param>
        /// <param name="departmentid">The department for this patient. A patient may have multiple charts, and the department determines which chart to retrieve. </param>
        /// <returns>ApiResponse of ProceduresList</returns>
        ApiResponse<ProceduresList> GetPatientSurgicalHistoryWithHttpInfo (int? practiceid, string apivariant, int? patientId, int? departmentid);
        /// <summary>
        /// Get patient medical history
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="patientId">Id of the patient for which get medications</param>
        /// <param name="departmentid">The department for this patient. A patient may have multiple charts, and the department determines which chart to retrieve. </param>
        /// <param name="enddate">Only retrieve vitals that were taking on or before this date  (optional)</param>
        /// <param name="showemptyvitals">Show configured vitals that have no readings for this patient. (optional)</param>
        /// <param name="startdate">Only retrieve vitals that were taking on or after this date  (optional)</param>
        /// <returns>VitalsList</returns>
        VitalsList GetPatientVitals (int? practiceid, string apivariant, int? patientId, int? departmentid, string enddate = null, bool? showemptyvitals = null, string startdate = null);

        /// <summary>
        /// Get patient medical history
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="patientId">Id of the patient for which get medications</param>
        /// <param name="departmentid">The department for this patient. A patient may have multiple charts, and the department determines which chart to retrieve. </param>
        /// <param name="enddate">Only retrieve vitals that were taking on or before this date  (optional)</param>
        /// <param name="showemptyvitals">Show configured vitals that have no readings for this patient. (optional)</param>
        /// <param name="startdate">Only retrieve vitals that were taking on or after this date  (optional)</param>
        /// <returns>ApiResponse of VitalsList</returns>
        ApiResponse<VitalsList> GetPatientVitalsWithHttpInfo (int? practiceid, string apivariant, int? patientId, int? departmentid, string enddate = null, bool? showemptyvitals = null, string startdate = null);
        /// <summary>
        /// Search for patients
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="departmentid">Primary (registration) department ID. (optional)</param>
        /// <param name="firstname">First name of the patient to find. (optional)</param>
        /// <param name="lastname">Last name of the patient to find. (optional)</param>
        /// <returns>PatientList</returns>
        PatientList GetPatients (int? practiceid, string apivariant, int? departmentid = null, string firstname = null, string lastname = null);

        /// <summary>
        /// Search for patients
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="departmentid">Primary (registration) department ID. (optional)</param>
        /// <param name="firstname">First name of the patient to find. (optional)</param>
        /// <param name="lastname">Last name of the patient to find. (optional)</param>
        /// <returns>ApiResponse of PatientList</returns>
        ApiResponse<PatientList> GetPatientsWithHttpInfo (int? practiceid, string apivariant, int? departmentid = null, string firstname = null, string lastname = null);
        /// <summary>
        /// Get available practice IDs
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="limit">Number of entries to return (default 1500, max 5000) (optional)</param>
        /// <param name="offset">Starting point of entries; 0-indexed (optional)</param>
        /// <returns>PracticeList</returns>
        PracticeList GetPracticeInfo (int? practiceid, string apivariant, int? limit = null, int? offset = null);

        /// <summary>
        /// Get available practice IDs
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="limit">Number of entries to return (default 1500, max 5000) (optional)</param>
        /// <param name="offset">Starting point of entries; 0-indexed (optional)</param>
        /// <returns>ApiResponse of PracticeList</returns>
        ApiResponse<PracticeList> GetPracticeInfoWithHttpInfo (int? practiceid, string apivariant, int? limit = null, int? offset = null);
        /// <summary>
        /// Get a providers
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="providerId">Id of the provider for which get information</param>
        /// <param name="showallproviderids">In athenaNet&#x27;s internal data structures, a single provider can be represented by multiple IDs. These IDs are used in certain external messages (e.g. HL7) and thus these IDs may need to be known by the API user as well. When set to true, a list of all of these ancillary IDs will be provided.  (optional)</param>
        /// <param name="showfederalidnumber">Include the provider&#x27;s federal ID number in results.  (optional)</param>
        /// <param name="showusualdepartmentguessthreshold">There are situations where determining where a provider \&quot;normally\&quot; practices is desired. Unfortuantely, there is no such concept in athenaNet since providers often practice in multiple locations. However, we can use some intelligence to determine this by looking back over the previous few months (90 days) to see actual practice. To enable this, set this value between 0 and 1; it is highly recommended to be at least .5. This is the ratio of appointments in a given department to the total number of appointments for that provider. A value of .5 means \&quot;the provider&#x27;s appointments are 50% in the department guessed.\&quot; Setting this to 1 would only return a department if ALL of the provider&#x27;s appointments were in one department.  (optional)</param>
        /// <returns>List{Provider}</returns>
        List<Provider> GetProviderById (int? practiceid, string apivariant, int? providerId, bool? showallproviderids = null, int? showfederalidnumber = null, decimal? showusualdepartmentguessthreshold = null);

        /// <summary>
        /// Get a providers
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="providerId">Id of the provider for which get information</param>
        /// <param name="showallproviderids">In athenaNet&#x27;s internal data structures, a single provider can be represented by multiple IDs. These IDs are used in certain external messages (e.g. HL7) and thus these IDs may need to be known by the API user as well. When set to true, a list of all of these ancillary IDs will be provided.  (optional)</param>
        /// <param name="showfederalidnumber">Include the provider&#x27;s federal ID number in results.  (optional)</param>
        /// <param name="showusualdepartmentguessthreshold">There are situations where determining where a provider \&quot;normally\&quot; practices is desired. Unfortuantely, there is no such concept in athenaNet since providers often practice in multiple locations. However, we can use some intelligence to determine this by looking back over the previous few months (90 days) to see actual practice. To enable this, set this value between 0 and 1; it is highly recommended to be at least .5. This is the ratio of appointments in a given department to the total number of appointments for that provider. A value of .5 means \&quot;the provider&#x27;s appointments are 50% in the department guessed.\&quot; Setting this to 1 would only return a department if ALL of the provider&#x27;s appointments were in one department.  (optional)</param>
        /// <returns>ApiResponse of List{Provider}</returns>
        ApiResponse<List<Provider>> GetProviderByIdWithHttpInfo (int? practiceid, string apivariant, int? providerId, bool? showallproviderids = null, int? showfederalidnumber = null, decimal? showusualdepartmentguessthreshold = null);
        /// <summary>
        /// Get a providers
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="name">Id of the patient for which get information (optional)</param>
        /// <param name="providertype">The provider type to filter the results on. Valid provider type values can be found by using GET /reference/providertypes. (optional)</param>
        /// <param name="showallproviderids">In athenaNet&#x27;s internal data structures, a single provider can be represented by multiple IDs. These IDs are used in certain external messages (e.g. HL7) and thus these IDs may need to be known by the API user as well. When set to true, a list of all of these ancillary IDs will be provided.  (optional)</param>
        /// <param name="showusualdepartmentguessthreshold">There are situations where determining where a provider \&quot;normally\&quot; practices is desired. Unfortuantely, there is no such concept in athenaNet since providers often practice in multiple locations. However, we can use some intelligence to determine this by looking back over the previous few months (90 days) to see actual practice. To enable this, set this value between 0 and 1; it is highly recommended to be at least .5. This is the ratio of appointments in a given department to the total number of appointments for that provider. A value of .5 means \&quot;the provider&#x27;s appointments are 50% in the department guessed.\&quot; Setting this to 1 would only return a department if ALL of the provider&#x27;s appointments were in one department.  (optional)</param>
        /// <returns>ProviderList</returns>
        ProviderList GetProviders (int? practiceid, string apivariant, string name = null, string providertype = null, bool? showallproviderids = null, int? showusualdepartmentguessthreshold = null);

        /// <summary>
        /// Get a providers
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="name">Id of the patient for which get information (optional)</param>
        /// <param name="providertype">The provider type to filter the results on. Valid provider type values can be found by using GET /reference/providertypes. (optional)</param>
        /// <param name="showallproviderids">In athenaNet&#x27;s internal data structures, a single provider can be represented by multiple IDs. These IDs are used in certain external messages (e.g. HL7) and thus these IDs may need to be known by the API user as well. When set to true, a list of all of these ancillary IDs will be provided.  (optional)</param>
        /// <param name="showusualdepartmentguessthreshold">There are situations where determining where a provider \&quot;normally\&quot; practices is desired. Unfortuantely, there is no such concept in athenaNet since providers often practice in multiple locations. However, we can use some intelligence to determine this by looking back over the previous few months (90 days) to see actual practice. To enable this, set this value between 0 and 1; it is highly recommended to be at least .5. This is the ratio of appointments in a given department to the total number of appointments for that provider. A value of .5 means \&quot;the provider&#x27;s appointments are 50% in the department guessed.\&quot; Setting this to 1 would only return a department if ALL of the provider&#x27;s appointments were in one department.  (optional)</param>
        /// <returns>ApiResponse of ProviderList</returns>
        ApiResponse<ProviderList> GetProvidersWithHttpInfo (int? practiceid, string apivariant, string name = null, string providertype = null, bool? showallproviderids = null, int? showusualdepartmentguessthreshold = null);
        /// <summary>
        /// Provides the ability to add new open appointment slots
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appointmentdate"></param>
        /// <param name="appointmenttime"></param>
        /// <param name="appointmenttypeid"></param>
        /// <param name="departmentid"></param>
        /// <param name="providerid"></param>
        /// <param name="reasonid"></param>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <returns>InlineResponse200</returns>
        InlineResponse200 OpenNewAppointment (string appointmentdate, string appointmenttime, int? appointmenttypeid, int? departmentid, int? providerid, int? reasonid, int? practiceid, string apivariant);

        /// <summary>
        /// Provides the ability to add new open appointment slots
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appointmentdate"></param>
        /// <param name="appointmenttime"></param>
        /// <param name="appointmenttypeid"></param>
        /// <param name="departmentid"></param>
        /// <param name="providerid"></param>
        /// <param name="reasonid"></param>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        ApiResponse<InlineResponse200> OpenNewAppointmentWithHttpInfo (string appointmentdate, string appointmenttime, int? appointmenttypeid, int? departmentid, int? providerid, int? reasonid, int? practiceid, string apivariant);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Append text to the assessment note
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="encounterid">The encounter ID.</param>
        /// <returns>Task of OperationStatusData</returns>
        System.Threading.Tasks.Task<OperationStatusData> AddEncounterAssesmentTextAsync (Body8 body, int? practiceid, string apivariant, int? encounterid);

        /// <summary>
        /// Append text to the assessment note
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="encounterid">The encounter ID.</param>
        /// <returns>Task of ApiResponse (OperationStatusData)</returns>
        System.Threading.Tasks.Task<ApiResponse<OperationStatusData>> AddEncounterAssesmentTextAsyncWithHttpInfo (Body8 body, int? practiceid, string apivariant, int? encounterid);
        /// <summary>
        /// Set Information about a single patient&#x27;s appointment by id
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="patientid"></param>
        /// <param name="appointmenttypeid"></param>
        /// <param name="bookingnote"></param>
        /// <param name="departmentid"></param>
        /// <param name="donotsendconfirmationemail"></param>
        /// <param name="ignoreschedulablepermission"></param>
        /// <param name="insurancecompany"></param>
        /// <param name="insurancegroupid"></param>
        /// <param name="insuranceidnumber"></param>
        /// <param name="insurancenote"></param>
        /// <param name="insurancephone"></param>
        /// <param name="insuranceplanname"></param>
        /// <param name="insurancepolicyholder"></param>
        /// <param name="nopatientcase"></param>
        /// <param name="reasonid"></param>
        /// <param name="urgentyn"></param>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="appointmentId">Id of the appointment.</param>
        /// <returns>Task of AppointmentArray</returns>
        System.Threading.Tasks.Task<AppointmentArray> BookAppointmentByIdAsync (int? patientid, int? appointmenttypeid, string bookingnote, int? departmentid, bool? donotsendconfirmationemail, bool? ignoreschedulablepermission, string insurancecompany, string insurancegroupid, string insuranceidnumber, string insurancenote, string insurancephone, string insuranceplanname, string insurancepolicyholder, bool? nopatientcase, int? reasonid, bool? urgentyn, int? practiceid, string apivariant, int? appointmentId);

        /// <summary>
        /// Set Information about a single patient&#x27;s appointment by id
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="patientid"></param>
        /// <param name="appointmenttypeid"></param>
        /// <param name="bookingnote"></param>
        /// <param name="departmentid"></param>
        /// <param name="donotsendconfirmationemail"></param>
        /// <param name="ignoreschedulablepermission"></param>
        /// <param name="insurancecompany"></param>
        /// <param name="insurancegroupid"></param>
        /// <param name="insuranceidnumber"></param>
        /// <param name="insurancenote"></param>
        /// <param name="insurancephone"></param>
        /// <param name="insuranceplanname"></param>
        /// <param name="insurancepolicyholder"></param>
        /// <param name="nopatientcase"></param>
        /// <param name="reasonid"></param>
        /// <param name="urgentyn"></param>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="appointmentId">Id of the appointment.</param>
        /// <returns>Task of ApiResponse (AppointmentArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<AppointmentArray>> BookAppointmentByIdAsyncWithHttpInfo (int? patientid, int? appointmenttypeid, string bookingnote, int? departmentid, bool? donotsendconfirmationemail, bool? ignoreschedulablepermission, string insurancecompany, string insurancegroupid, string insuranceidnumber, string insurancenote, string insurancephone, string insuranceplanname, string insurancepolicyholder, bool? nopatientcase, int? reasonid, bool? urgentyn, int? practiceid, string apivariant, int? appointmentId);
        /// <summary>
        /// Cancel an existing appointment.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="patientid"></param>
        /// <param name="appointmentcancelreasonid"></param>
        /// <param name="cancellationreason"></param>
        /// <param name="departmentid"></param>
        /// <param name="ignoreschedulablepermission"></param>
        /// <param name="nopatientcase"></param>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="appointmentId">Id of the appointment.</param>
        /// <returns>Task of OperationStatusData</returns>
        System.Threading.Tasks.Task<OperationStatusData> CancelAppointmentByIdAsync (int? patientid, int? appointmentcancelreasonid, string cancellationreason, int? departmentid, bool? ignoreschedulablepermission, bool? nopatientcase, int? practiceid, string apivariant, int? appointmentId);

        /// <summary>
        /// Cancel an existing appointment.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="patientid"></param>
        /// <param name="appointmentcancelreasonid"></param>
        /// <param name="cancellationreason"></param>
        /// <param name="departmentid"></param>
        /// <param name="ignoreschedulablepermission"></param>
        /// <param name="nopatientcase"></param>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="appointmentId">Id of the appointment.</param>
        /// <returns>Task of ApiResponse (OperationStatusData)</returns>
        System.Threading.Tasks.Task<ApiResponse<OperationStatusData>> CancelAppointmentByIdAsyncWithHttpInfo (int? patientid, int? appointmentcancelreasonid, string cancellationreason, int? departmentid, bool? ignoreschedulablepermission, bool? nopatientcase, int? practiceid, string apivariant, int? appointmentId);
        /// <summary>
        /// Creates new appointment type
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="duration"></param>
        /// <param name="generic"></param>
        /// <param name="name"></param>
        /// <param name="patient"></param>
        /// <param name="shortname"></param>
        /// <param name="templatetypeonly"></param>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <returns>Task of InlineResponse2001</returns>
        System.Threading.Tasks.Task<InlineResponse2001> CreateAppointmentTypeAsync (int? duration, bool? generic, string name, bool? patient, string shortname, bool? templatetypeonly, int? practiceid, string apivariant);

        /// <summary>
        /// Creates new appointment type
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="duration"></param>
        /// <param name="generic"></param>
        /// <param name="name"></param>
        /// <param name="patient"></param>
        /// <param name="shortname"></param>
        /// <param name="templatetypeonly"></param>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> CreateAppointmentTypeAsyncWithHttpInfo (int? duration, bool? generic, string name, bool? patient, string shortname, bool? templatetypeonly, int? practiceid, string apivariant);
        /// <summary>
        /// Register new patient
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address1"></param>
        /// <param name="address2"></param>
        /// <param name="city"></param>
        /// <param name="departmentid"></param>
        /// <param name="dob"></param>
        /// <param name="email"></param>
        /// <param name="firstname"></param>
        /// <param name="homephone"></param>
        /// <param name="lastname"></param>
        /// <param name="mobilephone"></param>
        /// <param name="state"></param>
        /// <param name="zip"></param>
        /// <param name="sex"></param>
        /// <param name="race"></param>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <returns>Task of List{PatientCreatedResponse}</returns>
        System.Threading.Tasks.Task<List<PatientCreatedResponse>> CreatePatientAsync (string address1, string address2, string city, int? departmentid, string dob, string email, string firstname, string homephone, string lastname, string mobilephone, string state, string zip, string sex, string race, int? practiceid, string apivariant);

        /// <summary>
        /// Register new patient
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address1"></param>
        /// <param name="address2"></param>
        /// <param name="city"></param>
        /// <param name="departmentid"></param>
        /// <param name="dob"></param>
        /// <param name="email"></param>
        /// <param name="firstname"></param>
        /// <param name="homephone"></param>
        /// <param name="lastname"></param>
        /// <param name="mobilephone"></param>
        /// <param name="state"></param>
        /// <param name="zip"></param>
        /// <param name="sex"></param>
        /// <param name="race"></param>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <returns>Task of ApiResponse (List{PatientCreatedResponse})</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PatientCreatedResponse>>> CreatePatientAsyncWithHttpInfo (string address1, string address2, string city, int? departmentid, string dob, string email, string firstname, string homephone, string lastname, string mobilephone, string state, string zip, string sex, string race, int? practiceid, string apivariant);
        /// <summary>
        /// Create single lab result
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessionid"></param>
        /// <param name="analytes"></param>
        /// <param name="attachmentcontents"></param>
        /// <param name="attachmenttype"></param>
        /// <param name="autoclose"></param>
        /// <param name="departmentid"></param>
        /// <param name="documenttypeid"></param>
        /// <param name="facilityid"></param>
        /// <param name="internalnote"></param>
        /// <param name="interpretation"></param>
        /// <param name="observationdate"></param>
        /// <param name="observationtime"></param>
        /// <param name="priority"></param>
        /// <param name="providerid"></param>
        /// <param name="reportstatus"></param>
        /// <param name="resultstatus"></param>
        /// <param name="specimenreceiveddatetime"></param>
        /// <param name="specimenreporteddatetime"></param>
        /// <param name="tietoorderid"></param>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="patientId">Id of the patient for which get information</param>
        /// <returns>Task of CreateLabResultDocumentResponse</returns>
        System.Threading.Tasks.Task<CreateLabResultDocumentResponse> CreatePatientLabResultDocumentAsync (string accessionid, string analytes, string attachmentcontents, string attachmenttype, string autoclose, int? departmentid, int? documenttypeid, int? facilityid, string internalnote, string interpretation, string observationdate, string observationtime, string priority, int? providerid, string reportstatus, string resultstatus, string specimenreceiveddatetime, string specimenreporteddatetime, int? tietoorderid, int? practiceid, string apivariant, int? patientId);

        /// <summary>
        /// Create single lab result
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessionid"></param>
        /// <param name="analytes"></param>
        /// <param name="attachmentcontents"></param>
        /// <param name="attachmenttype"></param>
        /// <param name="autoclose"></param>
        /// <param name="departmentid"></param>
        /// <param name="documenttypeid"></param>
        /// <param name="facilityid"></param>
        /// <param name="internalnote"></param>
        /// <param name="interpretation"></param>
        /// <param name="observationdate"></param>
        /// <param name="observationtime"></param>
        /// <param name="priority"></param>
        /// <param name="providerid"></param>
        /// <param name="reportstatus"></param>
        /// <param name="resultstatus"></param>
        /// <param name="specimenreceiveddatetime"></param>
        /// <param name="specimenreporteddatetime"></param>
        /// <param name="tietoorderid"></param>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="patientId">Id of the patient for which get information</param>
        /// <returns>Task of ApiResponse (CreateLabResultDocumentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateLabResultDocumentResponse>> CreatePatientLabResultDocumentAsyncWithHttpInfo (string accessionid, string analytes, string attachmentcontents, string attachmenttype, string autoclose, int? departmentid, int? documenttypeid, int? facilityid, string internalnote, string interpretation, string observationdate, string observationtime, string priority, int? providerid, string reportstatus, string resultstatus, string specimenreceiveddatetime, string specimenreporteddatetime, int? tietoorderid, int? practiceid, string apivariant, int? patientId);
        /// <summary>
        /// Adds problem to patient chart.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status"></param>
        /// <param name="startdate"></param>
        /// <param name="snomedcode"></param>
        /// <param name="departmentid"></param>
        /// <param name="note"></param>
        /// <param name="laterality"></param>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="patientId">Id of the patient for which get medications</param>
        /// <returns>Task of CreatePatientProblemResponse</returns>
        System.Threading.Tasks.Task<CreatePatientProblemResponse> CreatePatientProblemAsync (string status, string startdate, int? snomedcode, int? departmentid, string note, string laterality, int? practiceid, string apivariant, int? patientId);

        /// <summary>
        /// Adds problem to patient chart.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status"></param>
        /// <param name="startdate"></param>
        /// <param name="snomedcode"></param>
        /// <param name="departmentid"></param>
        /// <param name="note"></param>
        /// <param name="laterality"></param>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="patientId">Id of the patient for which get medications</param>
        /// <returns>Task of ApiResponse (CreatePatientProblemResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreatePatientProblemResponse>> CreatePatientProblemAsyncWithHttpInfo (string status, string startdate, int? snomedcode, int? departmentid, string note, string laterality, int? practiceid, string apivariant, int? patientId);
        /// <summary>
        /// Create new provider
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alternatephone"></param>
        /// <param name="ansicode"></param>
        /// <param name="billable"></param>
        /// <param name="billednamecase"></param>
        /// <param name="communicatordisplayname"></param>
        /// <param name="communicatorhomedepartment"></param>
        /// <param name="crdreferring"></param>
        /// <param name="createencounteroncheckin"></param>
        /// <param name="directaddress"></param>
        /// <param name="entitytypeid"></param>
        /// <param name="firstname"></param>
        /// <param name="hideinportal"></param>
        /// <param name="lastname"></param>
        /// <param name="medicalgroupid"></param>
        /// <param name="middleinitial"></param>
        /// <param name="namesuffix"></param>
        /// <param name="ndctatnumber"></param>
        /// <param name="npinumber"></param>
        /// <param name="practiceroleid"></param>
        /// <param name="providergroupid"></param>
        /// <param name="providerprofileid"></param>
        /// <param name="providertype"></param>
        /// <param name="reportingname"></param>
        /// <param name="scheduleresourcetypeid"></param>
        /// <param name="schedulingname"></param>
        /// <param name="schedulingnote"></param>
        /// <param name="sex"></param>
        /// <param name="signatureonfileflag"></param>
        /// <param name="specialtyid"></param>
        /// <param name="ssn"></param>
        /// <param name="staffbucket"></param>
        /// <param name="supervisingproviderid"></param>
        /// <param name="supervisingprovidertype"></param>
        /// <param name="trackmissingslips"></param>
        /// <param name="username"></param>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <returns>Task of ProviderCreatedResponse</returns>
        System.Threading.Tasks.Task<ProviderCreatedResponse> CreateProviderAsync (string alternatephone, string ansicode, bool? billable, string billednamecase, string communicatordisplayname, int? communicatorhomedepartment, bool? crdreferring, bool? createencounteroncheckin, string directaddress, int? entitytypeid, string firstname, bool? hideinportal, string lastname, int? medicalgroupid, string middleinitial, string namesuffix, string ndctatnumber, long? npinumber, int? practiceroleid, int? providergroupid, string providerprofileid, string providertype, string reportingname, int? scheduleresourcetypeid, string schedulingname, string schedulingnote, string sex, bool? signatureonfileflag, string specialtyid, int? ssn, bool? staffbucket, int? supervisingproviderid, string supervisingprovidertype, bool? trackmissingslips, string username, int? practiceid, string apivariant);

        /// <summary>
        /// Create new provider
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alternatephone"></param>
        /// <param name="ansicode"></param>
        /// <param name="billable"></param>
        /// <param name="billednamecase"></param>
        /// <param name="communicatordisplayname"></param>
        /// <param name="communicatorhomedepartment"></param>
        /// <param name="crdreferring"></param>
        /// <param name="createencounteroncheckin"></param>
        /// <param name="directaddress"></param>
        /// <param name="entitytypeid"></param>
        /// <param name="firstname"></param>
        /// <param name="hideinportal"></param>
        /// <param name="lastname"></param>
        /// <param name="medicalgroupid"></param>
        /// <param name="middleinitial"></param>
        /// <param name="namesuffix"></param>
        /// <param name="ndctatnumber"></param>
        /// <param name="npinumber"></param>
        /// <param name="practiceroleid"></param>
        /// <param name="providergroupid"></param>
        /// <param name="providerprofileid"></param>
        /// <param name="providertype"></param>
        /// <param name="reportingname"></param>
        /// <param name="scheduleresourcetypeid"></param>
        /// <param name="schedulingname"></param>
        /// <param name="schedulingnote"></param>
        /// <param name="sex"></param>
        /// <param name="signatureonfileflag"></param>
        /// <param name="specialtyid"></param>
        /// <param name="ssn"></param>
        /// <param name="staffbucket"></param>
        /// <param name="supervisingproviderid"></param>
        /// <param name="supervisingprovidertype"></param>
        /// <param name="trackmissingslips"></param>
        /// <param name="username"></param>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <returns>Task of ApiResponse (ProviderCreatedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProviderCreatedResponse>> CreateProviderAsyncWithHttpInfo (string alternatephone, string ansicode, bool? billable, string billednamecase, string communicatordisplayname, int? communicatorhomedepartment, bool? crdreferring, bool? createencounteroncheckin, string directaddress, int? entitytypeid, string firstname, bool? hideinportal, string lastname, int? medicalgroupid, string middleinitial, string namesuffix, string ndctatnumber, long? npinumber, int? practiceroleid, int? providergroupid, string providerprofileid, string providertype, string reportingname, int? scheduleresourcetypeid, string schedulingname, string schedulingnote, string sex, bool? signatureonfileflag, string specialtyid, int? ssn, bool? staffbucket, int? supervisingproviderid, string supervisingprovidertype, bool? trackmissingslips, string username, int? practiceid, string apivariant);
        /// <summary>
        /// Delete information about a single patient&#x27;s appointment by id. Only open appointments can be deleted.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="appointmentId">Id of the appointment.</param>
        /// <returns>Task of AppointmentIds</returns>
        System.Threading.Tasks.Task<AppointmentIds> DeleteAppointmentByIdAsync (int? practiceid, string apivariant, int? appointmentId);

        /// <summary>
        /// Delete information about a single patient&#x27;s appointment by id. Only open appointments can be deleted.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="appointmentId">Id of the appointment.</param>
        /// <returns>Task of ApiResponse (AppointmentIds)</returns>
        System.Threading.Tasks.Task<ApiResponse<AppointmentIds>> DeleteAppointmentByIdAsyncWithHttpInfo (int? practiceid, string apivariant, int? appointmentId);
        /// <summary>
        /// Delete single lab result
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="patientId">Id of the patient for which get information</param>
        /// <param name="labResultId">Id of the lab result</param>
        /// <returns>Task of DeleteLabResultDocumentResponse</returns>
        System.Threading.Tasks.Task<DeleteLabResultDocumentResponse> DeleteePatientLabResultDocumentAsync (int? practiceid, string apivariant, int? patientId, int? labResultId);

        /// <summary>
        /// Delete single lab result
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="patientId">Id of the patient for which get information</param>
        /// <param name="labResultId">Id of the lab result</param>
        /// <returns>Task of ApiResponse (DeleteLabResultDocumentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteLabResultDocumentResponse>> DeleteePatientLabResultDocumentAsyncWithHttpInfo (int? practiceid, string apivariant, int? patientId, int? labResultId);
        /// <summary>
        /// Get Information about a single patient&#x27;s appointment by id
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="appointmentId">Id of the appointment.</param>
        /// <param name="ignorerestrictions">When showing patient detail for appointments, the patient information for patients with record restrictions and blocked patients will not be shown. Setting this flag to true will show that information for those patients.  (optional)</param>
        /// <param name="showclaimdetail">Include claim information, if available, associated with an appointment.  (optional)</param>
        /// <param name="showcopay">By default, the expected co-pay is returned. For performance purposes, you can set this to false and copay will not be populated.  (optional)</param>
        /// <param name="showexpectedprocedurecodes">Show the expetcted procedurecodes. (optional)</param>
        /// <param name="showinsurance">Include patient insurance information. Shows insurance packages for the appointment if any are selected, and all patient packages otherwise.  (optional)</param>
        /// <param name="showpatientdetail">Include patient information for each patient associated with an appointment. (optional)</param>
        /// <returns>Task of Appointment</returns>
        System.Threading.Tasks.Task<Appointment> GetAppointmentByIdAsync (int? practiceid, string apivariant, int? appointmentId, bool? ignorerestrictions = null, bool? showclaimdetail = null, bool? showcopay = null, bool? showexpectedprocedurecodes = null, bool? showinsurance = null, bool? showpatientdetail = null);

        /// <summary>
        /// Get Information about a single patient&#x27;s appointment by id
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="appointmentId">Id of the appointment.</param>
        /// <param name="ignorerestrictions">When showing patient detail for appointments, the patient information for patients with record restrictions and blocked patients will not be shown. Setting this flag to true will show that information for those patients.  (optional)</param>
        /// <param name="showclaimdetail">Include claim information, if available, associated with an appointment.  (optional)</param>
        /// <param name="showcopay">By default, the expected co-pay is returned. For performance purposes, you can set this to false and copay will not be populated.  (optional)</param>
        /// <param name="showexpectedprocedurecodes">Show the expetcted procedurecodes. (optional)</param>
        /// <param name="showinsurance">Include patient insurance information. Shows insurance packages for the appointment if any are selected, and all patient packages otherwise.  (optional)</param>
        /// <param name="showpatientdetail">Include patient information for each patient associated with an appointment. (optional)</param>
        /// <returns>Task of ApiResponse (Appointment)</returns>
        System.Threading.Tasks.Task<ApiResponse<Appointment>> GetAppointmentByIdAsyncWithHttpInfo (int? practiceid, string apivariant, int? appointmentId, bool? ignorerestrictions = null, bool? showclaimdetail = null, bool? showcopay = null, bool? showexpectedprocedurecodes = null, bool? showinsurance = null, bool? showpatientdetail = null);
        /// <summary>
        /// Get appointment types
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="hidegeneric">By default, we show both generic and non-generic types. Setting this to true will hide the generic types (and show only non-generic types). (optional)</param>
        /// <param name="hidenongeneric">By default, we show both generic and non-generic types. Setting this to true will hide non-generic types (and show only generic types). (optional)</param>
        /// <param name="hidenonpatient">This defaults to true if not specified, and thus will hide non-patient facing types. Setting this to false would thus show non-patient facing types. (optional)</param>
        /// <param name="hidetemplatetypeonly">By default, we show both \&quot;template only\&quot; and not-template only types. Setting this to true, the results will omit template only types. (\&quot;Template only\&quot; is a setting that makes the type appear in schedules, but forces users to select a non-template type upon booking.) (optional)</param>
        /// <returns>Task of AppointmentTypeList</returns>
        System.Threading.Tasks.Task<AppointmentTypeList> GetAppointmentTypesAsync (int? practiceid, string apivariant, bool? hidegeneric = null, bool? hidenongeneric = null, bool? hidenonpatient = null, bool? hidetemplatetypeonly = null);

        /// <summary>
        /// Get appointment types
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="hidegeneric">By default, we show both generic and non-generic types. Setting this to true will hide the generic types (and show only non-generic types). (optional)</param>
        /// <param name="hidenongeneric">By default, we show both generic and non-generic types. Setting this to true will hide non-generic types (and show only generic types). (optional)</param>
        /// <param name="hidenonpatient">This defaults to true if not specified, and thus will hide non-patient facing types. Setting this to false would thus show non-patient facing types. (optional)</param>
        /// <param name="hidetemplatetypeonly">By default, we show both \&quot;template only\&quot; and not-template only types. Setting this to true, the results will omit template only types. (\&quot;Template only\&quot; is a setting that makes the type appear in schedules, but forces users to select a non-template type upon booking.) (optional)</param>
        /// <returns>Task of ApiResponse (AppointmentTypeList)</returns>
        System.Threading.Tasks.Task<ApiResponse<AppointmentTypeList>> GetAppointmentTypesAsyncWithHttpInfo (int? practiceid, string apivariant, bool? hidegeneric = null, bool? hidenongeneric = null, bool? hidenonpatient = null, bool? hidetemplatetypeonly = null);
        /// <summary>
        /// Get booked appointments
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="appointmentstatus">Filter appointments by status. (optional)</param>
        /// <param name="appointmenttypeid">Filter by appointment type ID. (optional)</param>
        /// <param name="departmentid">The athenaNet department ID. (optional)</param>
        /// <param name="enddate">End of the appointment search date range (mm/dd/yyyy). Inclusive. (optional)</param>
        /// <param name="endlastmodified">Identify appointments modified prior to this date/time (mm/dd/yyyy hh:mi:ss). Inclusive. Note: This can only be used if a startlastmodified value is supplied as well.  (optional)</param>
        /// <param name="ignorerestrictions">When showing patient detail for appointments, the patient information for patients with record restrictions and blocked patients will not be shown. Setting this flag to true will show that information for those patients.  (optional)</param>
        /// <param name="patientid">The athenaNet patient ID. If operating in a Provider Group Enterprise practice, this should be the enterprise patient ID.  (optional)</param>
        /// <param name="providerid">The athenaNet provider ID. Multiple IDs (either as a comma delimited list or multiple POSTed values) are allowed. (optional)</param>
        /// <param name="scheduledenddate">End of the appointment scheduled search date range (mm/dd/yyyy). Inclusive. (optional)</param>
        /// <param name="scheduledstartdate">Start of the appointment scheduled search date range (mm/dd/yyyy). Inclusive. (optional)</param>
        /// <param name="showcancelled">Include appointments that have been cancelled. (optional)</param>
        /// <param name="showclaimdetail">Include claim information, if available, associated with an appointment.  (optional)</param>
        /// <param name="showcopay">By default, the expected co-pay is returned. For performance purposes, you can set this to false and copay will not be populated.  (optional)</param>
        /// <param name="showexpectedprocedurecodes">Show the expetcted procedurecodes. (optional)</param>
        /// <param name="showinsurance">Include patient insurance information. Shows insurance packages for the appointment if any are selected, and all patient packages otherwise.  (optional)</param>
        /// <param name="showpatientdetail">Include patient information for each patient associated with an appointment. (optional)</param>
        /// <param name="showremindercalldetail">Include all remindercall related results, if available, associated with an appointment.  (optional)</param>
        /// <param name="startdate">Start of the appointment search date range (mm/dd/yyyy). Inclusive. (optional)</param>
        /// <param name="startlastmodified">Identify appointments modified after this date/time (mm/dd/yyyy hh:mi:ss). Inclusive. (optional)</param>
        /// <returns>Task of AppointmentList</returns>
        System.Threading.Tasks.Task<AppointmentList> GetBookedAppointmentsAsync (int? practiceid, string apivariant, string appointmentstatus = null, int? appointmenttypeid = null, int? departmentid = null, string enddate = null, string endlastmodified = null, bool? ignorerestrictions = null, int? patientid = null, string providerid = null, string scheduledenddate = null, string scheduledstartdate = null, bool? showcancelled = null, bool? showclaimdetail = null, bool? showcopay = null, bool? showexpectedprocedurecodes = null, bool? showinsurance = null, bool? showpatientdetail = null, bool? showremindercalldetail = null, string startdate = null, string startlastmodified = null);

        /// <summary>
        /// Get booked appointments
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="appointmentstatus">Filter appointments by status. (optional)</param>
        /// <param name="appointmenttypeid">Filter by appointment type ID. (optional)</param>
        /// <param name="departmentid">The athenaNet department ID. (optional)</param>
        /// <param name="enddate">End of the appointment search date range (mm/dd/yyyy). Inclusive. (optional)</param>
        /// <param name="endlastmodified">Identify appointments modified prior to this date/time (mm/dd/yyyy hh:mi:ss). Inclusive. Note: This can only be used if a startlastmodified value is supplied as well.  (optional)</param>
        /// <param name="ignorerestrictions">When showing patient detail for appointments, the patient information for patients with record restrictions and blocked patients will not be shown. Setting this flag to true will show that information for those patients.  (optional)</param>
        /// <param name="patientid">The athenaNet patient ID. If operating in a Provider Group Enterprise practice, this should be the enterprise patient ID.  (optional)</param>
        /// <param name="providerid">The athenaNet provider ID. Multiple IDs (either as a comma delimited list or multiple POSTed values) are allowed. (optional)</param>
        /// <param name="scheduledenddate">End of the appointment scheduled search date range (mm/dd/yyyy). Inclusive. (optional)</param>
        /// <param name="scheduledstartdate">Start of the appointment scheduled search date range (mm/dd/yyyy). Inclusive. (optional)</param>
        /// <param name="showcancelled">Include appointments that have been cancelled. (optional)</param>
        /// <param name="showclaimdetail">Include claim information, if available, associated with an appointment.  (optional)</param>
        /// <param name="showcopay">By default, the expected co-pay is returned. For performance purposes, you can set this to false and copay will not be populated.  (optional)</param>
        /// <param name="showexpectedprocedurecodes">Show the expetcted procedurecodes. (optional)</param>
        /// <param name="showinsurance">Include patient insurance information. Shows insurance packages for the appointment if any are selected, and all patient packages otherwise.  (optional)</param>
        /// <param name="showpatientdetail">Include patient information for each patient associated with an appointment. (optional)</param>
        /// <param name="showremindercalldetail">Include all remindercall related results, if available, associated with an appointment.  (optional)</param>
        /// <param name="startdate">Start of the appointment search date range (mm/dd/yyyy). Inclusive. (optional)</param>
        /// <param name="startlastmodified">Identify appointments modified after this date/time (mm/dd/yyyy hh:mi:ss). Inclusive. (optional)</param>
        /// <returns>Task of ApiResponse (AppointmentList)</returns>
        System.Threading.Tasks.Task<ApiResponse<AppointmentList>> GetBookedAppointmentsAsyncWithHttpInfo (int? practiceid, string apivariant, string appointmentstatus = null, int? appointmenttypeid = null, int? departmentid = null, string enddate = null, string endlastmodified = null, bool? ignorerestrictions = null, int? patientid = null, string providerid = null, string scheduledenddate = null, string scheduledstartdate = null, bool? showcancelled = null, bool? showclaimdetail = null, bool? showcopay = null, bool? showexpectedprocedurecodes = null, bool? showinsurance = null, bool? showpatientdetail = null, bool? showremindercalldetail = null, string startdate = null, string startlastmodified = null);
        /// <summary>
        /// Get booked appointments
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="appointmentstatus">Filter appointments by status. (optional)</param>
        /// <param name="appointmenttypeid">Filter by appointment type ID. (optional)</param>
        /// <param name="departmentid">The athenaNet department ID. Multiple IDs (either as a comma delimited list or multiple POSTed values) are allowed. (optional)</param>
        /// <param name="enddate">End of the appointment search date range (mm/dd/yyyy). Inclusive. (optional)</param>
        /// <param name="endlastmodified">Identify appointments modified prior to this date/time (mm/dd/yyyy hh:mi:ss). Inclusive. Note: This can only be used if a startlastmodified value is supplied as well.  (optional)</param>
        /// <param name="ignorerestrictions">When showing patient detail for appointments, the patient information for patients with record restrictions and blocked patients will not be shown. Setting this flag to true will show that information for those patients.  (optional)</param>
        /// <param name="patientid">The athenaNet patient ID. If operating in a Provider Group Enterprise practice, this should be the enterprise patient ID.  (optional)</param>
        /// <param name="providerid">The athenaNet provider ID. Multiple IDs (either as a comma delimited list or multiple POSTed values) are allowed. (optional)</param>
        /// <param name="scheduledenddate">End of the appointment scheduled search date range (mm/dd/yyyy). Inclusive. (optional)</param>
        /// <param name="scheduledstartdate">Start of the appointment scheduled search date range (mm/dd/yyyy). Inclusive. (optional)</param>
        /// <param name="showcancelled">Include appointments that have been cancelled. (optional)</param>
        /// <param name="showclaimdetail">Include claim information, if available, associated with an appointment.  (optional)</param>
        /// <param name="showcopay">By default, the expected co-pay is returned. For performance purposes, you can set this to false and copay will not be populated.  (optional)</param>
        /// <param name="showexpectedprocedurecodes">Show the expetcted procedurecodes. (optional)</param>
        /// <param name="showinsurance">Include patient insurance information. Shows insurance packages for the appointment if any are selected, and all patient packages otherwise.  (optional)</param>
        /// <param name="showpatientdetail">Include patient information for each patient associated with an appointment. (optional)</param>
        /// <param name="showremindercalldetail">Include all remindercall related results, if available, associated with an appointment.  (optional)</param>
        /// <param name="startdate">Start of the appointment search date range (mm/dd/yyyy). Inclusive. (optional)</param>
        /// <param name="startlastmodified">Identify appointments modified after this date/time (mm/dd/yyyy hh:mi:ss). Inclusive. (optional)</param>
        /// <returns>Task of AppointmentList</returns>
        System.Threading.Tasks.Task<AppointmentList> GetBookedAppointmentsFromMultipleDepartmentsAsync (int? practiceid, string apivariant, string appointmentstatus = null, int? appointmenttypeid = null, string departmentid = null, string enddate = null, string endlastmodified = null, bool? ignorerestrictions = null, int? patientid = null, string providerid = null, string scheduledenddate = null, string scheduledstartdate = null, bool? showcancelled = null, bool? showclaimdetail = null, bool? showcopay = null, bool? showexpectedprocedurecodes = null, bool? showinsurance = null, bool? showpatientdetail = null, bool? showremindercalldetail = null, string startdate = null, string startlastmodified = null);

        /// <summary>
        /// Get booked appointments
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="appointmentstatus">Filter appointments by status. (optional)</param>
        /// <param name="appointmenttypeid">Filter by appointment type ID. (optional)</param>
        /// <param name="departmentid">The athenaNet department ID. Multiple IDs (either as a comma delimited list or multiple POSTed values) are allowed. (optional)</param>
        /// <param name="enddate">End of the appointment search date range (mm/dd/yyyy). Inclusive. (optional)</param>
        /// <param name="endlastmodified">Identify appointments modified prior to this date/time (mm/dd/yyyy hh:mi:ss). Inclusive. Note: This can only be used if a startlastmodified value is supplied as well.  (optional)</param>
        /// <param name="ignorerestrictions">When showing patient detail for appointments, the patient information for patients with record restrictions and blocked patients will not be shown. Setting this flag to true will show that information for those patients.  (optional)</param>
        /// <param name="patientid">The athenaNet patient ID. If operating in a Provider Group Enterprise practice, this should be the enterprise patient ID.  (optional)</param>
        /// <param name="providerid">The athenaNet provider ID. Multiple IDs (either as a comma delimited list or multiple POSTed values) are allowed. (optional)</param>
        /// <param name="scheduledenddate">End of the appointment scheduled search date range (mm/dd/yyyy). Inclusive. (optional)</param>
        /// <param name="scheduledstartdate">Start of the appointment scheduled search date range (mm/dd/yyyy). Inclusive. (optional)</param>
        /// <param name="showcancelled">Include appointments that have been cancelled. (optional)</param>
        /// <param name="showclaimdetail">Include claim information, if available, associated with an appointment.  (optional)</param>
        /// <param name="showcopay">By default, the expected co-pay is returned. For performance purposes, you can set this to false and copay will not be populated.  (optional)</param>
        /// <param name="showexpectedprocedurecodes">Show the expetcted procedurecodes. (optional)</param>
        /// <param name="showinsurance">Include patient insurance information. Shows insurance packages for the appointment if any are selected, and all patient packages otherwise.  (optional)</param>
        /// <param name="showpatientdetail">Include patient information for each patient associated with an appointment. (optional)</param>
        /// <param name="showremindercalldetail">Include all remindercall related results, if available, associated with an appointment.  (optional)</param>
        /// <param name="startdate">Start of the appointment search date range (mm/dd/yyyy). Inclusive. (optional)</param>
        /// <param name="startlastmodified">Identify appointments modified after this date/time (mm/dd/yyyy hh:mi:ss). Inclusive. (optional)</param>
        /// <returns>Task of ApiResponse (AppointmentList)</returns>
        System.Threading.Tasks.Task<ApiResponse<AppointmentList>> GetBookedAppointmentsFromMultipleDepartmentsAsyncWithHttpInfo (int? practiceid, string apivariant, string appointmentstatus = null, int? appointmenttypeid = null, string departmentid = null, string enddate = null, string endlastmodified = null, bool? ignorerestrictions = null, int? patientid = null, string providerid = null, string scheduledenddate = null, string scheduledstartdate = null, bool? showcancelled = null, bool? showclaimdetail = null, bool? showcopay = null, bool? showexpectedprocedurecodes = null, bool? showinsurance = null, bool? showpatientdetail = null, bool? showremindercalldetail = null, string startdate = null, string startlastmodified = null);
        /// <summary>
        /// Get claims
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="appointmentid">One or more appointment IDs. (optional)</param>
        /// <param name="providerid">Will match either the provider or the supervising provider. (optional)</param>
        /// <param name="departmentid">The department ID of the service department for the claims being searched for. (optional)</param>
        /// <param name="createdenddate">The claim creation date, end of range, inclusive. (optional)</param>
        /// <param name="createdstartdate">The claim creation date, start of range, inclusive. (optional)</param>
        /// <param name="patientid">The patient ID associated with the claims to search for (optional)</param>
        /// <param name="procedurecodes">One or more procedure codes (optional)</param>
        /// <param name="serviceenddate">The service date, end of range, inclusive. (optional)</param>
        /// <param name="servicestartdate">The service date, start of range, inclusive. (optional)</param>
        /// <param name="showcustomfields">Include custom fields for the claims. (optional)</param>
        /// <returns>Task of ClaimsList</returns>
        System.Threading.Tasks.Task<ClaimsList> GetClaimsAsync (int? practiceid, string apivariant, int? appointmentid = null, int? providerid = null, int? departmentid = null, string createdenddate = null, string createdstartdate = null, int? patientid = null, string procedurecodes = null, string serviceenddate = null, string servicestartdate = null, bool? showcustomfields = null);

        /// <summary>
        /// Get claims
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="appointmentid">One or more appointment IDs. (optional)</param>
        /// <param name="providerid">Will match either the provider or the supervising provider. (optional)</param>
        /// <param name="departmentid">The department ID of the service department for the claims being searched for. (optional)</param>
        /// <param name="createdenddate">The claim creation date, end of range, inclusive. (optional)</param>
        /// <param name="createdstartdate">The claim creation date, start of range, inclusive. (optional)</param>
        /// <param name="patientid">The patient ID associated with the claims to search for (optional)</param>
        /// <param name="procedurecodes">One or more procedure codes (optional)</param>
        /// <param name="serviceenddate">The service date, end of range, inclusive. (optional)</param>
        /// <param name="servicestartdate">The service date, start of range, inclusive. (optional)</param>
        /// <param name="showcustomfields">Include custom fields for the claims. (optional)</param>
        /// <returns>Task of ApiResponse (ClaimsList)</returns>
        System.Threading.Tasks.Task<ApiResponse<ClaimsList>> GetClaimsAsyncWithHttpInfo (int? practiceid, string apivariant, int? appointmentid = null, int? providerid = null, int? departmentid = null, string createdenddate = null, string createdstartdate = null, int? patientid = null, string procedurecodes = null, string serviceenddate = null, string servicestartdate = null, bool? showcustomfields = null);
        /// <summary>
        /// Get department IDs
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="limit">Number of entries to return (default 1500, max 5000) (optional)</param>
        /// <param name="offset">Starting point of entries; 0-indexed (optional)</param>
        /// <param name="hospitalonly">If set to true, return hospital only departments. (optional)</param>
        /// <param name="showalldepartments">By default, departments hidden in the portal do not appear. When this is set to true, that restriction is not applied. Default is false. (optional)</param>
        /// <param name="providerlist">If set to true, list providers who see patients in this department. Default is false. (optional)</param>
        /// <returns>Task of DepartmentList</returns>
        System.Threading.Tasks.Task<DepartmentList> GetDepartmentsAsync (int? practiceid, string apivariant, int? limit = null, int? offset = null, bool? hospitalonly = null, bool? showalldepartments = null, bool? providerlist = null);

        /// <summary>
        /// Get department IDs
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="limit">Number of entries to return (default 1500, max 5000) (optional)</param>
        /// <param name="offset">Starting point of entries; 0-indexed (optional)</param>
        /// <param name="hospitalonly">If set to true, return hospital only departments. (optional)</param>
        /// <param name="showalldepartments">By default, departments hidden in the portal do not appear. When this is set to true, that restriction is not applied. Default is false. (optional)</param>
        /// <param name="providerlist">If set to true, list providers who see patients in this department. Default is false. (optional)</param>
        /// <returns>Task of ApiResponse (DepartmentList)</returns>
        System.Threading.Tasks.Task<ApiResponse<DepartmentList>> GetDepartmentsAsyncWithHttpInfo (int? practiceid, string apivariant, int? limit = null, int? offset = null, bool? hospitalonly = null, bool? showalldepartments = null, bool? providerlist = null);
        /// <summary>
        /// Get encounter by id.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="encounterid">The encounter ID.</param>
        /// <returns>Task of List{Encounter}</returns>
        System.Threading.Tasks.Task<List<Encounter>> GetEncounterAsync (int? practiceid, string apivariant, int? encounterid);

        /// <summary>
        /// Get encounter by id.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="encounterid">The encounter ID.</param>
        /// <returns>Task of ApiResponse (List{Encounter})</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Encounter>>> GetEncounterAsyncWithHttpInfo (int? practiceid, string apivariant, int? encounterid);
        /// <summary>
        /// Given an encounter returns the assessment text.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="encounterid">The encounter ID.</param>
        /// <returns>Task of List{EncounterAssesmentText}</returns>
        System.Threading.Tasks.Task<List<EncounterAssesmentText>> GetEncounterAssesmentTextAsync (int? practiceid, string apivariant, int? encounterid);

        /// <summary>
        /// Given an encounter returns the assessment text.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="encounterid">The encounter ID.</param>
        /// <returns>Task of ApiResponse (List{EncounterAssesmentText})</returns>
        System.Threading.Tasks.Task<ApiResponse<List<EncounterAssesmentText>>> GetEncounterAssesmentTextAsyncWithHttpInfo (int? practiceid, string apivariant, int? encounterid);
        /// <summary>
        /// Get open appointment slots
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="appointmenttypeid">Normally, an appointment reason ID should be used which will map to the correct underlying appointment type in athenaNet. This field will ignore the practice&#x27;s existing setup for what should be scheduled. Please consult with athenahealth before using. Either an appointmenttypeid or a reasonid must be specified or no results will be returned.  (optional)</param>
        /// <param name="bypassscheduletimechecks">Bypass checks that usually require returned appointments to be some amount of hours in the future (as configured by the practice, defaulting to 24 hours), and also ignores the setting that only  shows appointments for a certain number of days in the future (also configurable by the practice, defaulting to 90 days).  (optional)</param>
        /// <param name="departmentid">The athenaNet department ID. (optional)</param>
        /// <param name="enddate">End of the appointment search date range (mm/dd/yyyy). Inclusive. Defaults to seven days from startdate. (optional)</param>
        /// <param name="ignoreschedulablepermission">By default, we show only appointments that are are available to scheduled via the API. This flag allows you to bypass that restriction for viewing available appointments (but you still may not be able to schedule based on this permission!). This flag does not, however, show the full schedule (that is, appointments that are already booked).   (optional)</param>
        /// <param name="providerid">The athenaNet provider ID. Required if a reasonid other than -1 is specified. (optional)</param>
        /// <param name="reasonid">The athenaNet patient appointment reason ID, from GET /patientappointmentreasons. While this is not technically required due to some unusual use cases, it is highly recommended for most calls. We do allow a special value of -1 for the reasonid. This reasonid will return open, web-schedulable slots regardless of reason. However, slots returned using a search of -1 may return slots that are not bookable by any reason ID (they may be bookable by specific appointment type IDs instead). This argument allows multiple valid reason IDs to be specified (e.g. reasonid&#x3D;1,2,3), so if you are looking for slots that match \&quot;any\&quot; reason, it is recommended that you enumerate the set of reasons you are looking for. Either a reasonid or an appointmenttypeid must be specified or no results will be returned. If a reasonid other than -1 is specified then a providerid must also be specified.  (optional)</param>
        /// <param name="showfrozenslots">By default, we hide appointments that are frozen from being returned via the API.  This flag allows you to show frozen slots in the set of results returned.  (optional)</param>
        /// <param name="startdate">Start of the appointment search date range (mm/dd/yyyy). Inclusive. Defaults to today. (optional)</param>
        /// <returns>Task of AppointmentList</returns>
        System.Threading.Tasks.Task<AppointmentList> GetOpenAppointmentsAsync (int? practiceid, string apivariant, int? appointmenttypeid = null, bool? bypassscheduletimechecks = null, int? departmentid = null, string enddate = null, bool? ignoreschedulablepermission = null, string providerid = null, string reasonid = null, bool? showfrozenslots = null, string startdate = null);

        /// <summary>
        /// Get open appointment slots
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="appointmenttypeid">Normally, an appointment reason ID should be used which will map to the correct underlying appointment type in athenaNet. This field will ignore the practice&#x27;s existing setup for what should be scheduled. Please consult with athenahealth before using. Either an appointmenttypeid or a reasonid must be specified or no results will be returned.  (optional)</param>
        /// <param name="bypassscheduletimechecks">Bypass checks that usually require returned appointments to be some amount of hours in the future (as configured by the practice, defaulting to 24 hours), and also ignores the setting that only  shows appointments for a certain number of days in the future (also configurable by the practice, defaulting to 90 days).  (optional)</param>
        /// <param name="departmentid">The athenaNet department ID. (optional)</param>
        /// <param name="enddate">End of the appointment search date range (mm/dd/yyyy). Inclusive. Defaults to seven days from startdate. (optional)</param>
        /// <param name="ignoreschedulablepermission">By default, we show only appointments that are are available to scheduled via the API. This flag allows you to bypass that restriction for viewing available appointments (but you still may not be able to schedule based on this permission!). This flag does not, however, show the full schedule (that is, appointments that are already booked).   (optional)</param>
        /// <param name="providerid">The athenaNet provider ID. Required if a reasonid other than -1 is specified. (optional)</param>
        /// <param name="reasonid">The athenaNet patient appointment reason ID, from GET /patientappointmentreasons. While this is not technically required due to some unusual use cases, it is highly recommended for most calls. We do allow a special value of -1 for the reasonid. This reasonid will return open, web-schedulable slots regardless of reason. However, slots returned using a search of -1 may return slots that are not bookable by any reason ID (they may be bookable by specific appointment type IDs instead). This argument allows multiple valid reason IDs to be specified (e.g. reasonid&#x3D;1,2,3), so if you are looking for slots that match \&quot;any\&quot; reason, it is recommended that you enumerate the set of reasons you are looking for. Either a reasonid or an appointmenttypeid must be specified or no results will be returned. If a reasonid other than -1 is specified then a providerid must also be specified.  (optional)</param>
        /// <param name="showfrozenslots">By default, we hide appointments that are frozen from being returned via the API.  This flag allows you to show frozen slots in the set of results returned.  (optional)</param>
        /// <param name="startdate">Start of the appointment search date range (mm/dd/yyyy). Inclusive. Defaults to today. (optional)</param>
        /// <returns>Task of ApiResponse (AppointmentList)</returns>
        System.Threading.Tasks.Task<ApiResponse<AppointmentList>> GetOpenAppointmentsAsyncWithHttpInfo (int? practiceid, string apivariant, int? appointmenttypeid = null, bool? bypassscheduletimechecks = null, int? departmentid = null, string enddate = null, bool? ignoreschedulablepermission = null, string providerid = null, string reasonid = null, bool? showfrozenslots = null, string startdate = null);
        /// <summary>
        /// Get patient medical history
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="patientId">Id of the patient for which get medications</param>
        /// <param name="departmentid">The athenanet department ID</param>
        /// <param name="allresultsbyencounterid">ID used to return lab results for a specific encounter. (optional)</param>
        /// <param name="analyteresultstatus">Filter the results based on the analyte&#x27;s result status. Since the result status is a free text field, this list is not exhaustive, but does represent a majority of the used statuses.  (optional)</param>
        /// <param name="enddate">Filter lab orders not individual results that are on or before this date. Example: enddate&#x3D;1/21/2018. If no enddate is specified, all lab orders found since startdate will be included if specified.  (optional)</param>
        /// <param name="labresultstatus">Filter the results based on the lab result&#x27;s result status. Since the result status is a free text field, this list is not exhaustive, but does represent a majority of the used statuses.  (optional)</param>
        /// <param name="showabnormaldetails">Include the translation of the abnormalflag into HL7 code standards. (optional)</param>
        /// <param name="showhidden">Includes the lab results and analytes marked as hidden. Hidden lab results and analytes are created when they are manually entered, for example on the qm tab or in flowsheets.  (optional)</param>
        /// <param name="showtemplate">If true, interpretation template added to the document is also returned. (optional)</param>
        /// <param name="startdate">Filter lab orders not individual results that are on or after this date. Example: startdate&#x3D;6/21/2015. If no startdate is specified, all prior lab orders will be included until enddate if specified.  (optional)</param>
        /// <returns>Task of List{AnalytesList}</returns>
        System.Threading.Tasks.Task<List<AnalytesList>> GetPatientAnalytesAsync (int? practiceid, string apivariant, int? patientId, int? departmentid, int? allresultsbyencounterid = null, string analyteresultstatus = null, string enddate = null, string labresultstatus = null, bool? showabnormaldetails = null, bool? showhidden = null, bool? showtemplate = null, string startdate = null);

        /// <summary>
        /// Get patient medical history
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="patientId">Id of the patient for which get medications</param>
        /// <param name="departmentid">The athenanet department ID</param>
        /// <param name="allresultsbyencounterid">ID used to return lab results for a specific encounter. (optional)</param>
        /// <param name="analyteresultstatus">Filter the results based on the analyte&#x27;s result status. Since the result status is a free text field, this list is not exhaustive, but does represent a majority of the used statuses.  (optional)</param>
        /// <param name="enddate">Filter lab orders not individual results that are on or before this date. Example: enddate&#x3D;1/21/2018. If no enddate is specified, all lab orders found since startdate will be included if specified.  (optional)</param>
        /// <param name="labresultstatus">Filter the results based on the lab result&#x27;s result status. Since the result status is a free text field, this list is not exhaustive, but does represent a majority of the used statuses.  (optional)</param>
        /// <param name="showabnormaldetails">Include the translation of the abnormalflag into HL7 code standards. (optional)</param>
        /// <param name="showhidden">Includes the lab results and analytes marked as hidden. Hidden lab results and analytes are created when they are manually entered, for example on the qm tab or in flowsheets.  (optional)</param>
        /// <param name="showtemplate">If true, interpretation template added to the document is also returned. (optional)</param>
        /// <param name="startdate">Filter lab orders not individual results that are on or after this date. Example: startdate&#x3D;6/21/2015. If no startdate is specified, all prior lab orders will be included until enddate if specified.  (optional)</param>
        /// <returns>Task of ApiResponse (List{AnalytesList})</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AnalytesList>>> GetPatientAnalytesAsyncWithHttpInfo (int? practiceid, string apivariant, int? patientId, int? departmentid, int? allresultsbyencounterid = null, string analyteresultstatus = null, string enddate = null, string labresultstatus = null, bool? showabnormaldetails = null, bool? showhidden = null, bool? showtemplate = null, string startdate = null);
        /// <summary>
        /// Get a patient by ID
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="patientId">Id of the patient for which get information</param>
        /// <param name="departmentid">This is the ID for the department of the patient you are retrieving. If you are calling this on an enterprise practice with multiple financial groups (also called \&quot;provider groups\&quot;), this  will ensure you are retrieving the correct patient and not a copy that is in a different department.  (optional)</param>
        /// <param name="ignorerestrictions">Set to true to allow ability to find patients with record restrictions and blocked patients. This should only be used when there is no reflection to the patient at all that a match was found or not found.  (optional)</param>
        /// <param name="show2015edcehrtvalues">Use 2015 Ed. CEHRT compliant strings for describing gender identity and sexual orientation. (optional)</param>
        /// <param name="showallclaims">Include information on claims where there is no outstanding patient balance. (Only to be used when showbalancedetails is selected.)  (optional)</param>
        /// <param name="showallpatientdepartmentstatus">Include an array of all departments the patient is a part of along with all statuses for those departments. (optional)</param>
        /// <param name="showbalancedetails">Show detailed information on patient balances. (optional)</param>
        /// <param name="showcustomfields">Include custom fields for the patient. (optional)</param>
        /// <param name="showfullssn">If set, will show full SSN instead of a masked number. (optional)</param>
        /// <param name="showinsurance">Include patient insurance information. (optional)</param>
        /// <param name="showlocalpatientid">If set, will show local patient id. (optional)</param>
        /// <param name="showportalstatus">If set, will include portal enrollment status in response. (optional)</param>
        /// <returns>Task of List{Patient}</returns>
        System.Threading.Tasks.Task<List<Patient>> GetPatientByIdAsync (int? practiceid, string apivariant, int? patientId, int? departmentid = null, bool? ignorerestrictions = null, bool? show2015edcehrtvalues = null, bool? showallclaims = null, bool? showallpatientdepartmentstatus = null, bool? showbalancedetails = null, bool? showcustomfields = null, bool? showfullssn = null, bool? showinsurance = null, bool? showlocalpatientid = null, bool? showportalstatus = null);

        /// <summary>
        /// Get a patient by ID
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="patientId">Id of the patient for which get information</param>
        /// <param name="departmentid">This is the ID for the department of the patient you are retrieving. If you are calling this on an enterprise practice with multiple financial groups (also called \&quot;provider groups\&quot;), this  will ensure you are retrieving the correct patient and not a copy that is in a different department.  (optional)</param>
        /// <param name="ignorerestrictions">Set to true to allow ability to find patients with record restrictions and blocked patients. This should only be used when there is no reflection to the patient at all that a match was found or not found.  (optional)</param>
        /// <param name="show2015edcehrtvalues">Use 2015 Ed. CEHRT compliant strings for describing gender identity and sexual orientation. (optional)</param>
        /// <param name="showallclaims">Include information on claims where there is no outstanding patient balance. (Only to be used when showbalancedetails is selected.)  (optional)</param>
        /// <param name="showallpatientdepartmentstatus">Include an array of all departments the patient is a part of along with all statuses for those departments. (optional)</param>
        /// <param name="showbalancedetails">Show detailed information on patient balances. (optional)</param>
        /// <param name="showcustomfields">Include custom fields for the patient. (optional)</param>
        /// <param name="showfullssn">If set, will show full SSN instead of a masked number. (optional)</param>
        /// <param name="showinsurance">Include patient insurance information. (optional)</param>
        /// <param name="showlocalpatientid">If set, will show local patient id. (optional)</param>
        /// <param name="showportalstatus">If set, will include portal enrollment status in response. (optional)</param>
        /// <returns>Task of ApiResponse (List{Patient})</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Patient>>> GetPatientByIdAsyncWithHttpInfo (int? practiceid, string apivariant, int? patientId, int? departmentid = null, bool? ignorerestrictions = null, bool? show2015edcehrtvalues = null, bool? showallclaims = null, bool? showallpatientdepartmentstatus = null, bool? showbalancedetails = null, bool? showcustomfields = null, bool? showfullssn = null, bool? showinsurance = null, bool? showlocalpatientid = null, bool? showportalstatus = null);
        /// <summary>
        /// Get a patient CCDA informtion by ID
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="patientId">Id of the patient for which get information</param>
        /// <returns>Task of List{PatientCcda}</returns>
        System.Threading.Tasks.Task<List<PatientCcda>> GetPatientCcdaRecordAsync (int? practiceid, string apivariant, int? patientId);

        /// <summary>
        /// Get a patient CCDA informtion by ID
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="patientId">Id of the patient for which get information</param>
        /// <returns>Task of ApiResponse (List{PatientCcda})</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PatientCcda>>> GetPatientCcdaRecordAsyncWithHttpInfo (int? practiceid, string apivariant, int? patientId);
        /// <summary>
        /// Get encounters for the speicic patient.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="encounterid">The encounter ID.</param>
        /// <param name="allowdischargetype">If set, this will allow getting orders for a discharge encounter type. (optional)</param>
        /// <param name="showclinicalprovider">If set, this will show the information about the provider receiving the order. (optional)</param>
        /// <param name="showdeclinedorders">If set, include orders that were declined (optional)</param>
        /// <param name="showexternalcodes">If set, translate the order information to relevant external vocabularies, where available. Examples are medictions to RxNorm and NDC, vaccines to CVX and MVX, labs to LOINC, etc. Our mappings are not exhaustive.  (optional)</param>
        /// <returns>Task of List{EncounterDiagnosesList}</returns>
        System.Threading.Tasks.Task<List<EncounterDiagnosesList>> GetPatientEncounterOrdersAsync (int? practiceid, string apivariant, int? encounterid, bool? allowdischargetype = null, bool? showclinicalprovider = null, bool? showdeclinedorders = null, bool? showexternalcodes = null);

        /// <summary>
        /// Get encounters for the speicic patient.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="encounterid">The encounter ID.</param>
        /// <param name="allowdischargetype">If set, this will allow getting orders for a discharge encounter type. (optional)</param>
        /// <param name="showclinicalprovider">If set, this will show the information about the provider receiving the order. (optional)</param>
        /// <param name="showdeclinedorders">If set, include orders that were declined (optional)</param>
        /// <param name="showexternalcodes">If set, translate the order information to relevant external vocabularies, where available. Examples are medictions to RxNorm and NDC, vaccines to CVX and MVX, labs to LOINC, etc. Our mappings are not exhaustive.  (optional)</param>
        /// <returns>Task of ApiResponse (List{EncounterDiagnosesList})</returns>
        System.Threading.Tasks.Task<ApiResponse<List<EncounterDiagnosesList>>> GetPatientEncounterOrdersAsyncWithHttpInfo (int? practiceid, string apivariant, int? encounterid, bool? allowdischargetype = null, bool? showclinicalprovider = null, bool? showdeclinedorders = null, bool? showexternalcodes = null);
        /// <summary>
        /// Get encounters for the speicic patient.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="patientId">Id of the patient for which get medications</param>
        /// <param name="departmentid">The department for this patient. A patient may have multiple charts, and the department determines which chart to retrieve. </param>
        /// <param name="appointmentid">Find the encounter for this appointment. (optional)</param>
        /// <param name="providerid">The ID of the provider for this encounter (optional)</param>
        /// <param name="enddate">Omit any encounters later than this date (optional)</param>
        /// <param name="startdate">Omit any encounters earlier than this date (optional)</param>
        /// <param name="showallstatuses">By default only encounters in OPEN, CLOSED, or REVIEW status are retrieved, with this flag, encounters aren&#x27;t filtered by status.  (optional)</param>
        /// <param name="showalltypes">Retrieve all encounter types, by default only VISIT and ORDERSONLY are retrieved. (optional)</param>
        /// <param name="showdiagnoses">Query diagnosis information for every encounter (optional)</param>
        /// <returns>Task of List{EncountersList}</returns>
        System.Threading.Tasks.Task<List<EncountersList>> GetPatientEncountersAsync (int? practiceid, string apivariant, int? patientId, int? departmentid, int? appointmentid = null, int? providerid = null, string enddate = null, string startdate = null, bool? showallstatuses = null, bool? showalltypes = null, bool? showdiagnoses = null);

        /// <summary>
        /// Get encounters for the speicic patient.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="patientId">Id of the patient for which get medications</param>
        /// <param name="departmentid">The department for this patient. A patient may have multiple charts, and the department determines which chart to retrieve. </param>
        /// <param name="appointmentid">Find the encounter for this appointment. (optional)</param>
        /// <param name="providerid">The ID of the provider for this encounter (optional)</param>
        /// <param name="enddate">Omit any encounters later than this date (optional)</param>
        /// <param name="startdate">Omit any encounters earlier than this date (optional)</param>
        /// <param name="showallstatuses">By default only encounters in OPEN, CLOSED, or REVIEW status are retrieved, with this flag, encounters aren&#x27;t filtered by status.  (optional)</param>
        /// <param name="showalltypes">Retrieve all encounter types, by default only VISIT and ORDERSONLY are retrieved. (optional)</param>
        /// <param name="showdiagnoses">Query diagnosis information for every encounter (optional)</param>
        /// <returns>Task of ApiResponse (List{EncountersList})</returns>
        System.Threading.Tasks.Task<ApiResponse<List<EncountersList>>> GetPatientEncountersAsyncWithHttpInfo (int? practiceid, string apivariant, int? patientId, int? departmentid, int? appointmentid = null, int? providerid = null, string enddate = null, string startdate = null, bool? showallstatuses = null, bool? showalltypes = null, bool? showdiagnoses = null);
        /// <summary>
        /// Get information about patient lab result document
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="patientId">Id of the patient for which get information</param>
        /// <param name="labResultId">Id of the lab result</param>
        /// <param name="showtemplate">If true, interpretation template added to the document is also returned.  (optional)</param>
        /// <returns>Task of List{PatientLabResultDocumentDetails}</returns>
        System.Threading.Tasks.Task<List<PatientLabResultDocumentDetails>> GetPatientLabResultDocumentAsync (int? practiceid, string apivariant, int? patientId, int? labResultId, bool? showtemplate = null);

        /// <summary>
        /// Get information about patient lab result document
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="patientId">Id of the patient for which get information</param>
        /// <param name="labResultId">Id of the lab result</param>
        /// <param name="showtemplate">If true, interpretation template added to the document is also returned.  (optional)</param>
        /// <returns>Task of ApiResponse (List{PatientLabResultDocumentDetails})</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PatientLabResultDocumentDetails>>> GetPatientLabResultDocumentAsyncWithHttpInfo (int? practiceid, string apivariant, int? patientId, int? labResultId, bool? showtemplate = null);
        /// <summary>
        /// Get a patient lab results documents
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="patientId">Id of the patient for which get information</param>
        /// <param name="departmentid">The athenaNet department id.  (optional)</param>
        /// <param name="documentsubclass">The document subclass to filter document results.  (optional)</param>
        /// <param name="encounterid">Show only documents attached to this encounter.  (optional)</param>
        /// <param name="showdeleted">The document subclass to filter document results.  (optional)</param>
        /// <param name="showtemplate">If true, interpretation template added to the document is also returned.  (optional)</param>
        /// <param name="status">The status of the task to filter document results.  (optional)</param>
        /// <returns>Task of PatientLabResultDocumentList</returns>
        System.Threading.Tasks.Task<PatientLabResultDocumentList> GetPatientLabResultDocumentsAsync (int? practiceid, string apivariant, int? patientId, int? departmentid = null, string documentsubclass = null, int? encounterid = null, bool? showdeleted = null, bool? showtemplate = null, string status = null);

        /// <summary>
        /// Get a patient lab results documents
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="patientId">Id of the patient for which get information</param>
        /// <param name="departmentid">The athenaNet department id.  (optional)</param>
        /// <param name="documentsubclass">The document subclass to filter document results.  (optional)</param>
        /// <param name="encounterid">Show only documents attached to this encounter.  (optional)</param>
        /// <param name="showdeleted">The document subclass to filter document results.  (optional)</param>
        /// <param name="showtemplate">If true, interpretation template added to the document is also returned.  (optional)</param>
        /// <param name="status">The status of the task to filter document results.  (optional)</param>
        /// <returns>Task of ApiResponse (PatientLabResultDocumentList)</returns>
        System.Threading.Tasks.Task<ApiResponse<PatientLabResultDocumentList>> GetPatientLabResultDocumentsAsyncWithHttpInfo (int? practiceid, string apivariant, int? patientId, int? departmentid = null, string documentsubclass = null, int? encounterid = null, bool? showdeleted = null, bool? showtemplate = null, string status = null);
        /// <summary>
        /// Get patient medical history
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="patientId">Id of the patient for which get medications</param>
        /// <param name="departmentid">The athenanet department ID</param>
        /// <param name="allresultsbyencounterid">ID used to return lab results for a specific encounter. (optional)</param>
        /// <param name="analyteresultstatus">Filter the results based on the analyte&#x27;s result status. Since the result status is a free text field, this list is not exhaustive, but does represent a majority of the used statuses.  (optional)</param>
        /// <param name="enddate">Filter lab orders not individual results that are on or before this date. Example: enddate&#x3D;1/21/2018. If no enddate is specified, all lab orders found since startdate will be included if specified.  (optional)</param>
        /// <param name="labresultstatus">Filter the results based on the lab result&#x27;s result status. Since the result status is a free text field, this list is not exhaustive, but does represent a majority of the used statuses.  (optional)</param>
        /// <param name="showabnormaldetails">Include the translation of the abnormalflag into HL7 code standards. (optional)</param>
        /// <param name="showhidden">Includes the lab results and analytes marked as hidden. Hidden lab results and analytes are created when they are manually entered, for example on the qm tab or in flowsheets.  (optional)</param>
        /// <param name="showtemplate">If true, interpretation template added to the document is also returned. (optional)</param>
        /// <param name="startdate">Filter lab orders not individual results that are on or after this date. Example: startdate&#x3D;6/21/2015. If no startdate is specified, all prior lab orders will be included until enddate if specified.  (optional)</param>
        /// <returns>Task of LabResultList</returns>
        System.Threading.Tasks.Task<LabResultList> GetPatientLabResultsAsync (int? practiceid, string apivariant, int? patientId, int? departmentid, int? allresultsbyencounterid = null, string analyteresultstatus = null, string enddate = null, string labresultstatus = null, bool? showabnormaldetails = null, bool? showhidden = null, bool? showtemplate = null, string startdate = null);

        /// <summary>
        /// Get patient medical history
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="patientId">Id of the patient for which get medications</param>
        /// <param name="departmentid">The athenanet department ID</param>
        /// <param name="allresultsbyencounterid">ID used to return lab results for a specific encounter. (optional)</param>
        /// <param name="analyteresultstatus">Filter the results based on the analyte&#x27;s result status. Since the result status is a free text field, this list is not exhaustive, but does represent a majority of the used statuses.  (optional)</param>
        /// <param name="enddate">Filter lab orders not individual results that are on or before this date. Example: enddate&#x3D;1/21/2018. If no enddate is specified, all lab orders found since startdate will be included if specified.  (optional)</param>
        /// <param name="labresultstatus">Filter the results based on the lab result&#x27;s result status. Since the result status is a free text field, this list is not exhaustive, but does represent a majority of the used statuses.  (optional)</param>
        /// <param name="showabnormaldetails">Include the translation of the abnormalflag into HL7 code standards. (optional)</param>
        /// <param name="showhidden">Includes the lab results and analytes marked as hidden. Hidden lab results and analytes are created when they are manually entered, for example on the qm tab or in flowsheets.  (optional)</param>
        /// <param name="showtemplate">If true, interpretation template added to the document is also returned. (optional)</param>
        /// <param name="startdate">Filter lab orders not individual results that are on or after this date. Example: startdate&#x3D;6/21/2015. If no startdate is specified, all prior lab orders will be included until enddate if specified.  (optional)</param>
        /// <returns>Task of ApiResponse (LabResultList)</returns>
        System.Threading.Tasks.Task<ApiResponse<LabResultList>> GetPatientLabResultsAsyncWithHttpInfo (int? practiceid, string apivariant, int? patientId, int? departmentid, int? allresultsbyencounterid = null, string analyteresultstatus = null, string enddate = null, string labresultstatus = null, bool? showabnormaldetails = null, bool? showhidden = null, bool? showtemplate = null, string startdate = null);
        /// <summary>
        /// Get patient medical history
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="patientId">Id of the patient for which get medications</param>
        /// <param name="departmentid">The athenanet department ID</param>
        /// <returns>Task of PatientMedicalHistory</returns>
        System.Threading.Tasks.Task<PatientMedicalHistory> GetPatientMedicalHistoryAsync (int? practiceid, string apivariant, int? patientId, int? departmentid);

        /// <summary>
        /// Get patient medical history
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="patientId">Id of the patient for which get medications</param>
        /// <param name="departmentid">The athenanet department ID</param>
        /// <returns>Task of ApiResponse (PatientMedicalHistory)</returns>
        System.Threading.Tasks.Task<ApiResponse<PatientMedicalHistory>> GetPatientMedicalHistoryAsyncWithHttpInfo (int? practiceid, string apivariant, int? patientId, int? departmentid);
        /// <summary>
        /// Get patient medications
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="patientId">Id of the patient for which get medications</param>
        /// <param name="departmentid">The athenanet department ID</param>
        /// <param name="medicationtype">Historical or Active or Denied. Will return a list of a patient&#x27;s active or historical or denied medications. (optional)</param>
        /// <param name="showndc">Shows the list of NDC numbers related to the medication. (optional)</param>
        /// <param name="showpend">Include pending medications associated with approved future orders. These medications have not yet been submitted. (optional)</param>
        /// <param name="showrxnorm">Shows the list of RxNorm Identifiers related to the medication. The list may contain both branded and generic identifiers. (optional)</param>
        /// <returns>Task of PatientMedication</returns>
        System.Threading.Tasks.Task<PatientMedication> GetPatientMedicationsAsync (int? practiceid, string apivariant, int? patientId, int? departmentid, string medicationtype = null, bool? showndc = null, bool? showpend = null, bool? showrxnorm = null);

        /// <summary>
        /// Get patient medications
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="patientId">Id of the patient for which get medications</param>
        /// <param name="departmentid">The athenanet department ID</param>
        /// <param name="medicationtype">Historical or Active or Denied. Will return a list of a patient&#x27;s active or historical or denied medications. (optional)</param>
        /// <param name="showndc">Shows the list of NDC numbers related to the medication. (optional)</param>
        /// <param name="showpend">Include pending medications associated with approved future orders. These medications have not yet been submitted. (optional)</param>
        /// <param name="showrxnorm">Shows the list of RxNorm Identifiers related to the medication. The list may contain both branded and generic identifiers. (optional)</param>
        /// <returns>Task of ApiResponse (PatientMedication)</returns>
        System.Threading.Tasks.Task<ApiResponse<PatientMedication>> GetPatientMedicationsAsyncWithHttpInfo (int? practiceid, string apivariant, int? patientId, int? departmentid, string medicationtype = null, bool? showndc = null, bool? showpend = null, bool? showrxnorm = null);
        /// <summary>
        /// Get patient medical history
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="patientId">Id of the patient for which get medications</param>
        /// <param name="departmentid">The department for this patient. A patient may have multiple charts, and the department determines which chart to retrieve. </param>
        /// <param name="showdiagnosisinfo">If true, will include every encounter and associated diagnosis with each problem.  Also fills the bestmatchicd10code field with the best conversion from the problem SNOMED  code to ICD10 code if there is no user-selected ICD10 code in an encounter diagnosis event. Please note that the bestmatchicd10code may not always be accurate.  (optional)</param>
        /// <param name="showinactive">Also show inactive (but not soft deleted) problems. (optional)</param>
        /// <returns>Task of ProblemsList</returns>
        System.Threading.Tasks.Task<ProblemsList> GetPatientProblemsAsync (int? practiceid, string apivariant, int? patientId, int? departmentid, bool? showdiagnosisinfo = null, bool? showinactive = null);

        /// <summary>
        /// Get patient medical history
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="patientId">Id of the patient for which get medications</param>
        /// <param name="departmentid">The department for this patient. A patient may have multiple charts, and the department determines which chart to retrieve. </param>
        /// <param name="showdiagnosisinfo">If true, will include every encounter and associated diagnosis with each problem.  Also fills the bestmatchicd10code field with the best conversion from the problem SNOMED  code to ICD10 code if there is no user-selected ICD10 code in an encounter diagnosis event. Please note that the bestmatchicd10code may not always be accurate.  (optional)</param>
        /// <param name="showinactive">Also show inactive (but not soft deleted) problems. (optional)</param>
        /// <returns>Task of ApiResponse (ProblemsList)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProblemsList>> GetPatientProblemsAsyncWithHttpInfo (int? practiceid, string apivariant, int? patientId, int? departmentid, bool? showdiagnosisinfo = null, bool? showinactive = null);
        /// <summary>
        /// List of social history data for this patient.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="patientId">Id of the patient for which get medications</param>
        /// <param name="departmentid">The department for this patient. A patient may have multiple charts, and the department determines which chart to retrieve. </param>
        /// <param name="recipientcategory">The intended audience for the data. If given, questions marked as confidential for this audience will be withheld.   (optional)</param>
        /// <param name="shownotperformedquestions">Include questions that the provider did not perform. (optional)</param>
        /// <param name="showunansweredquestions">Include questions where there is no current answer. (optional)</param>
        /// <returns>Task of SocialHistoryList</returns>
        System.Threading.Tasks.Task<SocialHistoryList> GetPatientSocialHistoryAsync (int? practiceid, string apivariant, int? patientId, int? departmentid, string recipientcategory = null, bool? shownotperformedquestions = null, bool? showunansweredquestions = null);

        /// <summary>
        /// List of social history data for this patient.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="patientId">Id of the patient for which get medications</param>
        /// <param name="departmentid">The department for this patient. A patient may have multiple charts, and the department determines which chart to retrieve. </param>
        /// <param name="recipientcategory">The intended audience for the data. If given, questions marked as confidential for this audience will be withheld.   (optional)</param>
        /// <param name="shownotperformedquestions">Include questions that the provider did not perform. (optional)</param>
        /// <param name="showunansweredquestions">Include questions where there is no current answer. (optional)</param>
        /// <returns>Task of ApiResponse (SocialHistoryList)</returns>
        System.Threading.Tasks.Task<ApiResponse<SocialHistoryList>> GetPatientSocialHistoryAsyncWithHttpInfo (int? practiceid, string apivariant, int? patientId, int? departmentid, string recipientcategory = null, bool? shownotperformedquestions = null, bool? showunansweredquestions = null);
        /// <summary>
        /// Get patient medical history
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="patientId">Id of the patient for which get medications</param>
        /// <param name="departmentid">The department for this patient. A patient may have multiple charts, and the department determines which chart to retrieve. </param>
        /// <returns>Task of ProceduresList</returns>
        System.Threading.Tasks.Task<ProceduresList> GetPatientSurgicalHistoryAsync (int? practiceid, string apivariant, int? patientId, int? departmentid);

        /// <summary>
        /// Get patient medical history
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="patientId">Id of the patient for which get medications</param>
        /// <param name="departmentid">The department for this patient. A patient may have multiple charts, and the department determines which chart to retrieve. </param>
        /// <returns>Task of ApiResponse (ProceduresList)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProceduresList>> GetPatientSurgicalHistoryAsyncWithHttpInfo (int? practiceid, string apivariant, int? patientId, int? departmentid);
        /// <summary>
        /// Get patient medical history
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="patientId">Id of the patient for which get medications</param>
        /// <param name="departmentid">The department for this patient. A patient may have multiple charts, and the department determines which chart to retrieve. </param>
        /// <param name="enddate">Only retrieve vitals that were taking on or before this date  (optional)</param>
        /// <param name="showemptyvitals">Show configured vitals that have no readings for this patient. (optional)</param>
        /// <param name="startdate">Only retrieve vitals that were taking on or after this date  (optional)</param>
        /// <returns>Task of VitalsList</returns>
        System.Threading.Tasks.Task<VitalsList> GetPatientVitalsAsync (int? practiceid, string apivariant, int? patientId, int? departmentid, string enddate = null, bool? showemptyvitals = null, string startdate = null);

        /// <summary>
        /// Get patient medical history
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="patientId">Id of the patient for which get medications</param>
        /// <param name="departmentid">The department for this patient. A patient may have multiple charts, and the department determines which chart to retrieve. </param>
        /// <param name="enddate">Only retrieve vitals that were taking on or before this date  (optional)</param>
        /// <param name="showemptyvitals">Show configured vitals that have no readings for this patient. (optional)</param>
        /// <param name="startdate">Only retrieve vitals that were taking on or after this date  (optional)</param>
        /// <returns>Task of ApiResponse (VitalsList)</returns>
        System.Threading.Tasks.Task<ApiResponse<VitalsList>> GetPatientVitalsAsyncWithHttpInfo (int? practiceid, string apivariant, int? patientId, int? departmentid, string enddate = null, bool? showemptyvitals = null, string startdate = null);
        /// <summary>
        /// Search for patients
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="departmentid">Primary (registration) department ID. (optional)</param>
        /// <param name="firstname">First name of the patient to find. (optional)</param>
        /// <param name="lastname">Last name of the patient to find. (optional)</param>
        /// <returns>Task of PatientList</returns>
        System.Threading.Tasks.Task<PatientList> GetPatientsAsync (int? practiceid, string apivariant, int? departmentid = null, string firstname = null, string lastname = null);

        /// <summary>
        /// Search for patients
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="departmentid">Primary (registration) department ID. (optional)</param>
        /// <param name="firstname">First name of the patient to find. (optional)</param>
        /// <param name="lastname">Last name of the patient to find. (optional)</param>
        /// <returns>Task of ApiResponse (PatientList)</returns>
        System.Threading.Tasks.Task<ApiResponse<PatientList>> GetPatientsAsyncWithHttpInfo (int? practiceid, string apivariant, int? departmentid = null, string firstname = null, string lastname = null);
        /// <summary>
        /// Get available practice IDs
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="limit">Number of entries to return (default 1500, max 5000) (optional)</param>
        /// <param name="offset">Starting point of entries; 0-indexed (optional)</param>
        /// <returns>Task of PracticeList</returns>
        System.Threading.Tasks.Task<PracticeList> GetPracticeInfoAsync (int? practiceid, string apivariant, int? limit = null, int? offset = null);

        /// <summary>
        /// Get available practice IDs
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="limit">Number of entries to return (default 1500, max 5000) (optional)</param>
        /// <param name="offset">Starting point of entries; 0-indexed (optional)</param>
        /// <returns>Task of ApiResponse (PracticeList)</returns>
        System.Threading.Tasks.Task<ApiResponse<PracticeList>> GetPracticeInfoAsyncWithHttpInfo (int? practiceid, string apivariant, int? limit = null, int? offset = null);
        /// <summary>
        /// Get a providers
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="providerId">Id of the provider for which get information</param>
        /// <param name="showallproviderids">In athenaNet&#x27;s internal data structures, a single provider can be represented by multiple IDs. These IDs are used in certain external messages (e.g. HL7) and thus these IDs may need to be known by the API user as well. When set to true, a list of all of these ancillary IDs will be provided.  (optional)</param>
        /// <param name="showfederalidnumber">Include the provider&#x27;s federal ID number in results.  (optional)</param>
        /// <param name="showusualdepartmentguessthreshold">There are situations where determining where a provider \&quot;normally\&quot; practices is desired. Unfortuantely, there is no such concept in athenaNet since providers often practice in multiple locations. However, we can use some intelligence to determine this by looking back over the previous few months (90 days) to see actual practice. To enable this, set this value between 0 and 1; it is highly recommended to be at least .5. This is the ratio of appointments in a given department to the total number of appointments for that provider. A value of .5 means \&quot;the provider&#x27;s appointments are 50% in the department guessed.\&quot; Setting this to 1 would only return a department if ALL of the provider&#x27;s appointments were in one department.  (optional)</param>
        /// <returns>Task of List{Provider}</returns>
        System.Threading.Tasks.Task<List<Provider>> GetProviderByIdAsync (int? practiceid, string apivariant, int? providerId, bool? showallproviderids = null, int? showfederalidnumber = null, decimal? showusualdepartmentguessthreshold = null);

        /// <summary>
        /// Get a providers
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="providerId">Id of the provider for which get information</param>
        /// <param name="showallproviderids">In athenaNet&#x27;s internal data structures, a single provider can be represented by multiple IDs. These IDs are used in certain external messages (e.g. HL7) and thus these IDs may need to be known by the API user as well. When set to true, a list of all of these ancillary IDs will be provided.  (optional)</param>
        /// <param name="showfederalidnumber">Include the provider&#x27;s federal ID number in results.  (optional)</param>
        /// <param name="showusualdepartmentguessthreshold">There are situations where determining where a provider \&quot;normally\&quot; practices is desired. Unfortuantely, there is no such concept in athenaNet since providers often practice in multiple locations. However, we can use some intelligence to determine this by looking back over the previous few months (90 days) to see actual practice. To enable this, set this value between 0 and 1; it is highly recommended to be at least .5. This is the ratio of appointments in a given department to the total number of appointments for that provider. A value of .5 means \&quot;the provider&#x27;s appointments are 50% in the department guessed.\&quot; Setting this to 1 would only return a department if ALL of the provider&#x27;s appointments were in one department.  (optional)</param>
        /// <returns>Task of ApiResponse (List{Provider})</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Provider>>> GetProviderByIdAsyncWithHttpInfo (int? practiceid, string apivariant, int? providerId, bool? showallproviderids = null, int? showfederalidnumber = null, decimal? showusualdepartmentguessthreshold = null);
        /// <summary>
        /// Get a providers
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="name">Id of the patient for which get information (optional)</param>
        /// <param name="providertype">The provider type to filter the results on. Valid provider type values can be found by using GET /reference/providertypes. (optional)</param>
        /// <param name="showallproviderids">In athenaNet&#x27;s internal data structures, a single provider can be represented by multiple IDs. These IDs are used in certain external messages (e.g. HL7) and thus these IDs may need to be known by the API user as well. When set to true, a list of all of these ancillary IDs will be provided.  (optional)</param>
        /// <param name="showusualdepartmentguessthreshold">There are situations where determining where a provider \&quot;normally\&quot; practices is desired. Unfortuantely, there is no such concept in athenaNet since providers often practice in multiple locations. However, we can use some intelligence to determine this by looking back over the previous few months (90 days) to see actual practice. To enable this, set this value between 0 and 1; it is highly recommended to be at least .5. This is the ratio of appointments in a given department to the total number of appointments for that provider. A value of .5 means \&quot;the provider&#x27;s appointments are 50% in the department guessed.\&quot; Setting this to 1 would only return a department if ALL of the provider&#x27;s appointments were in one department.  (optional)</param>
        /// <returns>Task of ProviderList</returns>
        System.Threading.Tasks.Task<ProviderList> GetProvidersAsync (int? practiceid, string apivariant, string name = null, string providertype = null, bool? showallproviderids = null, int? showusualdepartmentguessthreshold = null);

        /// <summary>
        /// Get a providers
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="name">Id of the patient for which get information (optional)</param>
        /// <param name="providertype">The provider type to filter the results on. Valid provider type values can be found by using GET /reference/providertypes. (optional)</param>
        /// <param name="showallproviderids">In athenaNet&#x27;s internal data structures, a single provider can be represented by multiple IDs. These IDs are used in certain external messages (e.g. HL7) and thus these IDs may need to be known by the API user as well. When set to true, a list of all of these ancillary IDs will be provided.  (optional)</param>
        /// <param name="showusualdepartmentguessthreshold">There are situations where determining where a provider \&quot;normally\&quot; practices is desired. Unfortuantely, there is no such concept in athenaNet since providers often practice in multiple locations. However, we can use some intelligence to determine this by looking back over the previous few months (90 days) to see actual practice. To enable this, set this value between 0 and 1; it is highly recommended to be at least .5. This is the ratio of appointments in a given department to the total number of appointments for that provider. A value of .5 means \&quot;the provider&#x27;s appointments are 50% in the department guessed.\&quot; Setting this to 1 would only return a department if ALL of the provider&#x27;s appointments were in one department.  (optional)</param>
        /// <returns>Task of ApiResponse (ProviderList)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProviderList>> GetProvidersAsyncWithHttpInfo (int? practiceid, string apivariant, string name = null, string providertype = null, bool? showallproviderids = null, int? showusualdepartmentguessthreshold = null);
        /// <summary>
        /// Provides the ability to add new open appointment slots
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appointmentdate"></param>
        /// <param name="appointmenttime"></param>
        /// <param name="appointmenttypeid"></param>
        /// <param name="departmentid"></param>
        /// <param name="providerid"></param>
        /// <param name="reasonid"></param>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <returns>Task of InlineResponse200</returns>
        System.Threading.Tasks.Task<InlineResponse200> OpenNewAppointmentAsync (string appointmentdate, string appointmenttime, int? appointmenttypeid, int? departmentid, int? providerid, int? reasonid, int? practiceid, string apivariant);

        /// <summary>
        /// Provides the ability to add new open appointment slots
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appointmentdate"></param>
        /// <param name="appointmenttime"></param>
        /// <param name="appointmenttypeid"></param>
        /// <param name="departmentid"></param>
        /// <param name="providerid"></param>
        /// <param name="reasonid"></param>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> OpenNewAppointmentAsyncWithHttpInfo (string appointmentdate, string appointmenttime, int? appointmenttypeid, int? departmentid, int? providerid, int? reasonid, int? practiceid, string apivariant);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class DefaultApi : IDefaultApi
    {
        private Jacrys.AthenaSharp.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi( string basePath )
        {
            this.Configuration = new Jacrys.AthenaSharp.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Jacrys.AthenaSharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// </summary>
        /// <returns></returns>
        public DefaultApi()
        {
            this.Configuration = Jacrys.AthenaSharp.Client.Configuration.Default;

            ExceptionFactory = Jacrys.AthenaSharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DefaultApi(Jacrys.AthenaSharp.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Jacrys.AthenaSharp.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Jacrys.AthenaSharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath( string basePath )
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Jacrys.AthenaSharp.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Jacrys.AthenaSharp.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<string, string> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Append text to the assessment note
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="encounterid">The encounter ID.</param>
        /// <returns>OperationStatusData</returns>
        public OperationStatusData AddEncounterAssesmentText (Body8 body, int? practiceid, string apivariant, int? encounterid)
        {
             ApiResponse<OperationStatusData> localVarResponse = AddEncounterAssesmentTextWithHttpInfo(body, practiceid, apivariant, encounterid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Append text to the assessment note
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="encounterid">The encounter ID.</param>
        /// <returns>ApiResponse of OperationStatusData</returns>
        public ApiResponse< OperationStatusData > AddEncounterAssesmentTextWithHttpInfo (Body8 body, int? practiceid, string apivariant, int? encounterid)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->AddEncounterAssesmentText");
            // verify the required parameter 'practiceid' is set
            if (practiceid == null)
                throw new ApiException(400, "Missing required parameter 'practiceid' when calling DefaultApi->AddEncounterAssesmentText");
            // verify the required parameter 'apivariant' is set
            if (apivariant == null)
                throw new ApiException(400, "Missing required parameter 'apivariant' when calling DefaultApi->AddEncounterAssesmentText");
            // verify the required parameter 'encounterid' is set
            if (encounterid == null)
                throw new ApiException(400, "Missing required parameter 'encounterid' when calling DefaultApi->AddEncounterAssesmentText");

            var localVarPath = "/{apivariant}/{practiceid}/chart/encounter/{encounterid}/assessment";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
			object localVarPostBody = null;

			// to determine the Content-Type header
			string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
			string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
			string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (practiceid != null) localVarPathParams.Add("practiceid", this.Configuration.ApiClient.ParameterToString(practiceid)); // path parameter
            if (apivariant != null) localVarPathParams.Add("apivariant", this.Configuration.ApiClient.ParameterToString(apivariant)); // path parameter
            if (encounterid != null) localVarPathParams.Add("encounterid", this.Configuration.ApiClient.ParameterToString(encounterid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (defaultSecurityScheme) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddEncounterAssesmentText", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OperationStatusData>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OperationStatusData) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OperationStatusData)));
        }

        /// <summary>
        /// Append text to the assessment note
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="encounterid">The encounter ID.</param>
        /// <returns>Task of OperationStatusData</returns>
        public async System.Threading.Tasks.Task<OperationStatusData> AddEncounterAssesmentTextAsync (Body8 body, int? practiceid, string apivariant, int? encounterid)
        {
             ApiResponse<OperationStatusData> localVarResponse = await AddEncounterAssesmentTextAsyncWithHttpInfo(body, practiceid, apivariant, encounterid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Append text to the assessment note
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="encounterid">The encounter ID.</param>
        /// <returns>Task of ApiResponse (OperationStatusData)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OperationStatusData>> AddEncounterAssesmentTextAsyncWithHttpInfo (Body8 body, int? practiceid, string apivariant, int? encounterid)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->AddEncounterAssesmentText");
            // verify the required parameter 'practiceid' is set
            if (practiceid == null)
                throw new ApiException(400, "Missing required parameter 'practiceid' when calling DefaultApi->AddEncounterAssesmentText");
            // verify the required parameter 'apivariant' is set
            if (apivariant == null)
                throw new ApiException(400, "Missing required parameter 'apivariant' when calling DefaultApi->AddEncounterAssesmentText");
            // verify the required parameter 'encounterid' is set
            if (encounterid == null)
                throw new ApiException(400, "Missing required parameter 'encounterid' when calling DefaultApi->AddEncounterAssesmentText");

            var localVarPath = "/{apivariant}/{practiceid}/chart/encounter/{encounterid}/assessment";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
			object localVarPostBody = null;

			// to determine the Content-Type header
			string[] localVarHttpContentTypes = new string[] {
                "application/json"
            };
			string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
			string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (practiceid != null) localVarPathParams.Add("practiceid", this.Configuration.ApiClient.ParameterToString(practiceid)); // path parameter
            if (apivariant != null) localVarPathParams.Add("apivariant", this.Configuration.ApiClient.ParameterToString(apivariant)); // path parameter
            if (encounterid != null) localVarPathParams.Add("encounterid", this.Configuration.ApiClient.ParameterToString(encounterid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (defaultSecurityScheme) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddEncounterAssesmentText", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OperationStatusData>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OperationStatusData) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OperationStatusData)));
        }

        /// <summary>
        /// Set Information about a single patient&#x27;s appointment by id
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="patientid"></param>
        /// <param name="appointmenttypeid"></param>
        /// <param name="bookingnote"></param>
        /// <param name="departmentid"></param>
        /// <param name="donotsendconfirmationemail"></param>
        /// <param name="ignoreschedulablepermission"></param>
        /// <param name="insurancecompany"></param>
        /// <param name="insurancegroupid"></param>
        /// <param name="insuranceidnumber"></param>
        /// <param name="insurancenote"></param>
        /// <param name="insurancephone"></param>
        /// <param name="insuranceplanname"></param>
        /// <param name="insurancepolicyholder"></param>
        /// <param name="nopatientcase"></param>
        /// <param name="reasonid"></param>
        /// <param name="urgentyn"></param>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="appointmentId">Id of the appointment.</param>
        /// <returns>AppointmentArray</returns>
        public AppointmentArray BookAppointmentById (int? patientid, int? appointmenttypeid, string bookingnote, int? departmentid, bool? donotsendconfirmationemail, bool? ignoreschedulablepermission, string insurancecompany, string insurancegroupid, string insuranceidnumber, string insurancenote, string insurancephone, string insuranceplanname, string insurancepolicyholder, bool? nopatientcase, int? reasonid, bool? urgentyn, int? practiceid, string apivariant, int? appointmentId)
        {
             ApiResponse<AppointmentArray> localVarResponse = BookAppointmentByIdWithHttpInfo(patientid, appointmenttypeid, bookingnote, departmentid, donotsendconfirmationemail, ignoreschedulablepermission, insurancecompany, insurancegroupid, insuranceidnumber, insurancenote, insurancephone, insuranceplanname, insurancepolicyholder, nopatientcase, reasonid, urgentyn, practiceid, apivariant, appointmentId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Set Information about a single patient&#x27;s appointment by id
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="patientid"></param>
        /// <param name="appointmenttypeid"></param>
        /// <param name="bookingnote"></param>
        /// <param name="departmentid"></param>
        /// <param name="donotsendconfirmationemail"></param>
        /// <param name="ignoreschedulablepermission"></param>
        /// <param name="insurancecompany"></param>
        /// <param name="insurancegroupid"></param>
        /// <param name="insuranceidnumber"></param>
        /// <param name="insurancenote"></param>
        /// <param name="insurancephone"></param>
        /// <param name="insuranceplanname"></param>
        /// <param name="insurancepolicyholder"></param>
        /// <param name="nopatientcase"></param>
        /// <param name="reasonid"></param>
        /// <param name="urgentyn"></param>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="appointmentId">Id of the appointment.</param>
        /// <returns>ApiResponse of AppointmentArray</returns>
        public ApiResponse< AppointmentArray > BookAppointmentByIdWithHttpInfo (int? patientid, int? appointmenttypeid, string bookingnote, int? departmentid, bool? donotsendconfirmationemail, bool? ignoreschedulablepermission, string insurancecompany, string insurancegroupid, string insuranceidnumber, string insurancenote, string insurancephone, string insuranceplanname, string insurancepolicyholder, bool? nopatientcase, int? reasonid, bool? urgentyn, int? practiceid, string apivariant, int? appointmentId)
        {
            // verify the required parameter 'patientid' is set
            if (patientid == null)
                throw new ApiException(400, "Missing required parameter 'patientid' when calling DefaultApi->BookAppointmentById");
            // verify the required parameter 'appointmenttypeid' is set
            if (appointmenttypeid == null)
                throw new ApiException(400, "Missing required parameter 'appointmenttypeid' when calling DefaultApi->BookAppointmentById");
            // verify the required parameter 'bookingnote' is set
            if (bookingnote == null)
                throw new ApiException(400, "Missing required parameter 'bookingnote' when calling DefaultApi->BookAppointmentById");
            // verify the required parameter 'departmentid' is set
            if (departmentid == null)
                throw new ApiException(400, "Missing required parameter 'departmentid' when calling DefaultApi->BookAppointmentById");
            // verify the required parameter 'donotsendconfirmationemail' is set
            if (donotsendconfirmationemail == null)
                throw new ApiException(400, "Missing required parameter 'donotsendconfirmationemail' when calling DefaultApi->BookAppointmentById");
            // verify the required parameter 'ignoreschedulablepermission' is set
            if (ignoreschedulablepermission == null)
                throw new ApiException(400, "Missing required parameter 'ignoreschedulablepermission' when calling DefaultApi->BookAppointmentById");
            // verify the required parameter 'insurancecompany' is set
            if (insurancecompany == null)
                throw new ApiException(400, "Missing required parameter 'insurancecompany' when calling DefaultApi->BookAppointmentById");
            // verify the required parameter 'insurancegroupid' is set
            if (insurancegroupid == null)
                throw new ApiException(400, "Missing required parameter 'insurancegroupid' when calling DefaultApi->BookAppointmentById");
            // verify the required parameter 'insuranceidnumber' is set
            if (insuranceidnumber == null)
                throw new ApiException(400, "Missing required parameter 'insuranceidnumber' when calling DefaultApi->BookAppointmentById");
            // verify the required parameter 'insurancenote' is set
            if (insurancenote == null)
                throw new ApiException(400, "Missing required parameter 'insurancenote' when calling DefaultApi->BookAppointmentById");
            // verify the required parameter 'insurancephone' is set
            if (insurancephone == null)
                throw new ApiException(400, "Missing required parameter 'insurancephone' when calling DefaultApi->BookAppointmentById");
            // verify the required parameter 'insuranceplanname' is set
            if (insuranceplanname == null)
                throw new ApiException(400, "Missing required parameter 'insuranceplanname' when calling DefaultApi->BookAppointmentById");
            // verify the required parameter 'insurancepolicyholder' is set
            if (insurancepolicyholder == null)
                throw new ApiException(400, "Missing required parameter 'insurancepolicyholder' when calling DefaultApi->BookAppointmentById");
            // verify the required parameter 'nopatientcase' is set
            if (nopatientcase == null)
                throw new ApiException(400, "Missing required parameter 'nopatientcase' when calling DefaultApi->BookAppointmentById");
            // verify the required parameter 'reasonid' is set
            if (reasonid == null)
                throw new ApiException(400, "Missing required parameter 'reasonid' when calling DefaultApi->BookAppointmentById");
            // verify the required parameter 'urgentyn' is set
            if (urgentyn == null)
                throw new ApiException(400, "Missing required parameter 'urgentyn' when calling DefaultApi->BookAppointmentById");
            // verify the required parameter 'practiceid' is set
            if (practiceid == null)
                throw new ApiException(400, "Missing required parameter 'practiceid' when calling DefaultApi->BookAppointmentById");
            // verify the required parameter 'apivariant' is set
            if (apivariant == null)
                throw new ApiException(400, "Missing required parameter 'apivariant' when calling DefaultApi->BookAppointmentById");
            // verify the required parameter 'appointmentId' is set
            if (appointmentId == null)
                throw new ApiException(400, "Missing required parameter 'appointmentId' when calling DefaultApi->BookAppointmentById");

            var localVarPath = "/{apivariant}/{practiceid}/appointments/{appointmentId}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
			object localVarPostBody = null;

			// to determine the Content-Type header
			string[] localVarHttpContentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };
			string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
			string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (practiceid != null) localVarPathParams.Add("practiceid", this.Configuration.ApiClient.ParameterToString(practiceid)); // path parameter
            if (apivariant != null) localVarPathParams.Add("apivariant", this.Configuration.ApiClient.ParameterToString(apivariant)); // path parameter
            if (appointmentId != null) localVarPathParams.Add("appointmentId", this.Configuration.ApiClient.ParameterToString(appointmentId)); // path parameter
            if (patientid != null) localVarFormParams.Add("patientid", this.Configuration.ApiClient.ParameterToString(patientid)); // form parameter
            if (appointmenttypeid != null) localVarFormParams.Add("appointmenttypeid", this.Configuration.ApiClient.ParameterToString(appointmenttypeid)); // form parameter
            if (bookingnote != null) localVarFormParams.Add("bookingnote", this.Configuration.ApiClient.ParameterToString(bookingnote)); // form parameter
            if (departmentid != null) localVarFormParams.Add("departmentid", this.Configuration.ApiClient.ParameterToString(departmentid)); // form parameter
            if (donotsendconfirmationemail != null) localVarFormParams.Add("donotsendconfirmationemail", this.Configuration.ApiClient.ParameterToString(donotsendconfirmationemail)); // form parameter
            if (ignoreschedulablepermission != null) localVarFormParams.Add("ignoreschedulablepermission", this.Configuration.ApiClient.ParameterToString(ignoreschedulablepermission)); // form parameter
            if (insurancecompany != null) localVarFormParams.Add("insurancecompany", this.Configuration.ApiClient.ParameterToString(insurancecompany)); // form parameter
            if (insurancegroupid != null) localVarFormParams.Add("insurancegroupid", this.Configuration.ApiClient.ParameterToString(insurancegroupid)); // form parameter
            if (insuranceidnumber != null) localVarFormParams.Add("insuranceidnumber", this.Configuration.ApiClient.ParameterToString(insuranceidnumber)); // form parameter
            if (insurancenote != null) localVarFormParams.Add("insurancenote", this.Configuration.ApiClient.ParameterToString(insurancenote)); // form parameter
            if (insurancephone != null) localVarFormParams.Add("insurancephone", this.Configuration.ApiClient.ParameterToString(insurancephone)); // form parameter
            if (insuranceplanname != null) localVarFormParams.Add("insuranceplanname", this.Configuration.ApiClient.ParameterToString(insuranceplanname)); // form parameter
            if (insurancepolicyholder != null) localVarFormParams.Add("insurancepolicyholder", this.Configuration.ApiClient.ParameterToString(insurancepolicyholder)); // form parameter
            if (nopatientcase != null) localVarFormParams.Add("nopatientcase", this.Configuration.ApiClient.ParameterToString(nopatientcase)); // form parameter
            if (reasonid != null) localVarFormParams.Add("reasonid", this.Configuration.ApiClient.ParameterToString(reasonid)); // form parameter
            if (urgentyn != null) localVarFormParams.Add("urgentyn", this.Configuration.ApiClient.ParameterToString(urgentyn)); // form parameter
            // authentication (defaultSecurityScheme) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BookAppointmentById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AppointmentArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AppointmentArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AppointmentArray)));
        }

        /// <summary>
        /// Set Information about a single patient&#x27;s appointment by id
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="patientid"></param>
        /// <param name="appointmenttypeid"></param>
        /// <param name="bookingnote"></param>
        /// <param name="departmentid"></param>
        /// <param name="donotsendconfirmationemail"></param>
        /// <param name="ignoreschedulablepermission"></param>
        /// <param name="insurancecompany"></param>
        /// <param name="insurancegroupid"></param>
        /// <param name="insuranceidnumber"></param>
        /// <param name="insurancenote"></param>
        /// <param name="insurancephone"></param>
        /// <param name="insuranceplanname"></param>
        /// <param name="insurancepolicyholder"></param>
        /// <param name="nopatientcase"></param>
        /// <param name="reasonid"></param>
        /// <param name="urgentyn"></param>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="appointmentId">Id of the appointment.</param>
        /// <returns>Task of AppointmentArray</returns>
        public async System.Threading.Tasks.Task<AppointmentArray> BookAppointmentByIdAsync (int? patientid, int? appointmenttypeid, string bookingnote, int? departmentid, bool? donotsendconfirmationemail, bool? ignoreschedulablepermission, string insurancecompany, string insurancegroupid, string insuranceidnumber, string insurancenote, string insurancephone, string insuranceplanname, string insurancepolicyholder, bool? nopatientcase, int? reasonid, bool? urgentyn, int? practiceid, string apivariant, int? appointmentId)
        {
             ApiResponse<AppointmentArray> localVarResponse = await BookAppointmentByIdAsyncWithHttpInfo(patientid, appointmenttypeid, bookingnote, departmentid, donotsendconfirmationemail, ignoreschedulablepermission, insurancecompany, insurancegroupid, insuranceidnumber, insurancenote, insurancephone, insuranceplanname, insurancepolicyholder, nopatientcase, reasonid, urgentyn, practiceid, apivariant, appointmentId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Set Information about a single patient&#x27;s appointment by id
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="patientid"></param>
        /// <param name="appointmenttypeid"></param>
        /// <param name="bookingnote"></param>
        /// <param name="departmentid"></param>
        /// <param name="donotsendconfirmationemail"></param>
        /// <param name="ignoreschedulablepermission"></param>
        /// <param name="insurancecompany"></param>
        /// <param name="insurancegroupid"></param>
        /// <param name="insuranceidnumber"></param>
        /// <param name="insurancenote"></param>
        /// <param name="insurancephone"></param>
        /// <param name="insuranceplanname"></param>
        /// <param name="insurancepolicyholder"></param>
        /// <param name="nopatientcase"></param>
        /// <param name="reasonid"></param>
        /// <param name="urgentyn"></param>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="appointmentId">Id of the appointment.</param>
        /// <returns>Task of ApiResponse (AppointmentArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AppointmentArray>> BookAppointmentByIdAsyncWithHttpInfo (int? patientid, int? appointmenttypeid, string bookingnote, int? departmentid, bool? donotsendconfirmationemail, bool? ignoreschedulablepermission, string insurancecompany, string insurancegroupid, string insuranceidnumber, string insurancenote, string insurancephone, string insuranceplanname, string insurancepolicyholder, bool? nopatientcase, int? reasonid, bool? urgentyn, int? practiceid, string apivariant, int? appointmentId)
        {
            // verify the required parameter 'patientid' is set
            if (patientid == null)
                throw new ApiException(400, "Missing required parameter 'patientid' when calling DefaultApi->BookAppointmentById");
            // verify the required parameter 'appointmenttypeid' is set
            if (appointmenttypeid == null)
                throw new ApiException(400, "Missing required parameter 'appointmenttypeid' when calling DefaultApi->BookAppointmentById");
            // verify the required parameter 'bookingnote' is set
            if (bookingnote == null)
                throw new ApiException(400, "Missing required parameter 'bookingnote' when calling DefaultApi->BookAppointmentById");
            // verify the required parameter 'departmentid' is set
            if (departmentid == null)
                throw new ApiException(400, "Missing required parameter 'departmentid' when calling DefaultApi->BookAppointmentById");
            // verify the required parameter 'donotsendconfirmationemail' is set
            if (donotsendconfirmationemail == null)
                throw new ApiException(400, "Missing required parameter 'donotsendconfirmationemail' when calling DefaultApi->BookAppointmentById");
            // verify the required parameter 'ignoreschedulablepermission' is set
            if (ignoreschedulablepermission == null)
                throw new ApiException(400, "Missing required parameter 'ignoreschedulablepermission' when calling DefaultApi->BookAppointmentById");
            // verify the required parameter 'insurancecompany' is set
            if (insurancecompany == null)
                throw new ApiException(400, "Missing required parameter 'insurancecompany' when calling DefaultApi->BookAppointmentById");
            // verify the required parameter 'insurancegroupid' is set
            if (insurancegroupid == null)
                throw new ApiException(400, "Missing required parameter 'insurancegroupid' when calling DefaultApi->BookAppointmentById");
            // verify the required parameter 'insuranceidnumber' is set
            if (insuranceidnumber == null)
                throw new ApiException(400, "Missing required parameter 'insuranceidnumber' when calling DefaultApi->BookAppointmentById");
            // verify the required parameter 'insurancenote' is set
            if (insurancenote == null)
                throw new ApiException(400, "Missing required parameter 'insurancenote' when calling DefaultApi->BookAppointmentById");
            // verify the required parameter 'insurancephone' is set
            if (insurancephone == null)
                throw new ApiException(400, "Missing required parameter 'insurancephone' when calling DefaultApi->BookAppointmentById");
            // verify the required parameter 'insuranceplanname' is set
            if (insuranceplanname == null)
                throw new ApiException(400, "Missing required parameter 'insuranceplanname' when calling DefaultApi->BookAppointmentById");
            // verify the required parameter 'insurancepolicyholder' is set
            if (insurancepolicyholder == null)
                throw new ApiException(400, "Missing required parameter 'insurancepolicyholder' when calling DefaultApi->BookAppointmentById");
            // verify the required parameter 'nopatientcase' is set
            if (nopatientcase == null)
                throw new ApiException(400, "Missing required parameter 'nopatientcase' when calling DefaultApi->BookAppointmentById");
            // verify the required parameter 'reasonid' is set
            if (reasonid == null)
                throw new ApiException(400, "Missing required parameter 'reasonid' when calling DefaultApi->BookAppointmentById");
            // verify the required parameter 'urgentyn' is set
            if (urgentyn == null)
                throw new ApiException(400, "Missing required parameter 'urgentyn' when calling DefaultApi->BookAppointmentById");
            // verify the required parameter 'practiceid' is set
            if (practiceid == null)
                throw new ApiException(400, "Missing required parameter 'practiceid' when calling DefaultApi->BookAppointmentById");
            // verify the required parameter 'apivariant' is set
            if (apivariant == null)
                throw new ApiException(400, "Missing required parameter 'apivariant' when calling DefaultApi->BookAppointmentById");
            // verify the required parameter 'appointmentId' is set
            if (appointmentId == null)
                throw new ApiException(400, "Missing required parameter 'appointmentId' when calling DefaultApi->BookAppointmentById");

            var localVarPath = "/{apivariant}/{practiceid}/appointments/{appointmentId}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
			object localVarPostBody = null;

			// to determine the Content-Type header
			string[] localVarHttpContentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };
			string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
			string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (practiceid != null) localVarPathParams.Add("practiceid", this.Configuration.ApiClient.ParameterToString(practiceid)); // path parameter
            if (apivariant != null) localVarPathParams.Add("apivariant", this.Configuration.ApiClient.ParameterToString(apivariant)); // path parameter
            if (appointmentId != null) localVarPathParams.Add("appointmentId", this.Configuration.ApiClient.ParameterToString(appointmentId)); // path parameter
            if (patientid != null) localVarFormParams.Add("patientid", this.Configuration.ApiClient.ParameterToString(patientid)); // form parameter
            if (appointmenttypeid != null) localVarFormParams.Add("appointmenttypeid", this.Configuration.ApiClient.ParameterToString(appointmenttypeid)); // form parameter
            if (bookingnote != null) localVarFormParams.Add("bookingnote", this.Configuration.ApiClient.ParameterToString(bookingnote)); // form parameter
            if (departmentid != null) localVarFormParams.Add("departmentid", this.Configuration.ApiClient.ParameterToString(departmentid)); // form parameter
            if (donotsendconfirmationemail != null) localVarFormParams.Add("donotsendconfirmationemail", this.Configuration.ApiClient.ParameterToString(donotsendconfirmationemail)); // form parameter
            if (ignoreschedulablepermission != null) localVarFormParams.Add("ignoreschedulablepermission", this.Configuration.ApiClient.ParameterToString(ignoreschedulablepermission)); // form parameter
            if (insurancecompany != null) localVarFormParams.Add("insurancecompany", this.Configuration.ApiClient.ParameterToString(insurancecompany)); // form parameter
            if (insurancegroupid != null) localVarFormParams.Add("insurancegroupid", this.Configuration.ApiClient.ParameterToString(insurancegroupid)); // form parameter
            if (insuranceidnumber != null) localVarFormParams.Add("insuranceidnumber", this.Configuration.ApiClient.ParameterToString(insuranceidnumber)); // form parameter
            if (insurancenote != null) localVarFormParams.Add("insurancenote", this.Configuration.ApiClient.ParameterToString(insurancenote)); // form parameter
            if (insurancephone != null) localVarFormParams.Add("insurancephone", this.Configuration.ApiClient.ParameterToString(insurancephone)); // form parameter
            if (insuranceplanname != null) localVarFormParams.Add("insuranceplanname", this.Configuration.ApiClient.ParameterToString(insuranceplanname)); // form parameter
            if (insurancepolicyholder != null) localVarFormParams.Add("insurancepolicyholder", this.Configuration.ApiClient.ParameterToString(insurancepolicyholder)); // form parameter
            if (nopatientcase != null) localVarFormParams.Add("nopatientcase", this.Configuration.ApiClient.ParameterToString(nopatientcase)); // form parameter
            if (reasonid != null) localVarFormParams.Add("reasonid", this.Configuration.ApiClient.ParameterToString(reasonid)); // form parameter
            if (urgentyn != null) localVarFormParams.Add("urgentyn", this.Configuration.ApiClient.ParameterToString(urgentyn)); // form parameter
            // authentication (defaultSecurityScheme) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BookAppointmentById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AppointmentArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AppointmentArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AppointmentArray)));
        }

        /// <summary>
        /// Cancel an existing appointment.
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="patientid"></param>
        /// <param name="appointmentcancelreasonid"></param>
        /// <param name="cancellationreason"></param>
        /// <param name="departmentid"></param>
        /// <param name="ignoreschedulablepermission"></param>
        /// <param name="nopatientcase"></param>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="appointmentId">Id of the appointment.</param>
        /// <returns>OperationStatusData</returns>
        public OperationStatusData CancelAppointmentById (int? patientid, int? appointmentcancelreasonid, string cancellationreason, int? departmentid, bool? ignoreschedulablepermission, bool? nopatientcase, int? practiceid, string apivariant, int? appointmentId)
        {
             ApiResponse<OperationStatusData> localVarResponse = CancelAppointmentByIdWithHttpInfo(patientid, appointmentcancelreasonid, cancellationreason, departmentid, ignoreschedulablepermission, nopatientcase, practiceid, apivariant, appointmentId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel an existing appointment.
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="patientid"></param>
        /// <param name="appointmentcancelreasonid"></param>
        /// <param name="cancellationreason"></param>
        /// <param name="departmentid"></param>
        /// <param name="ignoreschedulablepermission"></param>
        /// <param name="nopatientcase"></param>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="appointmentId">Id of the appointment.</param>
        /// <returns>ApiResponse of OperationStatusData</returns>
        public ApiResponse< OperationStatusData > CancelAppointmentByIdWithHttpInfo (int? patientid, int? appointmentcancelreasonid, string cancellationreason, int? departmentid, bool? ignoreschedulablepermission, bool? nopatientcase, int? practiceid, string apivariant, int? appointmentId)
        {
            // verify the required parameter 'patientid' is set
            if (patientid == null)
                throw new ApiException(400, "Missing required parameter 'patientid' when calling DefaultApi->CancelAppointmentById");
            // verify the required parameter 'appointmentcancelreasonid' is set
            if (appointmentcancelreasonid == null)
                throw new ApiException(400, "Missing required parameter 'appointmentcancelreasonid' when calling DefaultApi->CancelAppointmentById");
            // verify the required parameter 'cancellationreason' is set
            if (cancellationreason == null)
                throw new ApiException(400, "Missing required parameter 'cancellationreason' when calling DefaultApi->CancelAppointmentById");
            // verify the required parameter 'departmentid' is set
            if (departmentid == null)
                throw new ApiException(400, "Missing required parameter 'departmentid' when calling DefaultApi->CancelAppointmentById");
            // verify the required parameter 'ignoreschedulablepermission' is set
            if (ignoreschedulablepermission == null)
                throw new ApiException(400, "Missing required parameter 'ignoreschedulablepermission' when calling DefaultApi->CancelAppointmentById");
            // verify the required parameter 'nopatientcase' is set
            if (nopatientcase == null)
                throw new ApiException(400, "Missing required parameter 'nopatientcase' when calling DefaultApi->CancelAppointmentById");
            // verify the required parameter 'practiceid' is set
            if (practiceid == null)
                throw new ApiException(400, "Missing required parameter 'practiceid' when calling DefaultApi->CancelAppointmentById");
            // verify the required parameter 'apivariant' is set
            if (apivariant == null)
                throw new ApiException(400, "Missing required parameter 'apivariant' when calling DefaultApi->CancelAppointmentById");
            // verify the required parameter 'appointmentId' is set
            if (appointmentId == null)
                throw new ApiException(400, "Missing required parameter 'appointmentId' when calling DefaultApi->CancelAppointmentById");

            var localVarPath = "/{apivariant}/{practiceid}/appointments/{appointmentId}/cancel";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
			object localVarPostBody = null;

			// to determine the Content-Type header
			string[] localVarHttpContentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };
			string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
			string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (practiceid != null) localVarPathParams.Add("practiceid", this.Configuration.ApiClient.ParameterToString(practiceid)); // path parameter
            if (apivariant != null) localVarPathParams.Add("apivariant", this.Configuration.ApiClient.ParameterToString(apivariant)); // path parameter
            if (appointmentId != null) localVarPathParams.Add("appointmentId", this.Configuration.ApiClient.ParameterToString(appointmentId)); // path parameter
            if (patientid != null) localVarFormParams.Add("patientid", this.Configuration.ApiClient.ParameterToString(patientid)); // form parameter
            if (appointmentcancelreasonid != null) localVarFormParams.Add("appointmentcancelreasonid", this.Configuration.ApiClient.ParameterToString(appointmentcancelreasonid)); // form parameter
            if (cancellationreason != null) localVarFormParams.Add("cancellationreason", this.Configuration.ApiClient.ParameterToString(cancellationreason)); // form parameter
            if (departmentid != null) localVarFormParams.Add("departmentid", this.Configuration.ApiClient.ParameterToString(departmentid)); // form parameter
            if (ignoreschedulablepermission != null) localVarFormParams.Add("ignoreschedulablepermission", this.Configuration.ApiClient.ParameterToString(ignoreschedulablepermission)); // form parameter
            if (nopatientcase != null) localVarFormParams.Add("nopatientcase", this.Configuration.ApiClient.ParameterToString(nopatientcase)); // form parameter
            // authentication (defaultSecurityScheme) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelAppointmentById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OperationStatusData>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OperationStatusData) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OperationStatusData)));
        }

        /// <summary>
        /// Cancel an existing appointment.
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="patientid"></param>
        /// <param name="appointmentcancelreasonid"></param>
        /// <param name="cancellationreason"></param>
        /// <param name="departmentid"></param>
        /// <param name="ignoreschedulablepermission"></param>
        /// <param name="nopatientcase"></param>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="appointmentId">Id of the appointment.</param>
        /// <returns>Task of OperationStatusData</returns>
        public async System.Threading.Tasks.Task<OperationStatusData> CancelAppointmentByIdAsync (int? patientid, int? appointmentcancelreasonid, string cancellationreason, int? departmentid, bool? ignoreschedulablepermission, bool? nopatientcase, int? practiceid, string apivariant, int? appointmentId)
        {
             ApiResponse<OperationStatusData> localVarResponse = await CancelAppointmentByIdAsyncWithHttpInfo(patientid, appointmentcancelreasonid, cancellationreason, departmentid, ignoreschedulablepermission, nopatientcase, practiceid, apivariant, appointmentId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Cancel an existing appointment.
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="patientid"></param>
        /// <param name="appointmentcancelreasonid"></param>
        /// <param name="cancellationreason"></param>
        /// <param name="departmentid"></param>
        /// <param name="ignoreschedulablepermission"></param>
        /// <param name="nopatientcase"></param>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="appointmentId">Id of the appointment.</param>
        /// <returns>Task of ApiResponse (OperationStatusData)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OperationStatusData>> CancelAppointmentByIdAsyncWithHttpInfo (int? patientid, int? appointmentcancelreasonid, string cancellationreason, int? departmentid, bool? ignoreschedulablepermission, bool? nopatientcase, int? practiceid, string apivariant, int? appointmentId)
        {
            // verify the required parameter 'patientid' is set
            if (patientid == null)
                throw new ApiException(400, "Missing required parameter 'patientid' when calling DefaultApi->CancelAppointmentById");
            // verify the required parameter 'appointmentcancelreasonid' is set
            if (appointmentcancelreasonid == null)
                throw new ApiException(400, "Missing required parameter 'appointmentcancelreasonid' when calling DefaultApi->CancelAppointmentById");
            // verify the required parameter 'cancellationreason' is set
            if (cancellationreason == null)
                throw new ApiException(400, "Missing required parameter 'cancellationreason' when calling DefaultApi->CancelAppointmentById");
            // verify the required parameter 'departmentid' is set
            if (departmentid == null)
                throw new ApiException(400, "Missing required parameter 'departmentid' when calling DefaultApi->CancelAppointmentById");
            // verify the required parameter 'ignoreschedulablepermission' is set
            if (ignoreschedulablepermission == null)
                throw new ApiException(400, "Missing required parameter 'ignoreschedulablepermission' when calling DefaultApi->CancelAppointmentById");
            // verify the required parameter 'nopatientcase' is set
            if (nopatientcase == null)
                throw new ApiException(400, "Missing required parameter 'nopatientcase' when calling DefaultApi->CancelAppointmentById");
            // verify the required parameter 'practiceid' is set
            if (practiceid == null)
                throw new ApiException(400, "Missing required parameter 'practiceid' when calling DefaultApi->CancelAppointmentById");
            // verify the required parameter 'apivariant' is set
            if (apivariant == null)
                throw new ApiException(400, "Missing required parameter 'apivariant' when calling DefaultApi->CancelAppointmentById");
            // verify the required parameter 'appointmentId' is set
            if (appointmentId == null)
                throw new ApiException(400, "Missing required parameter 'appointmentId' when calling DefaultApi->CancelAppointmentById");

            var localVarPath = "/{apivariant}/{practiceid}/appointments/{appointmentId}/cancel";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
			object localVarPostBody = null;

			// to determine the Content-Type header
			string[] localVarHttpContentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };
			string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
			string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (practiceid != null) localVarPathParams.Add("practiceid", this.Configuration.ApiClient.ParameterToString(practiceid)); // path parameter
            if (apivariant != null) localVarPathParams.Add("apivariant", this.Configuration.ApiClient.ParameterToString(apivariant)); // path parameter
            if (appointmentId != null) localVarPathParams.Add("appointmentId", this.Configuration.ApiClient.ParameterToString(appointmentId)); // path parameter
            if (patientid != null) localVarFormParams.Add("patientid", this.Configuration.ApiClient.ParameterToString(patientid)); // form parameter
            if (appointmentcancelreasonid != null) localVarFormParams.Add("appointmentcancelreasonid", this.Configuration.ApiClient.ParameterToString(appointmentcancelreasonid)); // form parameter
            if (cancellationreason != null) localVarFormParams.Add("cancellationreason", this.Configuration.ApiClient.ParameterToString(cancellationreason)); // form parameter
            if (departmentid != null) localVarFormParams.Add("departmentid", this.Configuration.ApiClient.ParameterToString(departmentid)); // form parameter
            if (ignoreschedulablepermission != null) localVarFormParams.Add("ignoreschedulablepermission", this.Configuration.ApiClient.ParameterToString(ignoreschedulablepermission)); // form parameter
            if (nopatientcase != null) localVarFormParams.Add("nopatientcase", this.Configuration.ApiClient.ParameterToString(nopatientcase)); // form parameter
            // authentication (defaultSecurityScheme) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelAppointmentById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OperationStatusData>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OperationStatusData) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OperationStatusData)));
        }

        /// <summary>
        /// Creates new appointment type
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="duration"></param>
        /// <param name="generic"></param>
        /// <param name="name"></param>
        /// <param name="patient"></param>
        /// <param name="shortname"></param>
        /// <param name="templatetypeonly"></param>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <returns>InlineResponse2001</returns>
        public InlineResponse2001 CreateAppointmentType (int? duration, bool? generic, string name, bool? patient, string shortname, bool? templatetypeonly, int? practiceid, string apivariant)
        {
             ApiResponse<InlineResponse2001> localVarResponse = CreateAppointmentTypeWithHttpInfo(duration, generic, name, patient, shortname, templatetypeonly, practiceid, apivariant);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates new appointment type
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="duration"></param>
        /// <param name="generic"></param>
        /// <param name="name"></param>
        /// <param name="patient"></param>
        /// <param name="shortname"></param>
        /// <param name="templatetypeonly"></param>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        public ApiResponse< InlineResponse2001 > CreateAppointmentTypeWithHttpInfo (int? duration, bool? generic, string name, bool? patient, string shortname, bool? templatetypeonly, int? practiceid, string apivariant)
        {
            // verify the required parameter 'duration' is set
            if (duration == null)
                throw new ApiException(400, "Missing required parameter 'duration' when calling DefaultApi->CreateAppointmentType");
            // verify the required parameter 'generic' is set
            if (generic == null)
                throw new ApiException(400, "Missing required parameter 'generic' when calling DefaultApi->CreateAppointmentType");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling DefaultApi->CreateAppointmentType");
            // verify the required parameter 'patient' is set
            if (patient == null)
                throw new ApiException(400, "Missing required parameter 'patient' when calling DefaultApi->CreateAppointmentType");
            // verify the required parameter 'shortname' is set
            if (shortname == null)
                throw new ApiException(400, "Missing required parameter 'shortname' when calling DefaultApi->CreateAppointmentType");
            // verify the required parameter 'templatetypeonly' is set
            if (templatetypeonly == null)
                throw new ApiException(400, "Missing required parameter 'templatetypeonly' when calling DefaultApi->CreateAppointmentType");
            // verify the required parameter 'practiceid' is set
            if (practiceid == null)
                throw new ApiException(400, "Missing required parameter 'practiceid' when calling DefaultApi->CreateAppointmentType");
            // verify the required parameter 'apivariant' is set
            if (apivariant == null)
                throw new ApiException(400, "Missing required parameter 'apivariant' when calling DefaultApi->CreateAppointmentType");

            var localVarPath = "/{apivariant}/{practiceid}/appointmenttypes";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
			object localVarPostBody = null;

			// to determine the Content-Type header
			string[] localVarHttpContentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };
			string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
			string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (practiceid != null) localVarPathParams.Add("practiceid", this.Configuration.ApiClient.ParameterToString(practiceid)); // path parameter
            if (apivariant != null) localVarPathParams.Add("apivariant", this.Configuration.ApiClient.ParameterToString(apivariant)); // path parameter
            if (duration != null) localVarFormParams.Add("duration", this.Configuration.ApiClient.ParameterToString(duration)); // form parameter
            if (generic != null) localVarFormParams.Add("generic", this.Configuration.ApiClient.ParameterToString(generic)); // form parameter
            if (name != null) localVarFormParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // form parameter
            if (patient != null) localVarFormParams.Add("patient", this.Configuration.ApiClient.ParameterToString(patient)); // form parameter
            if (shortname != null) localVarFormParams.Add("shortname", this.Configuration.ApiClient.ParameterToString(shortname)); // form parameter
            if (templatetypeonly != null) localVarFormParams.Add("templatetypeonly", this.Configuration.ApiClient.ParameterToString(templatetypeonly)); // form parameter
            // authentication (defaultSecurityScheme) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAppointmentType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2001) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
        }

        /// <summary>
        /// Creates new appointment type
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="duration"></param>
        /// <param name="generic"></param>
        /// <param name="name"></param>
        /// <param name="patient"></param>
        /// <param name="shortname"></param>
        /// <param name="templatetypeonly"></param>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <returns>Task of InlineResponse2001</returns>
        public async System.Threading.Tasks.Task<InlineResponse2001> CreateAppointmentTypeAsync (int? duration, bool? generic, string name, bool? patient, string shortname, bool? templatetypeonly, int? practiceid, string apivariant)
        {
             ApiResponse<InlineResponse2001> localVarResponse = await CreateAppointmentTypeAsyncWithHttpInfo(duration, generic, name, patient, shortname, templatetypeonly, practiceid, apivariant);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates new appointment type
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="duration"></param>
        /// <param name="generic"></param>
        /// <param name="name"></param>
        /// <param name="patient"></param>
        /// <param name="shortname"></param>
        /// <param name="templatetypeonly"></param>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> CreateAppointmentTypeAsyncWithHttpInfo (int? duration, bool? generic, string name, bool? patient, string shortname, bool? templatetypeonly, int? practiceid, string apivariant)
        {
            // verify the required parameter 'duration' is set
            if (duration == null)
                throw new ApiException(400, "Missing required parameter 'duration' when calling DefaultApi->CreateAppointmentType");
            // verify the required parameter 'generic' is set
            if (generic == null)
                throw new ApiException(400, "Missing required parameter 'generic' when calling DefaultApi->CreateAppointmentType");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling DefaultApi->CreateAppointmentType");
            // verify the required parameter 'patient' is set
            if (patient == null)
                throw new ApiException(400, "Missing required parameter 'patient' when calling DefaultApi->CreateAppointmentType");
            // verify the required parameter 'shortname' is set
            if (shortname == null)
                throw new ApiException(400, "Missing required parameter 'shortname' when calling DefaultApi->CreateAppointmentType");
            // verify the required parameter 'templatetypeonly' is set
            if (templatetypeonly == null)
                throw new ApiException(400, "Missing required parameter 'templatetypeonly' when calling DefaultApi->CreateAppointmentType");
            // verify the required parameter 'practiceid' is set
            if (practiceid == null)
                throw new ApiException(400, "Missing required parameter 'practiceid' when calling DefaultApi->CreateAppointmentType");
            // verify the required parameter 'apivariant' is set
            if (apivariant == null)
                throw new ApiException(400, "Missing required parameter 'apivariant' when calling DefaultApi->CreateAppointmentType");

            var localVarPath = "/{apivariant}/{practiceid}/appointmenttypes";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
			object localVarPostBody = null;

			// to determine the Content-Type header
			string[] localVarHttpContentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };
			string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
			string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (practiceid != null) localVarPathParams.Add("practiceid", this.Configuration.ApiClient.ParameterToString(practiceid)); // path parameter
            if (apivariant != null) localVarPathParams.Add("apivariant", this.Configuration.ApiClient.ParameterToString(apivariant)); // path parameter
            if (duration != null) localVarFormParams.Add("duration", this.Configuration.ApiClient.ParameterToString(duration)); // form parameter
            if (generic != null) localVarFormParams.Add("generic", this.Configuration.ApiClient.ParameterToString(generic)); // form parameter
            if (name != null) localVarFormParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // form parameter
            if (patient != null) localVarFormParams.Add("patient", this.Configuration.ApiClient.ParameterToString(patient)); // form parameter
            if (shortname != null) localVarFormParams.Add("shortname", this.Configuration.ApiClient.ParameterToString(shortname)); // form parameter
            if (templatetypeonly != null) localVarFormParams.Add("templatetypeonly", this.Configuration.ApiClient.ParameterToString(templatetypeonly)); // form parameter
            // authentication (defaultSecurityScheme) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAppointmentType", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2001) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
        }

        /// <summary>
        /// Register new patient
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address1"></param>
        /// <param name="address2"></param>
        /// <param name="city"></param>
        /// <param name="departmentid"></param>
        /// <param name="dob"></param>
        /// <param name="email"></param>
        /// <param name="firstname"></param>
        /// <param name="homephone"></param>
        /// <param name="lastname"></param>
        /// <param name="mobilephone"></param>
        /// <param name="state"></param>
        /// <param name="zip"></param>
        /// <param name="sex"></param>
        /// <param name="race"></param>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <returns>List{PatientCreatedResponse}</returns>
        public List<PatientCreatedResponse> CreatePatient (string address1, string address2, string city, int? departmentid, string dob, string email, string firstname, string homephone, string lastname, string mobilephone, string state, string zip, string sex, string race, int? practiceid, string apivariant)
        {
             ApiResponse<List<PatientCreatedResponse>> localVarResponse = CreatePatientWithHttpInfo(address1, address2, city, departmentid, dob, email, firstname, homephone, lastname, mobilephone, state, zip, sex, race, practiceid, apivariant);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Register new patient
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address1"></param>
        /// <param name="address2"></param>
        /// <param name="city"></param>
        /// <param name="departmentid"></param>
        /// <param name="dob"></param>
        /// <param name="email"></param>
        /// <param name="firstname"></param>
        /// <param name="homephone"></param>
        /// <param name="lastname"></param>
        /// <param name="mobilephone"></param>
        /// <param name="state"></param>
        /// <param name="zip"></param>
        /// <param name="sex"></param>
        /// <param name="race"></param>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <returns>ApiResponse of List{PatientCreatedResponse}</returns>
        public ApiResponse< List<PatientCreatedResponse> > CreatePatientWithHttpInfo (string address1, string address2, string city, int? departmentid, string dob, string email, string firstname, string homephone, string lastname, string mobilephone, string state, string zip, string sex, string race, int? practiceid, string apivariant)
        {
            // verify the required parameter 'address1' is set
            if (address1 == null)
                throw new ApiException(400, "Missing required parameter 'address1' when calling DefaultApi->CreatePatient");
            // verify the required parameter 'address2' is set
            if (address2 == null)
                throw new ApiException(400, "Missing required parameter 'address2' when calling DefaultApi->CreatePatient");
            // verify the required parameter 'city' is set
            if (city == null)
                throw new ApiException(400, "Missing required parameter 'city' when calling DefaultApi->CreatePatient");
            // verify the required parameter 'departmentid' is set
            if (departmentid == null)
                throw new ApiException(400, "Missing required parameter 'departmentid' when calling DefaultApi->CreatePatient");
            // verify the required parameter 'dob' is set
            if (dob == null)
                throw new ApiException(400, "Missing required parameter 'dob' when calling DefaultApi->CreatePatient");
            // verify the required parameter 'email' is set
            if (email == null)
                throw new ApiException(400, "Missing required parameter 'email' when calling DefaultApi->CreatePatient");
            // verify the required parameter 'firstname' is set
            if (firstname == null)
                throw new ApiException(400, "Missing required parameter 'firstname' when calling DefaultApi->CreatePatient");
            // verify the required parameter 'homephone' is set
            if (homephone == null)
                throw new ApiException(400, "Missing required parameter 'homephone' when calling DefaultApi->CreatePatient");
            // verify the required parameter 'lastname' is set
            if (lastname == null)
                throw new ApiException(400, "Missing required parameter 'lastname' when calling DefaultApi->CreatePatient");
            // verify the required parameter 'mobilephone' is set
            if (mobilephone == null)
                throw new ApiException(400, "Missing required parameter 'mobilephone' when calling DefaultApi->CreatePatient");
            // verify the required parameter 'state' is set
            if (state == null)
                throw new ApiException(400, "Missing required parameter 'state' when calling DefaultApi->CreatePatient");
            // verify the required parameter 'zip' is set
            if (zip == null)
                throw new ApiException(400, "Missing required parameter 'zip' when calling DefaultApi->CreatePatient");
            // verify the required parameter 'sex' is set
            if (sex == null)
                throw new ApiException(400, "Missing required parameter 'sex' when calling DefaultApi->CreatePatient");
            // verify the required parameter 'race' is set
            if (race == null)
                throw new ApiException(400, "Missing required parameter 'race' when calling DefaultApi->CreatePatient");
            // verify the required parameter 'practiceid' is set
            if (practiceid == null)
                throw new ApiException(400, "Missing required parameter 'practiceid' when calling DefaultApi->CreatePatient");
            // verify the required parameter 'apivariant' is set
            if (apivariant == null)
                throw new ApiException(400, "Missing required parameter 'apivariant' when calling DefaultApi->CreatePatient");

            var localVarPath = "/{apivariant}/{practiceid}/patients";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
			object localVarPostBody = null;

			// to determine the Content-Type header
			string[] localVarHttpContentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };
			string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
			string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (practiceid != null) localVarPathParams.Add("practiceid", this.Configuration.ApiClient.ParameterToString(practiceid)); // path parameter
            if (apivariant != null) localVarPathParams.Add("apivariant", this.Configuration.ApiClient.ParameterToString(apivariant)); // path parameter
            if (address1 != null) localVarFormParams.Add("address1", this.Configuration.ApiClient.ParameterToString(address1)); // form parameter
            if (address2 != null) localVarFormParams.Add("address2", this.Configuration.ApiClient.ParameterToString(address2)); // form parameter
            if (city != null) localVarFormParams.Add("city", this.Configuration.ApiClient.ParameterToString(city)); // form parameter
            if (departmentid != null) localVarFormParams.Add("departmentid", this.Configuration.ApiClient.ParameterToString(departmentid)); // form parameter
            if (dob != null) localVarFormParams.Add("dob", this.Configuration.ApiClient.ParameterToString(dob)); // form parameter
            if (email != null) localVarFormParams.Add("email", this.Configuration.ApiClient.ParameterToString(email)); // form parameter
            if (firstname != null) localVarFormParams.Add("firstname", this.Configuration.ApiClient.ParameterToString(firstname)); // form parameter
            if (homephone != null) localVarFormParams.Add("homephone", this.Configuration.ApiClient.ParameterToString(homephone)); // form parameter
            if (lastname != null) localVarFormParams.Add("lastname", this.Configuration.ApiClient.ParameterToString(lastname)); // form parameter
            if (mobilephone != null) localVarFormParams.Add("mobilephone", this.Configuration.ApiClient.ParameterToString(mobilephone)); // form parameter
            if (state != null) localVarFormParams.Add("state", this.Configuration.ApiClient.ParameterToString(state)); // form parameter
            if (zip != null) localVarFormParams.Add("zip", this.Configuration.ApiClient.ParameterToString(zip)); // form parameter
            if (sex != null) localVarFormParams.Add("sex", this.Configuration.ApiClient.ParameterToString(sex)); // form parameter
            if (race != null) localVarFormParams.Add("race", this.Configuration.ApiClient.ParameterToString(race)); // form parameter
            // authentication (defaultSecurityScheme) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreatePatient", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PatientCreatedResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<PatientCreatedResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PatientCreatedResponse>)));
        }

        /// <summary>
        /// Register new patient
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address1"></param>
        /// <param name="address2"></param>
        /// <param name="city"></param>
        /// <param name="departmentid"></param>
        /// <param name="dob"></param>
        /// <param name="email"></param>
        /// <param name="firstname"></param>
        /// <param name="homephone"></param>
        /// <param name="lastname"></param>
        /// <param name="mobilephone"></param>
        /// <param name="state"></param>
        /// <param name="zip"></param>
        /// <param name="sex"></param>
        /// <param name="race"></param>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <returns>Task of List{PatientCreatedResponse}</returns>
        public async System.Threading.Tasks.Task<List<PatientCreatedResponse>> CreatePatientAsync (string address1, string address2, string city, int? departmentid, string dob, string email, string firstname, string homephone, string lastname, string mobilephone, string state, string zip, string sex, string race, int? practiceid, string apivariant)
        {
             ApiResponse<List<PatientCreatedResponse>> localVarResponse = await CreatePatientAsyncWithHttpInfo(address1, address2, city, departmentid, dob, email, firstname, homephone, lastname, mobilephone, state, zip, sex, race, practiceid, apivariant);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Register new patient
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address1"></param>
        /// <param name="address2"></param>
        /// <param name="city"></param>
        /// <param name="departmentid"></param>
        /// <param name="dob"></param>
        /// <param name="email"></param>
        /// <param name="firstname"></param>
        /// <param name="homephone"></param>
        /// <param name="lastname"></param>
        /// <param name="mobilephone"></param>
        /// <param name="state"></param>
        /// <param name="zip"></param>
        /// <param name="sex"></param>
        /// <param name="race"></param>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <returns>Task of ApiResponse (List{PatientCreatedResponse})</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<PatientCreatedResponse>>> CreatePatientAsyncWithHttpInfo (string address1, string address2, string city, int? departmentid, string dob, string email, string firstname, string homephone, string lastname, string mobilephone, string state, string zip, string sex, string race, int? practiceid, string apivariant)
        {
            // verify the required parameter 'address1' is set
            if (address1 == null)
                throw new ApiException(400, "Missing required parameter 'address1' when calling DefaultApi->CreatePatient");
            // verify the required parameter 'address2' is set
            if (address2 == null)
                throw new ApiException(400, "Missing required parameter 'address2' when calling DefaultApi->CreatePatient");
            // verify the required parameter 'city' is set
            if (city == null)
                throw new ApiException(400, "Missing required parameter 'city' when calling DefaultApi->CreatePatient");
            // verify the required parameter 'departmentid' is set
            if (departmentid == null)
                throw new ApiException(400, "Missing required parameter 'departmentid' when calling DefaultApi->CreatePatient");
            // verify the required parameter 'dob' is set
            if (dob == null)
                throw new ApiException(400, "Missing required parameter 'dob' when calling DefaultApi->CreatePatient");
            // verify the required parameter 'email' is set
            if (email == null)
                throw new ApiException(400, "Missing required parameter 'email' when calling DefaultApi->CreatePatient");
            // verify the required parameter 'firstname' is set
            if (firstname == null)
                throw new ApiException(400, "Missing required parameter 'firstname' when calling DefaultApi->CreatePatient");
            // verify the required parameter 'homephone' is set
            if (homephone == null)
                throw new ApiException(400, "Missing required parameter 'homephone' when calling DefaultApi->CreatePatient");
            // verify the required parameter 'lastname' is set
            if (lastname == null)
                throw new ApiException(400, "Missing required parameter 'lastname' when calling DefaultApi->CreatePatient");
            // verify the required parameter 'mobilephone' is set
            if (mobilephone == null)
                throw new ApiException(400, "Missing required parameter 'mobilephone' when calling DefaultApi->CreatePatient");
            // verify the required parameter 'state' is set
            if (state == null)
                throw new ApiException(400, "Missing required parameter 'state' when calling DefaultApi->CreatePatient");
            // verify the required parameter 'zip' is set
            if (zip == null)
                throw new ApiException(400, "Missing required parameter 'zip' when calling DefaultApi->CreatePatient");
            // verify the required parameter 'sex' is set
            if (sex == null)
                throw new ApiException(400, "Missing required parameter 'sex' when calling DefaultApi->CreatePatient");
            // verify the required parameter 'race' is set
            if (race == null)
                throw new ApiException(400, "Missing required parameter 'race' when calling DefaultApi->CreatePatient");
            // verify the required parameter 'practiceid' is set
            if (practiceid == null)
                throw new ApiException(400, "Missing required parameter 'practiceid' when calling DefaultApi->CreatePatient");
            // verify the required parameter 'apivariant' is set
            if (apivariant == null)
                throw new ApiException(400, "Missing required parameter 'apivariant' when calling DefaultApi->CreatePatient");

            var localVarPath = "/{apivariant}/{practiceid}/patients";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
			object localVarPostBody = null;

			// to determine the Content-Type header
			string[] localVarHttpContentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };
			string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
			string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (practiceid != null) localVarPathParams.Add("practiceid", this.Configuration.ApiClient.ParameterToString(practiceid)); // path parameter
            if (apivariant != null) localVarPathParams.Add("apivariant", this.Configuration.ApiClient.ParameterToString(apivariant)); // path parameter
            if (address1 != null) localVarFormParams.Add("address1", this.Configuration.ApiClient.ParameterToString(address1)); // form parameter
            if (address2 != null) localVarFormParams.Add("address2", this.Configuration.ApiClient.ParameterToString(address2)); // form parameter
            if (city != null) localVarFormParams.Add("city", this.Configuration.ApiClient.ParameterToString(city)); // form parameter
            if (departmentid != null) localVarFormParams.Add("departmentid", this.Configuration.ApiClient.ParameterToString(departmentid)); // form parameter
            if (dob != null) localVarFormParams.Add("dob", this.Configuration.ApiClient.ParameterToString(dob)); // form parameter
            if (email != null) localVarFormParams.Add("email", this.Configuration.ApiClient.ParameterToString(email)); // form parameter
            if (firstname != null) localVarFormParams.Add("firstname", this.Configuration.ApiClient.ParameterToString(firstname)); // form parameter
            if (homephone != null) localVarFormParams.Add("homephone", this.Configuration.ApiClient.ParameterToString(homephone)); // form parameter
            if (lastname != null) localVarFormParams.Add("lastname", this.Configuration.ApiClient.ParameterToString(lastname)); // form parameter
            if (mobilephone != null) localVarFormParams.Add("mobilephone", this.Configuration.ApiClient.ParameterToString(mobilephone)); // form parameter
            if (state != null) localVarFormParams.Add("state", this.Configuration.ApiClient.ParameterToString(state)); // form parameter
            if (zip != null) localVarFormParams.Add("zip", this.Configuration.ApiClient.ParameterToString(zip)); // form parameter
            if (sex != null) localVarFormParams.Add("sex", this.Configuration.ApiClient.ParameterToString(sex)); // form parameter
            if (race != null) localVarFormParams.Add("race", this.Configuration.ApiClient.ParameterToString(race)); // form parameter
            // authentication (defaultSecurityScheme) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreatePatient", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PatientCreatedResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<PatientCreatedResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PatientCreatedResponse>)));
        }

        /// <summary>
        /// Create single lab result
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessionid"></param>
        /// <param name="analytes"></param>
        /// <param name="attachmentcontents"></param>
        /// <param name="attachmenttype"></param>
        /// <param name="autoclose"></param>
        /// <param name="departmentid"></param>
        /// <param name="documenttypeid"></param>
        /// <param name="facilityid"></param>
        /// <param name="internalnote"></param>
        /// <param name="interpretation"></param>
        /// <param name="observationdate"></param>
        /// <param name="observationtime"></param>
        /// <param name="priority"></param>
        /// <param name="providerid"></param>
        /// <param name="reportstatus"></param>
        /// <param name="resultstatus"></param>
        /// <param name="specimenreceiveddatetime"></param>
        /// <param name="specimenreporteddatetime"></param>
        /// <param name="tietoorderid"></param>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="patientId">Id of the patient for which get information</param>
        /// <returns>CreateLabResultDocumentResponse</returns>
        public CreateLabResultDocumentResponse CreatePatientLabResultDocument (string accessionid, string analytes, string attachmentcontents, string attachmenttype, string autoclose, int? departmentid, int? documenttypeid, int? facilityid, string internalnote, string interpretation, string observationdate, string observationtime, string priority, int? providerid, string reportstatus, string resultstatus, string specimenreceiveddatetime, string specimenreporteddatetime, int? tietoorderid, int? practiceid, string apivariant, int? patientId)
        {
             ApiResponse<CreateLabResultDocumentResponse> localVarResponse = CreatePatientLabResultDocumentWithHttpInfo(accessionid, analytes, attachmentcontents, attachmenttype, autoclose, departmentid, documenttypeid, facilityid, internalnote, interpretation, observationdate, observationtime, priority, providerid, reportstatus, resultstatus, specimenreceiveddatetime, specimenreporteddatetime, tietoorderid, practiceid, apivariant, patientId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create single lab result
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessionid"></param>
        /// <param name="analytes"></param>
        /// <param name="attachmentcontents"></param>
        /// <param name="attachmenttype"></param>
        /// <param name="autoclose"></param>
        /// <param name="departmentid"></param>
        /// <param name="documenttypeid"></param>
        /// <param name="facilityid"></param>
        /// <param name="internalnote"></param>
        /// <param name="interpretation"></param>
        /// <param name="observationdate"></param>
        /// <param name="observationtime"></param>
        /// <param name="priority"></param>
        /// <param name="providerid"></param>
        /// <param name="reportstatus"></param>
        /// <param name="resultstatus"></param>
        /// <param name="specimenreceiveddatetime"></param>
        /// <param name="specimenreporteddatetime"></param>
        /// <param name="tietoorderid"></param>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="patientId">Id of the patient for which get information</param>
        /// <returns>ApiResponse of CreateLabResultDocumentResponse</returns>
        public ApiResponse< CreateLabResultDocumentResponse > CreatePatientLabResultDocumentWithHttpInfo (string accessionid, string analytes, string attachmentcontents, string attachmenttype, string autoclose, int? departmentid, int? documenttypeid, int? facilityid, string internalnote, string interpretation, string observationdate, string observationtime, string priority, int? providerid, string reportstatus, string resultstatus, string specimenreceiveddatetime, string specimenreporteddatetime, int? tietoorderid, int? practiceid, string apivariant, int? patientId)
        {
            // verify the required parameter 'accessionid' is set
            if (accessionid == null)
                throw new ApiException(400, "Missing required parameter 'accessionid' when calling DefaultApi->CreatePatientLabResultDocument");
            // verify the required parameter 'analytes' is set
            if (analytes == null)
                throw new ApiException(400, "Missing required parameter 'analytes' when calling DefaultApi->CreatePatientLabResultDocument");
            // verify the required parameter 'attachmentcontents' is set
            if (attachmentcontents == null)
                throw new ApiException(400, "Missing required parameter 'attachmentcontents' when calling DefaultApi->CreatePatientLabResultDocument");
            // verify the required parameter 'attachmenttype' is set
            if (attachmenttype == null)
                throw new ApiException(400, "Missing required parameter 'attachmenttype' when calling DefaultApi->CreatePatientLabResultDocument");
            // verify the required parameter 'autoclose' is set
            if (autoclose == null)
                throw new ApiException(400, "Missing required parameter 'autoclose' when calling DefaultApi->CreatePatientLabResultDocument");
            // verify the required parameter 'departmentid' is set
            if (departmentid == null)
                throw new ApiException(400, "Missing required parameter 'departmentid' when calling DefaultApi->CreatePatientLabResultDocument");
            // verify the required parameter 'documenttypeid' is set
            if (documenttypeid == null)
                throw new ApiException(400, "Missing required parameter 'documenttypeid' when calling DefaultApi->CreatePatientLabResultDocument");
            // verify the required parameter 'facilityid' is set
            if (facilityid == null)
                throw new ApiException(400, "Missing required parameter 'facilityid' when calling DefaultApi->CreatePatientLabResultDocument");
            // verify the required parameter 'internalnote' is set
            if (internalnote == null)
                throw new ApiException(400, "Missing required parameter 'internalnote' when calling DefaultApi->CreatePatientLabResultDocument");
            // verify the required parameter 'interpretation' is set
            if (interpretation == null)
                throw new ApiException(400, "Missing required parameter 'interpretation' when calling DefaultApi->CreatePatientLabResultDocument");
            // verify the required parameter 'observationdate' is set
            if (observationdate == null)
                throw new ApiException(400, "Missing required parameter 'observationdate' when calling DefaultApi->CreatePatientLabResultDocument");
            // verify the required parameter 'observationtime' is set
            if (observationtime == null)
                throw new ApiException(400, "Missing required parameter 'observationtime' when calling DefaultApi->CreatePatientLabResultDocument");
            // verify the required parameter 'priority' is set
            if (priority == null)
                throw new ApiException(400, "Missing required parameter 'priority' when calling DefaultApi->CreatePatientLabResultDocument");
            // verify the required parameter 'providerid' is set
            if (providerid == null)
                throw new ApiException(400, "Missing required parameter 'providerid' when calling DefaultApi->CreatePatientLabResultDocument");
            // verify the required parameter 'reportstatus' is set
            if (reportstatus == null)
                throw new ApiException(400, "Missing required parameter 'reportstatus' when calling DefaultApi->CreatePatientLabResultDocument");
            // verify the required parameter 'resultstatus' is set
            if (resultstatus == null)
                throw new ApiException(400, "Missing required parameter 'resultstatus' when calling DefaultApi->CreatePatientLabResultDocument");
            // verify the required parameter 'specimenreceiveddatetime' is set
            if (specimenreceiveddatetime == null)
                throw new ApiException(400, "Missing required parameter 'specimenreceiveddatetime' when calling DefaultApi->CreatePatientLabResultDocument");
            // verify the required parameter 'specimenreporteddatetime' is set
            if (specimenreporteddatetime == null)
                throw new ApiException(400, "Missing required parameter 'specimenreporteddatetime' when calling DefaultApi->CreatePatientLabResultDocument");
            // verify the required parameter 'tietoorderid' is set
            if (tietoorderid == null)
                throw new ApiException(400, "Missing required parameter 'tietoorderid' when calling DefaultApi->CreatePatientLabResultDocument");
            // verify the required parameter 'practiceid' is set
            if (practiceid == null)
                throw new ApiException(400, "Missing required parameter 'practiceid' when calling DefaultApi->CreatePatientLabResultDocument");
            // verify the required parameter 'apivariant' is set
            if (apivariant == null)
                throw new ApiException(400, "Missing required parameter 'apivariant' when calling DefaultApi->CreatePatientLabResultDocument");
            // verify the required parameter 'patientId' is set
            if (patientId == null)
                throw new ApiException(400, "Missing required parameter 'patientId' when calling DefaultApi->CreatePatientLabResultDocument");

            var localVarPath = "/{apivariant}/{practiceid}/patients/{patientId}/documents/labresult";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
			object localVarPostBody = null;

			// to determine the Content-Type header
			string[] localVarHttpContentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };
			string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
			string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (practiceid != null) localVarPathParams.Add("practiceid", this.Configuration.ApiClient.ParameterToString(practiceid)); // path parameter
            if (apivariant != null) localVarPathParams.Add("apivariant", this.Configuration.ApiClient.ParameterToString(apivariant)); // path parameter
            if (patientId != null) localVarPathParams.Add("patientId", this.Configuration.ApiClient.ParameterToString(patientId)); // path parameter
            if (accessionid != null) localVarFormParams.Add("accessionid", this.Configuration.ApiClient.ParameterToString(accessionid)); // form parameter
            if (analytes != null) localVarFormParams.Add("analytes", this.Configuration.ApiClient.ParameterToString(analytes)); // form parameter
            if (attachmentcontents != null) localVarFormParams.Add("attachmentcontents", this.Configuration.ApiClient.ParameterToString(attachmentcontents)); // form parameter
            if (attachmenttype != null) localVarFormParams.Add("attachmenttype", this.Configuration.ApiClient.ParameterToString(attachmenttype)); // form parameter
            if (autoclose != null) localVarFormParams.Add("autoclose", this.Configuration.ApiClient.ParameterToString(autoclose)); // form parameter
            if (departmentid != null) localVarFormParams.Add("departmentid", this.Configuration.ApiClient.ParameterToString(departmentid)); // form parameter
            if (documenttypeid != null) localVarFormParams.Add("documenttypeid", this.Configuration.ApiClient.ParameterToString(documenttypeid)); // form parameter
            if (facilityid != null) localVarFormParams.Add("facilityid", this.Configuration.ApiClient.ParameterToString(facilityid)); // form parameter
            if (internalnote != null) localVarFormParams.Add("internalnote", this.Configuration.ApiClient.ParameterToString(internalnote)); // form parameter
            if (interpretation != null) localVarFormParams.Add("interpretation", this.Configuration.ApiClient.ParameterToString(interpretation)); // form parameter
            if (observationdate != null) localVarFormParams.Add("observationdate", this.Configuration.ApiClient.ParameterToString(observationdate)); // form parameter
            if (observationtime != null) localVarFormParams.Add("observationtime", this.Configuration.ApiClient.ParameterToString(observationtime)); // form parameter
            if (priority != null) localVarFormParams.Add("priority", this.Configuration.ApiClient.ParameterToString(priority)); // form parameter
            if (providerid != null) localVarFormParams.Add("providerid", this.Configuration.ApiClient.ParameterToString(providerid)); // form parameter
            if (reportstatus != null) localVarFormParams.Add("reportstatus", this.Configuration.ApiClient.ParameterToString(reportstatus)); // form parameter
            if (resultstatus != null) localVarFormParams.Add("resultstatus", this.Configuration.ApiClient.ParameterToString(resultstatus)); // form parameter
            if (specimenreceiveddatetime != null) localVarFormParams.Add("specimenreceiveddatetime", this.Configuration.ApiClient.ParameterToString(specimenreceiveddatetime)); // form parameter
            if (specimenreporteddatetime != null) localVarFormParams.Add("specimenreporteddatetime", this.Configuration.ApiClient.ParameterToString(specimenreporteddatetime)); // form parameter
            if (tietoorderid != null) localVarFormParams.Add("tietoorderid", this.Configuration.ApiClient.ParameterToString(tietoorderid)); // form parameter
            // authentication (defaultSecurityScheme) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreatePatientLabResultDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateLabResultDocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CreateLabResultDocumentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateLabResultDocumentResponse)));
        }

        /// <summary>
        /// Create single lab result
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessionid"></param>
        /// <param name="analytes"></param>
        /// <param name="attachmentcontents"></param>
        /// <param name="attachmenttype"></param>
        /// <param name="autoclose"></param>
        /// <param name="departmentid"></param>
        /// <param name="documenttypeid"></param>
        /// <param name="facilityid"></param>
        /// <param name="internalnote"></param>
        /// <param name="interpretation"></param>
        /// <param name="observationdate"></param>
        /// <param name="observationtime"></param>
        /// <param name="priority"></param>
        /// <param name="providerid"></param>
        /// <param name="reportstatus"></param>
        /// <param name="resultstatus"></param>
        /// <param name="specimenreceiveddatetime"></param>
        /// <param name="specimenreporteddatetime"></param>
        /// <param name="tietoorderid"></param>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="patientId">Id of the patient for which get information</param>
        /// <returns>Task of CreateLabResultDocumentResponse</returns>
        public async System.Threading.Tasks.Task<CreateLabResultDocumentResponse> CreatePatientLabResultDocumentAsync (string accessionid, string analytes, string attachmentcontents, string attachmenttype, string autoclose, int? departmentid, int? documenttypeid, int? facilityid, string internalnote, string interpretation, string observationdate, string observationtime, string priority, int? providerid, string reportstatus, string resultstatus, string specimenreceiveddatetime, string specimenreporteddatetime, int? tietoorderid, int? practiceid, string apivariant, int? patientId)
        {
             ApiResponse<CreateLabResultDocumentResponse> localVarResponse = await CreatePatientLabResultDocumentAsyncWithHttpInfo(accessionid, analytes, attachmentcontents, attachmenttype, autoclose, departmentid, documenttypeid, facilityid, internalnote, interpretation, observationdate, observationtime, priority, providerid, reportstatus, resultstatus, specimenreceiveddatetime, specimenreporteddatetime, tietoorderid, practiceid, apivariant, patientId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create single lab result
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessionid"></param>
        /// <param name="analytes"></param>
        /// <param name="attachmentcontents"></param>
        /// <param name="attachmenttype"></param>
        /// <param name="autoclose"></param>
        /// <param name="departmentid"></param>
        /// <param name="documenttypeid"></param>
        /// <param name="facilityid"></param>
        /// <param name="internalnote"></param>
        /// <param name="interpretation"></param>
        /// <param name="observationdate"></param>
        /// <param name="observationtime"></param>
        /// <param name="priority"></param>
        /// <param name="providerid"></param>
        /// <param name="reportstatus"></param>
        /// <param name="resultstatus"></param>
        /// <param name="specimenreceiveddatetime"></param>
        /// <param name="specimenreporteddatetime"></param>
        /// <param name="tietoorderid"></param>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="patientId">Id of the patient for which get information</param>
        /// <returns>Task of ApiResponse (CreateLabResultDocumentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreateLabResultDocumentResponse>> CreatePatientLabResultDocumentAsyncWithHttpInfo (string accessionid, string analytes, string attachmentcontents, string attachmenttype, string autoclose, int? departmentid, int? documenttypeid, int? facilityid, string internalnote, string interpretation, string observationdate, string observationtime, string priority, int? providerid, string reportstatus, string resultstatus, string specimenreceiveddatetime, string specimenreporteddatetime, int? tietoorderid, int? practiceid, string apivariant, int? patientId)
        {
            // verify the required parameter 'accessionid' is set
            if (accessionid == null)
                throw new ApiException(400, "Missing required parameter 'accessionid' when calling DefaultApi->CreatePatientLabResultDocument");
            // verify the required parameter 'analytes' is set
            if (analytes == null)
                throw new ApiException(400, "Missing required parameter 'analytes' when calling DefaultApi->CreatePatientLabResultDocument");
            // verify the required parameter 'attachmentcontents' is set
            if (attachmentcontents == null)
                throw new ApiException(400, "Missing required parameter 'attachmentcontents' when calling DefaultApi->CreatePatientLabResultDocument");
            // verify the required parameter 'attachmenttype' is set
            if (attachmenttype == null)
                throw new ApiException(400, "Missing required parameter 'attachmenttype' when calling DefaultApi->CreatePatientLabResultDocument");
            // verify the required parameter 'autoclose' is set
            if (autoclose == null)
                throw new ApiException(400, "Missing required parameter 'autoclose' when calling DefaultApi->CreatePatientLabResultDocument");
            // verify the required parameter 'departmentid' is set
            if (departmentid == null)
                throw new ApiException(400, "Missing required parameter 'departmentid' when calling DefaultApi->CreatePatientLabResultDocument");
            // verify the required parameter 'documenttypeid' is set
            if (documenttypeid == null)
                throw new ApiException(400, "Missing required parameter 'documenttypeid' when calling DefaultApi->CreatePatientLabResultDocument");
            // verify the required parameter 'facilityid' is set
            if (facilityid == null)
                throw new ApiException(400, "Missing required parameter 'facilityid' when calling DefaultApi->CreatePatientLabResultDocument");
            // verify the required parameter 'internalnote' is set
            if (internalnote == null)
                throw new ApiException(400, "Missing required parameter 'internalnote' when calling DefaultApi->CreatePatientLabResultDocument");
            // verify the required parameter 'interpretation' is set
            if (interpretation == null)
                throw new ApiException(400, "Missing required parameter 'interpretation' when calling DefaultApi->CreatePatientLabResultDocument");
            // verify the required parameter 'observationdate' is set
            if (observationdate == null)
                throw new ApiException(400, "Missing required parameter 'observationdate' when calling DefaultApi->CreatePatientLabResultDocument");
            // verify the required parameter 'observationtime' is set
            if (observationtime == null)
                throw new ApiException(400, "Missing required parameter 'observationtime' when calling DefaultApi->CreatePatientLabResultDocument");
            // verify the required parameter 'priority' is set
            if (priority == null)
                throw new ApiException(400, "Missing required parameter 'priority' when calling DefaultApi->CreatePatientLabResultDocument");
            // verify the required parameter 'providerid' is set
            if (providerid == null)
                throw new ApiException(400, "Missing required parameter 'providerid' when calling DefaultApi->CreatePatientLabResultDocument");
            // verify the required parameter 'reportstatus' is set
            if (reportstatus == null)
                throw new ApiException(400, "Missing required parameter 'reportstatus' when calling DefaultApi->CreatePatientLabResultDocument");
            // verify the required parameter 'resultstatus' is set
            if (resultstatus == null)
                throw new ApiException(400, "Missing required parameter 'resultstatus' when calling DefaultApi->CreatePatientLabResultDocument");
            // verify the required parameter 'specimenreceiveddatetime' is set
            if (specimenreceiveddatetime == null)
                throw new ApiException(400, "Missing required parameter 'specimenreceiveddatetime' when calling DefaultApi->CreatePatientLabResultDocument");
            // verify the required parameter 'specimenreporteddatetime' is set
            if (specimenreporteddatetime == null)
                throw new ApiException(400, "Missing required parameter 'specimenreporteddatetime' when calling DefaultApi->CreatePatientLabResultDocument");
            // verify the required parameter 'tietoorderid' is set
            if (tietoorderid == null)
                throw new ApiException(400, "Missing required parameter 'tietoorderid' when calling DefaultApi->CreatePatientLabResultDocument");
            // verify the required parameter 'practiceid' is set
            if (practiceid == null)
                throw new ApiException(400, "Missing required parameter 'practiceid' when calling DefaultApi->CreatePatientLabResultDocument");
            // verify the required parameter 'apivariant' is set
            if (apivariant == null)
                throw new ApiException(400, "Missing required parameter 'apivariant' when calling DefaultApi->CreatePatientLabResultDocument");
            // verify the required parameter 'patientId' is set
            if (patientId == null)
                throw new ApiException(400, "Missing required parameter 'patientId' when calling DefaultApi->CreatePatientLabResultDocument");

            var localVarPath = "/{apivariant}/{practiceid}/patients/{patientId}/documents/labresult";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
			object localVarPostBody = null;

			// to determine the Content-Type header
			string[] localVarHttpContentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };
			string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
			string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (practiceid != null) localVarPathParams.Add("practiceid", this.Configuration.ApiClient.ParameterToString(practiceid)); // path parameter
            if (apivariant != null) localVarPathParams.Add("apivariant", this.Configuration.ApiClient.ParameterToString(apivariant)); // path parameter
            if (patientId != null) localVarPathParams.Add("patientId", this.Configuration.ApiClient.ParameterToString(patientId)); // path parameter
            if (accessionid != null) localVarFormParams.Add("accessionid", this.Configuration.ApiClient.ParameterToString(accessionid)); // form parameter
            if (analytes != null) localVarFormParams.Add("analytes", this.Configuration.ApiClient.ParameterToString(analytes)); // form parameter
            if (attachmentcontents != null) localVarFormParams.Add("attachmentcontents", this.Configuration.ApiClient.ParameterToString(attachmentcontents)); // form parameter
            if (attachmenttype != null) localVarFormParams.Add("attachmenttype", this.Configuration.ApiClient.ParameterToString(attachmenttype)); // form parameter
            if (autoclose != null) localVarFormParams.Add("autoclose", this.Configuration.ApiClient.ParameterToString(autoclose)); // form parameter
            if (departmentid != null) localVarFormParams.Add("departmentid", this.Configuration.ApiClient.ParameterToString(departmentid)); // form parameter
            if (documenttypeid != null) localVarFormParams.Add("documenttypeid", this.Configuration.ApiClient.ParameterToString(documenttypeid)); // form parameter
            if (facilityid != null) localVarFormParams.Add("facilityid", this.Configuration.ApiClient.ParameterToString(facilityid)); // form parameter
            if (internalnote != null) localVarFormParams.Add("internalnote", this.Configuration.ApiClient.ParameterToString(internalnote)); // form parameter
            if (interpretation != null) localVarFormParams.Add("interpretation", this.Configuration.ApiClient.ParameterToString(interpretation)); // form parameter
            if (observationdate != null) localVarFormParams.Add("observationdate", this.Configuration.ApiClient.ParameterToString(observationdate)); // form parameter
            if (observationtime != null) localVarFormParams.Add("observationtime", this.Configuration.ApiClient.ParameterToString(observationtime)); // form parameter
            if (priority != null) localVarFormParams.Add("priority", this.Configuration.ApiClient.ParameterToString(priority)); // form parameter
            if (providerid != null) localVarFormParams.Add("providerid", this.Configuration.ApiClient.ParameterToString(providerid)); // form parameter
            if (reportstatus != null) localVarFormParams.Add("reportstatus", this.Configuration.ApiClient.ParameterToString(reportstatus)); // form parameter
            if (resultstatus != null) localVarFormParams.Add("resultstatus", this.Configuration.ApiClient.ParameterToString(resultstatus)); // form parameter
            if (specimenreceiveddatetime != null) localVarFormParams.Add("specimenreceiveddatetime", this.Configuration.ApiClient.ParameterToString(specimenreceiveddatetime)); // form parameter
            if (specimenreporteddatetime != null) localVarFormParams.Add("specimenreporteddatetime", this.Configuration.ApiClient.ParameterToString(specimenreporteddatetime)); // form parameter
            if (tietoorderid != null) localVarFormParams.Add("tietoorderid", this.Configuration.ApiClient.ParameterToString(tietoorderid)); // form parameter
            // authentication (defaultSecurityScheme) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreatePatientLabResultDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateLabResultDocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CreateLabResultDocumentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateLabResultDocumentResponse)));
        }

        /// <summary>
        /// Adds problem to patient chart.
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status"></param>
        /// <param name="startdate"></param>
        /// <param name="snomedcode"></param>
        /// <param name="departmentid"></param>
        /// <param name="note"></param>
        /// <param name="laterality"></param>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="patientId">Id of the patient for which get medications</param>
        /// <returns>CreatePatientProblemResponse</returns>
        public CreatePatientProblemResponse CreatePatientProblem (string status, string startdate, int? snomedcode, int? departmentid, string note, string laterality, int? practiceid, string apivariant, int? patientId)
        {
             ApiResponse<CreatePatientProblemResponse> localVarResponse = CreatePatientProblemWithHttpInfo(status, startdate, snomedcode, departmentid, note, laterality, practiceid, apivariant, patientId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Adds problem to patient chart.
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status"></param>
        /// <param name="startdate"></param>
        /// <param name="snomedcode"></param>
        /// <param name="departmentid"></param>
        /// <param name="note"></param>
        /// <param name="laterality"></param>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="patientId">Id of the patient for which get medications</param>
        /// <returns>ApiResponse of CreatePatientProblemResponse</returns>
        public ApiResponse< CreatePatientProblemResponse > CreatePatientProblemWithHttpInfo (string status, string startdate, int? snomedcode, int? departmentid, string note, string laterality, int? practiceid, string apivariant, int? patientId)
        {
            // verify the required parameter 'status' is set
            if (status == null)
                throw new ApiException(400, "Missing required parameter 'status' when calling DefaultApi->CreatePatientProblem");
            // verify the required parameter 'startdate' is set
            if (startdate == null)
                throw new ApiException(400, "Missing required parameter 'startdate' when calling DefaultApi->CreatePatientProblem");
            // verify the required parameter 'snomedcode' is set
            if (snomedcode == null)
                throw new ApiException(400, "Missing required parameter 'snomedcode' when calling DefaultApi->CreatePatientProblem");
            // verify the required parameter 'departmentid' is set
            if (departmentid == null)
                throw new ApiException(400, "Missing required parameter 'departmentid' when calling DefaultApi->CreatePatientProblem");
            // verify the required parameter 'note' is set
            if (note == null)
                throw new ApiException(400, "Missing required parameter 'note' when calling DefaultApi->CreatePatientProblem");
            // verify the required parameter 'laterality' is set
            if (laterality == null)
                throw new ApiException(400, "Missing required parameter 'laterality' when calling DefaultApi->CreatePatientProblem");
            // verify the required parameter 'practiceid' is set
            if (practiceid == null)
                throw new ApiException(400, "Missing required parameter 'practiceid' when calling DefaultApi->CreatePatientProblem");
            // verify the required parameter 'apivariant' is set
            if (apivariant == null)
                throw new ApiException(400, "Missing required parameter 'apivariant' when calling DefaultApi->CreatePatientProblem");
            // verify the required parameter 'patientId' is set
            if (patientId == null)
                throw new ApiException(400, "Missing required parameter 'patientId' when calling DefaultApi->CreatePatientProblem");

            var localVarPath = "/{apivariant}/{practiceid}/chart/{patientId}/problems";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
			object localVarPostBody = null;

			// to determine the Content-Type header
			string[] localVarHttpContentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };
			string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
			string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (practiceid != null) localVarPathParams.Add("practiceid", this.Configuration.ApiClient.ParameterToString(practiceid)); // path parameter
            if (apivariant != null) localVarPathParams.Add("apivariant", this.Configuration.ApiClient.ParameterToString(apivariant)); // path parameter
            if (patientId != null) localVarPathParams.Add("patientId", this.Configuration.ApiClient.ParameterToString(patientId)); // path parameter
            if (status != null) localVarFormParams.Add("status", this.Configuration.ApiClient.ParameterToString(status)); // form parameter
            if (startdate != null) localVarFormParams.Add("startdate", this.Configuration.ApiClient.ParameterToString(startdate)); // form parameter
            if (snomedcode != null) localVarFormParams.Add("snomedcode", this.Configuration.ApiClient.ParameterToString(snomedcode)); // form parameter
            if (departmentid != null) localVarFormParams.Add("departmentid", this.Configuration.ApiClient.ParameterToString(departmentid)); // form parameter
            if (note != null) localVarFormParams.Add("note", this.Configuration.ApiClient.ParameterToString(note)); // form parameter
            if (laterality != null) localVarFormParams.Add("laterality", this.Configuration.ApiClient.ParameterToString(laterality)); // form parameter
            // authentication (defaultSecurityScheme) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreatePatientProblem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreatePatientProblemResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CreatePatientProblemResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreatePatientProblemResponse)));
        }

        /// <summary>
        /// Adds problem to patient chart.
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status"></param>
        /// <param name="startdate"></param>
        /// <param name="snomedcode"></param>
        /// <param name="departmentid"></param>
        /// <param name="note"></param>
        /// <param name="laterality"></param>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="patientId">Id of the patient for which get medications</param>
        /// <returns>Task of CreatePatientProblemResponse</returns>
        public async System.Threading.Tasks.Task<CreatePatientProblemResponse> CreatePatientProblemAsync (string status, string startdate, int? snomedcode, int? departmentid, string note, string laterality, int? practiceid, string apivariant, int? patientId)
        {
             ApiResponse<CreatePatientProblemResponse> localVarResponse = await CreatePatientProblemAsyncWithHttpInfo(status, startdate, snomedcode, departmentid, note, laterality, practiceid, apivariant, patientId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Adds problem to patient chart.
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status"></param>
        /// <param name="startdate"></param>
        /// <param name="snomedcode"></param>
        /// <param name="departmentid"></param>
        /// <param name="note"></param>
        /// <param name="laterality"></param>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="patientId">Id of the patient for which get medications</param>
        /// <returns>Task of ApiResponse (CreatePatientProblemResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreatePatientProblemResponse>> CreatePatientProblemAsyncWithHttpInfo (string status, string startdate, int? snomedcode, int? departmentid, string note, string laterality, int? practiceid, string apivariant, int? patientId)
        {
            // verify the required parameter 'status' is set
            if (status == null)
                throw new ApiException(400, "Missing required parameter 'status' when calling DefaultApi->CreatePatientProblem");
            // verify the required parameter 'startdate' is set
            if (startdate == null)
                throw new ApiException(400, "Missing required parameter 'startdate' when calling DefaultApi->CreatePatientProblem");
            // verify the required parameter 'snomedcode' is set
            if (snomedcode == null)
                throw new ApiException(400, "Missing required parameter 'snomedcode' when calling DefaultApi->CreatePatientProblem");
            // verify the required parameter 'departmentid' is set
            if (departmentid == null)
                throw new ApiException(400, "Missing required parameter 'departmentid' when calling DefaultApi->CreatePatientProblem");
            // verify the required parameter 'note' is set
            if (note == null)
                throw new ApiException(400, "Missing required parameter 'note' when calling DefaultApi->CreatePatientProblem");
            // verify the required parameter 'laterality' is set
            if (laterality == null)
                throw new ApiException(400, "Missing required parameter 'laterality' when calling DefaultApi->CreatePatientProblem");
            // verify the required parameter 'practiceid' is set
            if (practiceid == null)
                throw new ApiException(400, "Missing required parameter 'practiceid' when calling DefaultApi->CreatePatientProblem");
            // verify the required parameter 'apivariant' is set
            if (apivariant == null)
                throw new ApiException(400, "Missing required parameter 'apivariant' when calling DefaultApi->CreatePatientProblem");
            // verify the required parameter 'patientId' is set
            if (patientId == null)
                throw new ApiException(400, "Missing required parameter 'patientId' when calling DefaultApi->CreatePatientProblem");

            var localVarPath = "/{apivariant}/{practiceid}/chart/{patientId}/problems";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
			object localVarPostBody = null;

			// to determine the Content-Type header
			string[] localVarHttpContentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };
			string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
			string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (practiceid != null) localVarPathParams.Add("practiceid", this.Configuration.ApiClient.ParameterToString(practiceid)); // path parameter
            if (apivariant != null) localVarPathParams.Add("apivariant", this.Configuration.ApiClient.ParameterToString(apivariant)); // path parameter
            if (patientId != null) localVarPathParams.Add("patientId", this.Configuration.ApiClient.ParameterToString(patientId)); // path parameter
            if (status != null) localVarFormParams.Add("status", this.Configuration.ApiClient.ParameterToString(status)); // form parameter
            if (startdate != null) localVarFormParams.Add("startdate", this.Configuration.ApiClient.ParameterToString(startdate)); // form parameter
            if (snomedcode != null) localVarFormParams.Add("snomedcode", this.Configuration.ApiClient.ParameterToString(snomedcode)); // form parameter
            if (departmentid != null) localVarFormParams.Add("departmentid", this.Configuration.ApiClient.ParameterToString(departmentid)); // form parameter
            if (note != null) localVarFormParams.Add("note", this.Configuration.ApiClient.ParameterToString(note)); // form parameter
            if (laterality != null) localVarFormParams.Add("laterality", this.Configuration.ApiClient.ParameterToString(laterality)); // form parameter
            // authentication (defaultSecurityScheme) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreatePatientProblem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreatePatientProblemResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CreatePatientProblemResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreatePatientProblemResponse)));
        }

        /// <summary>
        /// Create new provider
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alternatephone"></param>
        /// <param name="ansicode"></param>
        /// <param name="billable"></param>
        /// <param name="billednamecase"></param>
        /// <param name="communicatordisplayname"></param>
        /// <param name="communicatorhomedepartment"></param>
        /// <param name="crdreferring"></param>
        /// <param name="createencounteroncheckin"></param>
        /// <param name="directaddress"></param>
        /// <param name="entitytypeid"></param>
        /// <param name="firstname"></param>
        /// <param name="hideinportal"></param>
        /// <param name="lastname"></param>
        /// <param name="medicalgroupid"></param>
        /// <param name="middleinitial"></param>
        /// <param name="namesuffix"></param>
        /// <param name="ndctatnumber"></param>
        /// <param name="npinumber"></param>
        /// <param name="practiceroleid"></param>
        /// <param name="providergroupid"></param>
        /// <param name="providerprofileid"></param>
        /// <param name="providertype"></param>
        /// <param name="reportingname"></param>
        /// <param name="scheduleresourcetypeid"></param>
        /// <param name="schedulingname"></param>
        /// <param name="schedulingnote"></param>
        /// <param name="sex"></param>
        /// <param name="signatureonfileflag"></param>
        /// <param name="specialtyid"></param>
        /// <param name="ssn"></param>
        /// <param name="staffbucket"></param>
        /// <param name="supervisingproviderid"></param>
        /// <param name="supervisingprovidertype"></param>
        /// <param name="trackmissingslips"></param>
        /// <param name="username"></param>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <returns>ProviderCreatedResponse</returns>
        public ProviderCreatedResponse CreateProvider (string alternatephone, string ansicode, bool? billable, string billednamecase, string communicatordisplayname, int? communicatorhomedepartment, bool? crdreferring, bool? createencounteroncheckin, string directaddress, int? entitytypeid, string firstname, bool? hideinportal, string lastname, int? medicalgroupid, string middleinitial, string namesuffix, string ndctatnumber, long? npinumber, int? practiceroleid, int? providergroupid, string providerprofileid, string providertype, string reportingname, int? scheduleresourcetypeid, string schedulingname, string schedulingnote, string sex, bool? signatureonfileflag, string specialtyid, int? ssn, bool? staffbucket, int? supervisingproviderid, string supervisingprovidertype, bool? trackmissingslips, string username, int? practiceid, string apivariant)
        {
             ApiResponse<ProviderCreatedResponse> localVarResponse = CreateProviderWithHttpInfo(alternatephone, ansicode, billable, billednamecase, communicatordisplayname, communicatorhomedepartment, crdreferring, createencounteroncheckin, directaddress, entitytypeid, firstname, hideinportal, lastname, medicalgroupid, middleinitial, namesuffix, ndctatnumber, npinumber, practiceroleid, providergroupid, providerprofileid, providertype, reportingname, scheduleresourcetypeid, schedulingname, schedulingnote, sex, signatureonfileflag, specialtyid, ssn, staffbucket, supervisingproviderid, supervisingprovidertype, trackmissingslips, username, practiceid, apivariant);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create new provider
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alternatephone"></param>
        /// <param name="ansicode"></param>
        /// <param name="billable"></param>
        /// <param name="billednamecase"></param>
        /// <param name="communicatordisplayname"></param>
        /// <param name="communicatorhomedepartment"></param>
        /// <param name="crdreferring"></param>
        /// <param name="createencounteroncheckin"></param>
        /// <param name="directaddress"></param>
        /// <param name="entitytypeid"></param>
        /// <param name="firstname"></param>
        /// <param name="hideinportal"></param>
        /// <param name="lastname"></param>
        /// <param name="medicalgroupid"></param>
        /// <param name="middleinitial"></param>
        /// <param name="namesuffix"></param>
        /// <param name="ndctatnumber"></param>
        /// <param name="npinumber"></param>
        /// <param name="practiceroleid"></param>
        /// <param name="providergroupid"></param>
        /// <param name="providerprofileid"></param>
        /// <param name="providertype"></param>
        /// <param name="reportingname"></param>
        /// <param name="scheduleresourcetypeid"></param>
        /// <param name="schedulingname"></param>
        /// <param name="schedulingnote"></param>
        /// <param name="sex"></param>
        /// <param name="signatureonfileflag"></param>
        /// <param name="specialtyid"></param>
        /// <param name="ssn"></param>
        /// <param name="staffbucket"></param>
        /// <param name="supervisingproviderid"></param>
        /// <param name="supervisingprovidertype"></param>
        /// <param name="trackmissingslips"></param>
        /// <param name="username"></param>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <returns>ApiResponse of ProviderCreatedResponse</returns>
        public ApiResponse< ProviderCreatedResponse > CreateProviderWithHttpInfo (string alternatephone, string ansicode, bool? billable, string billednamecase, string communicatordisplayname, int? communicatorhomedepartment, bool? crdreferring, bool? createencounteroncheckin, string directaddress, int? entitytypeid, string firstname, bool? hideinportal, string lastname, int? medicalgroupid, string middleinitial, string namesuffix, string ndctatnumber, long? npinumber, int? practiceroleid, int? providergroupid, string providerprofileid, string providertype, string reportingname, int? scheduleresourcetypeid, string schedulingname, string schedulingnote, string sex, bool? signatureonfileflag, string specialtyid, int? ssn, bool? staffbucket, int? supervisingproviderid, string supervisingprovidertype, bool? trackmissingslips, string username, int? practiceid, string apivariant)
        {
            // verify the required parameter 'alternatephone' is set
            if (alternatephone == null)
                throw new ApiException(400, "Missing required parameter 'alternatephone' when calling DefaultApi->CreateProvider");
            // verify the required parameter 'ansicode' is set
            if (ansicode == null)
                throw new ApiException(400, "Missing required parameter 'ansicode' when calling DefaultApi->CreateProvider");
            // verify the required parameter 'billable' is set
            if (billable == null)
                throw new ApiException(400, "Missing required parameter 'billable' when calling DefaultApi->CreateProvider");
            // verify the required parameter 'billednamecase' is set
            if (billednamecase == null)
                throw new ApiException(400, "Missing required parameter 'billednamecase' when calling DefaultApi->CreateProvider");
            // verify the required parameter 'communicatordisplayname' is set
            if (communicatordisplayname == null)
                throw new ApiException(400, "Missing required parameter 'communicatordisplayname' when calling DefaultApi->CreateProvider");
            // verify the required parameter 'communicatorhomedepartment' is set
            if (communicatorhomedepartment == null)
                throw new ApiException(400, "Missing required parameter 'communicatorhomedepartment' when calling DefaultApi->CreateProvider");
            // verify the required parameter 'crdreferring' is set
            if (crdreferring == null)
                throw new ApiException(400, "Missing required parameter 'crdreferring' when calling DefaultApi->CreateProvider");
            // verify the required parameter 'createencounteroncheckin' is set
            if (createencounteroncheckin == null)
                throw new ApiException(400, "Missing required parameter 'createencounteroncheckin' when calling DefaultApi->CreateProvider");
            // verify the required parameter 'directaddress' is set
            if (directaddress == null)
                throw new ApiException(400, "Missing required parameter 'directaddress' when calling DefaultApi->CreateProvider");
            // verify the required parameter 'entitytypeid' is set
            if (entitytypeid == null)
                throw new ApiException(400, "Missing required parameter 'entitytypeid' when calling DefaultApi->CreateProvider");
            // verify the required parameter 'firstname' is set
            if (firstname == null)
                throw new ApiException(400, "Missing required parameter 'firstname' when calling DefaultApi->CreateProvider");
            // verify the required parameter 'hideinportal' is set
            if (hideinportal == null)
                throw new ApiException(400, "Missing required parameter 'hideinportal' when calling DefaultApi->CreateProvider");
            // verify the required parameter 'lastname' is set
            if (lastname == null)
                throw new ApiException(400, "Missing required parameter 'lastname' when calling DefaultApi->CreateProvider");
            // verify the required parameter 'medicalgroupid' is set
            if (medicalgroupid == null)
                throw new ApiException(400, "Missing required parameter 'medicalgroupid' when calling DefaultApi->CreateProvider");
            // verify the required parameter 'middleinitial' is set
            if (middleinitial == null)
                throw new ApiException(400, "Missing required parameter 'middleinitial' when calling DefaultApi->CreateProvider");
            // verify the required parameter 'namesuffix' is set
            if (namesuffix == null)
                throw new ApiException(400, "Missing required parameter 'namesuffix' when calling DefaultApi->CreateProvider");
            // verify the required parameter 'ndctatnumber' is set
            if (ndctatnumber == null)
                throw new ApiException(400, "Missing required parameter 'ndctatnumber' when calling DefaultApi->CreateProvider");
            // verify the required parameter 'npinumber' is set
            if (npinumber == null)
                throw new ApiException(400, "Missing required parameter 'npinumber' when calling DefaultApi->CreateProvider");
            // verify the required parameter 'practiceroleid' is set
            if (practiceroleid == null)
                throw new ApiException(400, "Missing required parameter 'practiceroleid' when calling DefaultApi->CreateProvider");
            // verify the required parameter 'providergroupid' is set
            if (providergroupid == null)
                throw new ApiException(400, "Missing required parameter 'providergroupid' when calling DefaultApi->CreateProvider");
            // verify the required parameter 'providerprofileid' is set
            if (providerprofileid == null)
                throw new ApiException(400, "Missing required parameter 'providerprofileid' when calling DefaultApi->CreateProvider");
            // verify the required parameter 'providertype' is set
            if (providertype == null)
                throw new ApiException(400, "Missing required parameter 'providertype' when calling DefaultApi->CreateProvider");
            // verify the required parameter 'reportingname' is set
            if (reportingname == null)
                throw new ApiException(400, "Missing required parameter 'reportingname' when calling DefaultApi->CreateProvider");
            // verify the required parameter 'scheduleresourcetypeid' is set
            if (scheduleresourcetypeid == null)
                throw new ApiException(400, "Missing required parameter 'scheduleresourcetypeid' when calling DefaultApi->CreateProvider");
            // verify the required parameter 'schedulingname' is set
            if (schedulingname == null)
                throw new ApiException(400, "Missing required parameter 'schedulingname' when calling DefaultApi->CreateProvider");
            // verify the required parameter 'schedulingnote' is set
            if (schedulingnote == null)
                throw new ApiException(400, "Missing required parameter 'schedulingnote' when calling DefaultApi->CreateProvider");
            // verify the required parameter 'sex' is set
            if (sex == null)
                throw new ApiException(400, "Missing required parameter 'sex' when calling DefaultApi->CreateProvider");
            // verify the required parameter 'signatureonfileflag' is set
            if (signatureonfileflag == null)
                throw new ApiException(400, "Missing required parameter 'signatureonfileflag' when calling DefaultApi->CreateProvider");
            // verify the required parameter 'specialtyid' is set
            if (specialtyid == null)
                throw new ApiException(400, "Missing required parameter 'specialtyid' when calling DefaultApi->CreateProvider");
            // verify the required parameter 'ssn' is set
            if (ssn == null)
                throw new ApiException(400, "Missing required parameter 'ssn' when calling DefaultApi->CreateProvider");
            // verify the required parameter 'staffbucket' is set
            if (staffbucket == null)
                throw new ApiException(400, "Missing required parameter 'staffbucket' when calling DefaultApi->CreateProvider");
            // verify the required parameter 'supervisingproviderid' is set
            if (supervisingproviderid == null)
                throw new ApiException(400, "Missing required parameter 'supervisingproviderid' when calling DefaultApi->CreateProvider");
            // verify the required parameter 'supervisingprovidertype' is set
            if (supervisingprovidertype == null)
                throw new ApiException(400, "Missing required parameter 'supervisingprovidertype' when calling DefaultApi->CreateProvider");
            // verify the required parameter 'trackmissingslips' is set
            if (trackmissingslips == null)
                throw new ApiException(400, "Missing required parameter 'trackmissingslips' when calling DefaultApi->CreateProvider");
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling DefaultApi->CreateProvider");
            // verify the required parameter 'practiceid' is set
            if (practiceid == null)
                throw new ApiException(400, "Missing required parameter 'practiceid' when calling DefaultApi->CreateProvider");
            // verify the required parameter 'apivariant' is set
            if (apivariant == null)
                throw new ApiException(400, "Missing required parameter 'apivariant' when calling DefaultApi->CreateProvider");

            var localVarPath = "/{apivariant}/{practiceid}/providers";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
			object localVarPostBody = null;

			// to determine the Content-Type header
			string[] localVarHttpContentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };
			string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
			string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (practiceid != null) localVarPathParams.Add("practiceid", this.Configuration.ApiClient.ParameterToString(practiceid)); // path parameter
            if (apivariant != null) localVarPathParams.Add("apivariant", this.Configuration.ApiClient.ParameterToString(apivariant)); // path parameter
            if (alternatephone != null) localVarFormParams.Add("alternatephone", this.Configuration.ApiClient.ParameterToString(alternatephone)); // form parameter
            if (ansicode != null) localVarFormParams.Add("ansicode", this.Configuration.ApiClient.ParameterToString(ansicode)); // form parameter
            if (billable != null) localVarFormParams.Add("billable", this.Configuration.ApiClient.ParameterToString(billable)); // form parameter
            if (billednamecase != null) localVarFormParams.Add("billednamecase", this.Configuration.ApiClient.ParameterToString(billednamecase)); // form parameter
            if (communicatordisplayname != null) localVarFormParams.Add("communicatordisplayname", this.Configuration.ApiClient.ParameterToString(communicatordisplayname)); // form parameter
            if (communicatorhomedepartment != null) localVarFormParams.Add("communicatorhomedepartment", this.Configuration.ApiClient.ParameterToString(communicatorhomedepartment)); // form parameter
            if (crdreferring != null) localVarFormParams.Add("crdreferring", this.Configuration.ApiClient.ParameterToString(crdreferring)); // form parameter
            if (createencounteroncheckin != null) localVarFormParams.Add("createencounteroncheckin", this.Configuration.ApiClient.ParameterToString(createencounteroncheckin)); // form parameter
            if (directaddress != null) localVarFormParams.Add("directaddress", this.Configuration.ApiClient.ParameterToString(directaddress)); // form parameter
            if (entitytypeid != null) localVarFormParams.Add("entitytypeid", this.Configuration.ApiClient.ParameterToString(entitytypeid)); // form parameter
            if (firstname != null) localVarFormParams.Add("firstname", this.Configuration.ApiClient.ParameterToString(firstname)); // form parameter
            if (hideinportal != null) localVarFormParams.Add("hideinportal", this.Configuration.ApiClient.ParameterToString(hideinportal)); // form parameter
            if (lastname != null) localVarFormParams.Add("lastname", this.Configuration.ApiClient.ParameterToString(lastname)); // form parameter
            if (medicalgroupid != null) localVarFormParams.Add("medicalgroupid", this.Configuration.ApiClient.ParameterToString(medicalgroupid)); // form parameter
            if (middleinitial != null) localVarFormParams.Add("middleinitial", this.Configuration.ApiClient.ParameterToString(middleinitial)); // form parameter
            if (namesuffix != null) localVarFormParams.Add("namesuffix", this.Configuration.ApiClient.ParameterToString(namesuffix)); // form parameter
            if (ndctatnumber != null) localVarFormParams.Add("ndctatnumber", this.Configuration.ApiClient.ParameterToString(ndctatnumber)); // form parameter
            if (npinumber != null) localVarFormParams.Add("npinumber", this.Configuration.ApiClient.ParameterToString(npinumber)); // form parameter
            if (practiceroleid != null) localVarFormParams.Add("practiceroleid", this.Configuration.ApiClient.ParameterToString(practiceroleid)); // form parameter
            if (providergroupid != null) localVarFormParams.Add("providergroupid", this.Configuration.ApiClient.ParameterToString(providergroupid)); // form parameter
            if (providerprofileid != null) localVarFormParams.Add("providerprofileid", this.Configuration.ApiClient.ParameterToString(providerprofileid)); // form parameter
            if (providertype != null) localVarFormParams.Add("providertype", this.Configuration.ApiClient.ParameterToString(providertype)); // form parameter
            if (reportingname != null) localVarFormParams.Add("reportingname", this.Configuration.ApiClient.ParameterToString(reportingname)); // form parameter
            if (scheduleresourcetypeid != null) localVarFormParams.Add("scheduleresourcetypeid", this.Configuration.ApiClient.ParameterToString(scheduleresourcetypeid)); // form parameter
            if (schedulingname != null) localVarFormParams.Add("schedulingname", this.Configuration.ApiClient.ParameterToString(schedulingname)); // form parameter
            if (schedulingnote != null) localVarFormParams.Add("schedulingnote", this.Configuration.ApiClient.ParameterToString(schedulingnote)); // form parameter
            if (sex != null) localVarFormParams.Add("sex", this.Configuration.ApiClient.ParameterToString(sex)); // form parameter
            if (signatureonfileflag != null) localVarFormParams.Add("signatureonfileflag", this.Configuration.ApiClient.ParameterToString(signatureonfileflag)); // form parameter
            if (specialtyid != null) localVarFormParams.Add("specialtyid", this.Configuration.ApiClient.ParameterToString(specialtyid)); // form parameter
            if (ssn != null) localVarFormParams.Add("ssn", this.Configuration.ApiClient.ParameterToString(ssn)); // form parameter
            if (staffbucket != null) localVarFormParams.Add("staffbucket", this.Configuration.ApiClient.ParameterToString(staffbucket)); // form parameter
            if (supervisingproviderid != null) localVarFormParams.Add("supervisingproviderid", this.Configuration.ApiClient.ParameterToString(supervisingproviderid)); // form parameter
            if (supervisingprovidertype != null) localVarFormParams.Add("supervisingprovidertype", this.Configuration.ApiClient.ParameterToString(supervisingprovidertype)); // form parameter
            if (trackmissingslips != null) localVarFormParams.Add("trackmissingslips", this.Configuration.ApiClient.ParameterToString(trackmissingslips)); // form parameter
            if (username != null) localVarFormParams.Add("username", this.Configuration.ApiClient.ParameterToString(username)); // form parameter
            // authentication (defaultSecurityScheme) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateProvider", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProviderCreatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProviderCreatedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProviderCreatedResponse)));
        }

        /// <summary>
        /// Create new provider
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alternatephone"></param>
        /// <param name="ansicode"></param>
        /// <param name="billable"></param>
        /// <param name="billednamecase"></param>
        /// <param name="communicatordisplayname"></param>
        /// <param name="communicatorhomedepartment"></param>
        /// <param name="crdreferring"></param>
        /// <param name="createencounteroncheckin"></param>
        /// <param name="directaddress"></param>
        /// <param name="entitytypeid"></param>
        /// <param name="firstname"></param>
        /// <param name="hideinportal"></param>
        /// <param name="lastname"></param>
        /// <param name="medicalgroupid"></param>
        /// <param name="middleinitial"></param>
        /// <param name="namesuffix"></param>
        /// <param name="ndctatnumber"></param>
        /// <param name="npinumber"></param>
        /// <param name="practiceroleid"></param>
        /// <param name="providergroupid"></param>
        /// <param name="providerprofileid"></param>
        /// <param name="providertype"></param>
        /// <param name="reportingname"></param>
        /// <param name="scheduleresourcetypeid"></param>
        /// <param name="schedulingname"></param>
        /// <param name="schedulingnote"></param>
        /// <param name="sex"></param>
        /// <param name="signatureonfileflag"></param>
        /// <param name="specialtyid"></param>
        /// <param name="ssn"></param>
        /// <param name="staffbucket"></param>
        /// <param name="supervisingproviderid"></param>
        /// <param name="supervisingprovidertype"></param>
        /// <param name="trackmissingslips"></param>
        /// <param name="username"></param>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <returns>Task of ProviderCreatedResponse</returns>
        public async System.Threading.Tasks.Task<ProviderCreatedResponse> CreateProviderAsync (string alternatephone, string ansicode, bool? billable, string billednamecase, string communicatordisplayname, int? communicatorhomedepartment, bool? crdreferring, bool? createencounteroncheckin, string directaddress, int? entitytypeid, string firstname, bool? hideinportal, string lastname, int? medicalgroupid, string middleinitial, string namesuffix, string ndctatnumber, long? npinumber, int? practiceroleid, int? providergroupid, string providerprofileid, string providertype, string reportingname, int? scheduleresourcetypeid, string schedulingname, string schedulingnote, string sex, bool? signatureonfileflag, string specialtyid, int? ssn, bool? staffbucket, int? supervisingproviderid, string supervisingprovidertype, bool? trackmissingslips, string username, int? practiceid, string apivariant)
        {
             ApiResponse<ProviderCreatedResponse> localVarResponse = await CreateProviderAsyncWithHttpInfo(alternatephone, ansicode, billable, billednamecase, communicatordisplayname, communicatorhomedepartment, crdreferring, createencounteroncheckin, directaddress, entitytypeid, firstname, hideinportal, lastname, medicalgroupid, middleinitial, namesuffix, ndctatnumber, npinumber, practiceroleid, providergroupid, providerprofileid, providertype, reportingname, scheduleresourcetypeid, schedulingname, schedulingnote, sex, signatureonfileflag, specialtyid, ssn, staffbucket, supervisingproviderid, supervisingprovidertype, trackmissingslips, username, practiceid, apivariant);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create new provider
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="alternatephone"></param>
        /// <param name="ansicode"></param>
        /// <param name="billable"></param>
        /// <param name="billednamecase"></param>
        /// <param name="communicatordisplayname"></param>
        /// <param name="communicatorhomedepartment"></param>
        /// <param name="crdreferring"></param>
        /// <param name="createencounteroncheckin"></param>
        /// <param name="directaddress"></param>
        /// <param name="entitytypeid"></param>
        /// <param name="firstname"></param>
        /// <param name="hideinportal"></param>
        /// <param name="lastname"></param>
        /// <param name="medicalgroupid"></param>
        /// <param name="middleinitial"></param>
        /// <param name="namesuffix"></param>
        /// <param name="ndctatnumber"></param>
        /// <param name="npinumber"></param>
        /// <param name="practiceroleid"></param>
        /// <param name="providergroupid"></param>
        /// <param name="providerprofileid"></param>
        /// <param name="providertype"></param>
        /// <param name="reportingname"></param>
        /// <param name="scheduleresourcetypeid"></param>
        /// <param name="schedulingname"></param>
        /// <param name="schedulingnote"></param>
        /// <param name="sex"></param>
        /// <param name="signatureonfileflag"></param>
        /// <param name="specialtyid"></param>
        /// <param name="ssn"></param>
        /// <param name="staffbucket"></param>
        /// <param name="supervisingproviderid"></param>
        /// <param name="supervisingprovidertype"></param>
        /// <param name="trackmissingslips"></param>
        /// <param name="username"></param>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <returns>Task of ApiResponse (ProviderCreatedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProviderCreatedResponse>> CreateProviderAsyncWithHttpInfo (string alternatephone, string ansicode, bool? billable, string billednamecase, string communicatordisplayname, int? communicatorhomedepartment, bool? crdreferring, bool? createencounteroncheckin, string directaddress, int? entitytypeid, string firstname, bool? hideinportal, string lastname, int? medicalgroupid, string middleinitial, string namesuffix, string ndctatnumber, long? npinumber, int? practiceroleid, int? providergroupid, string providerprofileid, string providertype, string reportingname, int? scheduleresourcetypeid, string schedulingname, string schedulingnote, string sex, bool? signatureonfileflag, string specialtyid, int? ssn, bool? staffbucket, int? supervisingproviderid, string supervisingprovidertype, bool? trackmissingslips, string username, int? practiceid, string apivariant)
        {
            // verify the required parameter 'alternatephone' is set
            if (alternatephone == null)
                throw new ApiException(400, "Missing required parameter 'alternatephone' when calling DefaultApi->CreateProvider");
            // verify the required parameter 'ansicode' is set
            if (ansicode == null)
                throw new ApiException(400, "Missing required parameter 'ansicode' when calling DefaultApi->CreateProvider");
            // verify the required parameter 'billable' is set
            if (billable == null)
                throw new ApiException(400, "Missing required parameter 'billable' when calling DefaultApi->CreateProvider");
            // verify the required parameter 'billednamecase' is set
            if (billednamecase == null)
                throw new ApiException(400, "Missing required parameter 'billednamecase' when calling DefaultApi->CreateProvider");
            // verify the required parameter 'communicatordisplayname' is set
            if (communicatordisplayname == null)
                throw new ApiException(400, "Missing required parameter 'communicatordisplayname' when calling DefaultApi->CreateProvider");
            // verify the required parameter 'communicatorhomedepartment' is set
            if (communicatorhomedepartment == null)
                throw new ApiException(400, "Missing required parameter 'communicatorhomedepartment' when calling DefaultApi->CreateProvider");
            // verify the required parameter 'crdreferring' is set
            if (crdreferring == null)
                throw new ApiException(400, "Missing required parameter 'crdreferring' when calling DefaultApi->CreateProvider");
            // verify the required parameter 'createencounteroncheckin' is set
            if (createencounteroncheckin == null)
                throw new ApiException(400, "Missing required parameter 'createencounteroncheckin' when calling DefaultApi->CreateProvider");
            // verify the required parameter 'directaddress' is set
            if (directaddress == null)
                throw new ApiException(400, "Missing required parameter 'directaddress' when calling DefaultApi->CreateProvider");
            // verify the required parameter 'entitytypeid' is set
            if (entitytypeid == null)
                throw new ApiException(400, "Missing required parameter 'entitytypeid' when calling DefaultApi->CreateProvider");
            // verify the required parameter 'firstname' is set
            if (firstname == null)
                throw new ApiException(400, "Missing required parameter 'firstname' when calling DefaultApi->CreateProvider");
            // verify the required parameter 'hideinportal' is set
            if (hideinportal == null)
                throw new ApiException(400, "Missing required parameter 'hideinportal' when calling DefaultApi->CreateProvider");
            // verify the required parameter 'lastname' is set
            if (lastname == null)
                throw new ApiException(400, "Missing required parameter 'lastname' when calling DefaultApi->CreateProvider");
            // verify the required parameter 'medicalgroupid' is set
            if (medicalgroupid == null)
                throw new ApiException(400, "Missing required parameter 'medicalgroupid' when calling DefaultApi->CreateProvider");
            // verify the required parameter 'middleinitial' is set
            if (middleinitial == null)
                throw new ApiException(400, "Missing required parameter 'middleinitial' when calling DefaultApi->CreateProvider");
            // verify the required parameter 'namesuffix' is set
            if (namesuffix == null)
                throw new ApiException(400, "Missing required parameter 'namesuffix' when calling DefaultApi->CreateProvider");
            // verify the required parameter 'ndctatnumber' is set
            if (ndctatnumber == null)
                throw new ApiException(400, "Missing required parameter 'ndctatnumber' when calling DefaultApi->CreateProvider");
            // verify the required parameter 'npinumber' is set
            if (npinumber == null)
                throw new ApiException(400, "Missing required parameter 'npinumber' when calling DefaultApi->CreateProvider");
            // verify the required parameter 'practiceroleid' is set
            if (practiceroleid == null)
                throw new ApiException(400, "Missing required parameter 'practiceroleid' when calling DefaultApi->CreateProvider");
            // verify the required parameter 'providergroupid' is set
            if (providergroupid == null)
                throw new ApiException(400, "Missing required parameter 'providergroupid' when calling DefaultApi->CreateProvider");
            // verify the required parameter 'providerprofileid' is set
            if (providerprofileid == null)
                throw new ApiException(400, "Missing required parameter 'providerprofileid' when calling DefaultApi->CreateProvider");
            // verify the required parameter 'providertype' is set
            if (providertype == null)
                throw new ApiException(400, "Missing required parameter 'providertype' when calling DefaultApi->CreateProvider");
            // verify the required parameter 'reportingname' is set
            if (reportingname == null)
                throw new ApiException(400, "Missing required parameter 'reportingname' when calling DefaultApi->CreateProvider");
            // verify the required parameter 'scheduleresourcetypeid' is set
            if (scheduleresourcetypeid == null)
                throw new ApiException(400, "Missing required parameter 'scheduleresourcetypeid' when calling DefaultApi->CreateProvider");
            // verify the required parameter 'schedulingname' is set
            if (schedulingname == null)
                throw new ApiException(400, "Missing required parameter 'schedulingname' when calling DefaultApi->CreateProvider");
            // verify the required parameter 'schedulingnote' is set
            if (schedulingnote == null)
                throw new ApiException(400, "Missing required parameter 'schedulingnote' when calling DefaultApi->CreateProvider");
            // verify the required parameter 'sex' is set
            if (sex == null)
                throw new ApiException(400, "Missing required parameter 'sex' when calling DefaultApi->CreateProvider");
            // verify the required parameter 'signatureonfileflag' is set
            if (signatureonfileflag == null)
                throw new ApiException(400, "Missing required parameter 'signatureonfileflag' when calling DefaultApi->CreateProvider");
            // verify the required parameter 'specialtyid' is set
            if (specialtyid == null)
                throw new ApiException(400, "Missing required parameter 'specialtyid' when calling DefaultApi->CreateProvider");
            // verify the required parameter 'ssn' is set
            if (ssn == null)
                throw new ApiException(400, "Missing required parameter 'ssn' when calling DefaultApi->CreateProvider");
            // verify the required parameter 'staffbucket' is set
            if (staffbucket == null)
                throw new ApiException(400, "Missing required parameter 'staffbucket' when calling DefaultApi->CreateProvider");
            // verify the required parameter 'supervisingproviderid' is set
            if (supervisingproviderid == null)
                throw new ApiException(400, "Missing required parameter 'supervisingproviderid' when calling DefaultApi->CreateProvider");
            // verify the required parameter 'supervisingprovidertype' is set
            if (supervisingprovidertype == null)
                throw new ApiException(400, "Missing required parameter 'supervisingprovidertype' when calling DefaultApi->CreateProvider");
            // verify the required parameter 'trackmissingslips' is set
            if (trackmissingslips == null)
                throw new ApiException(400, "Missing required parameter 'trackmissingslips' when calling DefaultApi->CreateProvider");
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling DefaultApi->CreateProvider");
            // verify the required parameter 'practiceid' is set
            if (practiceid == null)
                throw new ApiException(400, "Missing required parameter 'practiceid' when calling DefaultApi->CreateProvider");
            // verify the required parameter 'apivariant' is set
            if (apivariant == null)
                throw new ApiException(400, "Missing required parameter 'apivariant' when calling DefaultApi->CreateProvider");

            var localVarPath = "/{apivariant}/{practiceid}/providers";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
			object localVarPostBody = null;

			// to determine the Content-Type header
			string[] localVarHttpContentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };
			string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
			string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (practiceid != null) localVarPathParams.Add("practiceid", this.Configuration.ApiClient.ParameterToString(practiceid)); // path parameter
            if (apivariant != null) localVarPathParams.Add("apivariant", this.Configuration.ApiClient.ParameterToString(apivariant)); // path parameter
            if (alternatephone != null) localVarFormParams.Add("alternatephone", this.Configuration.ApiClient.ParameterToString(alternatephone)); // form parameter
            if (ansicode != null) localVarFormParams.Add("ansicode", this.Configuration.ApiClient.ParameterToString(ansicode)); // form parameter
            if (billable != null) localVarFormParams.Add("billable", this.Configuration.ApiClient.ParameterToString(billable)); // form parameter
            if (billednamecase != null) localVarFormParams.Add("billednamecase", this.Configuration.ApiClient.ParameterToString(billednamecase)); // form parameter
            if (communicatordisplayname != null) localVarFormParams.Add("communicatordisplayname", this.Configuration.ApiClient.ParameterToString(communicatordisplayname)); // form parameter
            if (communicatorhomedepartment != null) localVarFormParams.Add("communicatorhomedepartment", this.Configuration.ApiClient.ParameterToString(communicatorhomedepartment)); // form parameter
            if (crdreferring != null) localVarFormParams.Add("crdreferring", this.Configuration.ApiClient.ParameterToString(crdreferring)); // form parameter
            if (createencounteroncheckin != null) localVarFormParams.Add("createencounteroncheckin", this.Configuration.ApiClient.ParameterToString(createencounteroncheckin)); // form parameter
            if (directaddress != null) localVarFormParams.Add("directaddress", this.Configuration.ApiClient.ParameterToString(directaddress)); // form parameter
            if (entitytypeid != null) localVarFormParams.Add("entitytypeid", this.Configuration.ApiClient.ParameterToString(entitytypeid)); // form parameter
            if (firstname != null) localVarFormParams.Add("firstname", this.Configuration.ApiClient.ParameterToString(firstname)); // form parameter
            if (hideinportal != null) localVarFormParams.Add("hideinportal", this.Configuration.ApiClient.ParameterToString(hideinportal)); // form parameter
            if (lastname != null) localVarFormParams.Add("lastname", this.Configuration.ApiClient.ParameterToString(lastname)); // form parameter
            if (medicalgroupid != null) localVarFormParams.Add("medicalgroupid", this.Configuration.ApiClient.ParameterToString(medicalgroupid)); // form parameter
            if (middleinitial != null) localVarFormParams.Add("middleinitial", this.Configuration.ApiClient.ParameterToString(middleinitial)); // form parameter
            if (namesuffix != null) localVarFormParams.Add("namesuffix", this.Configuration.ApiClient.ParameterToString(namesuffix)); // form parameter
            if (ndctatnumber != null) localVarFormParams.Add("ndctatnumber", this.Configuration.ApiClient.ParameterToString(ndctatnumber)); // form parameter
            if (npinumber != null) localVarFormParams.Add("npinumber", this.Configuration.ApiClient.ParameterToString(npinumber)); // form parameter
            if (practiceroleid != null) localVarFormParams.Add("practiceroleid", this.Configuration.ApiClient.ParameterToString(practiceroleid)); // form parameter
            if (providergroupid != null) localVarFormParams.Add("providergroupid", this.Configuration.ApiClient.ParameterToString(providergroupid)); // form parameter
            if (providerprofileid != null) localVarFormParams.Add("providerprofileid", this.Configuration.ApiClient.ParameterToString(providerprofileid)); // form parameter
            if (providertype != null) localVarFormParams.Add("providertype", this.Configuration.ApiClient.ParameterToString(providertype)); // form parameter
            if (reportingname != null) localVarFormParams.Add("reportingname", this.Configuration.ApiClient.ParameterToString(reportingname)); // form parameter
            if (scheduleresourcetypeid != null) localVarFormParams.Add("scheduleresourcetypeid", this.Configuration.ApiClient.ParameterToString(scheduleresourcetypeid)); // form parameter
            if (schedulingname != null) localVarFormParams.Add("schedulingname", this.Configuration.ApiClient.ParameterToString(schedulingname)); // form parameter
            if (schedulingnote != null) localVarFormParams.Add("schedulingnote", this.Configuration.ApiClient.ParameterToString(schedulingnote)); // form parameter
            if (sex != null) localVarFormParams.Add("sex", this.Configuration.ApiClient.ParameterToString(sex)); // form parameter
            if (signatureonfileflag != null) localVarFormParams.Add("signatureonfileflag", this.Configuration.ApiClient.ParameterToString(signatureonfileflag)); // form parameter
            if (specialtyid != null) localVarFormParams.Add("specialtyid", this.Configuration.ApiClient.ParameterToString(specialtyid)); // form parameter
            if (ssn != null) localVarFormParams.Add("ssn", this.Configuration.ApiClient.ParameterToString(ssn)); // form parameter
            if (staffbucket != null) localVarFormParams.Add("staffbucket", this.Configuration.ApiClient.ParameterToString(staffbucket)); // form parameter
            if (supervisingproviderid != null) localVarFormParams.Add("supervisingproviderid", this.Configuration.ApiClient.ParameterToString(supervisingproviderid)); // form parameter
            if (supervisingprovidertype != null) localVarFormParams.Add("supervisingprovidertype", this.Configuration.ApiClient.ParameterToString(supervisingprovidertype)); // form parameter
            if (trackmissingslips != null) localVarFormParams.Add("trackmissingslips", this.Configuration.ApiClient.ParameterToString(trackmissingslips)); // form parameter
            if (username != null) localVarFormParams.Add("username", this.Configuration.ApiClient.ParameterToString(username)); // form parameter
            // authentication (defaultSecurityScheme) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateProvider", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProviderCreatedResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProviderCreatedResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProviderCreatedResponse)));
        }

        /// <summary>
        /// Delete information about a single patient&#x27;s appointment by id. Only open appointments can be deleted.
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="appointmentId">Id of the appointment.</param>
        /// <returns>AppointmentIds</returns>
        public AppointmentIds DeleteAppointmentById (int? practiceid, string apivariant, int? appointmentId)
        {
             ApiResponse<AppointmentIds> localVarResponse = DeleteAppointmentByIdWithHttpInfo(practiceid, apivariant, appointmentId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete information about a single patient&#x27;s appointment by id. Only open appointments can be deleted.
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="appointmentId">Id of the appointment.</param>
        /// <returns>ApiResponse of AppointmentIds</returns>
        public ApiResponse< AppointmentIds > DeleteAppointmentByIdWithHttpInfo (int? practiceid, string apivariant, int? appointmentId)
        {
            // verify the required parameter 'practiceid' is set
            if (practiceid == null)
                throw new ApiException(400, "Missing required parameter 'practiceid' when calling DefaultApi->DeleteAppointmentById");
            // verify the required parameter 'apivariant' is set
            if (apivariant == null)
                throw new ApiException(400, "Missing required parameter 'apivariant' when calling DefaultApi->DeleteAppointmentById");
            // verify the required parameter 'appointmentId' is set
            if (appointmentId == null)
                throw new ApiException(400, "Missing required parameter 'appointmentId' when calling DefaultApi->DeleteAppointmentById");

            var localVarPath = "/{apivariant}/{practiceid}/appointments/{appointmentId}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
			object localVarPostBody = null;

			// to determine the Content-Type header
			string[] localVarHttpContentTypes = new string[] {
            };
			string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
			string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (practiceid != null) localVarPathParams.Add("practiceid", this.Configuration.ApiClient.ParameterToString(practiceid)); // path parameter
            if (apivariant != null) localVarPathParams.Add("apivariant", this.Configuration.ApiClient.ParameterToString(apivariant)); // path parameter
            if (appointmentId != null) localVarPathParams.Add("appointmentId", this.Configuration.ApiClient.ParameterToString(appointmentId)); // path parameter
            // authentication (defaultSecurityScheme) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAppointmentById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AppointmentIds>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AppointmentIds) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AppointmentIds)));
        }

        /// <summary>
        /// Delete information about a single patient&#x27;s appointment by id. Only open appointments can be deleted.
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="appointmentId">Id of the appointment.</param>
        /// <returns>Task of AppointmentIds</returns>
        public async System.Threading.Tasks.Task<AppointmentIds> DeleteAppointmentByIdAsync (int? practiceid, string apivariant, int? appointmentId)
        {
             ApiResponse<AppointmentIds> localVarResponse = await DeleteAppointmentByIdAsyncWithHttpInfo(practiceid, apivariant, appointmentId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete information about a single patient&#x27;s appointment by id. Only open appointments can be deleted.
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="appointmentId">Id of the appointment.</param>
        /// <returns>Task of ApiResponse (AppointmentIds)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AppointmentIds>> DeleteAppointmentByIdAsyncWithHttpInfo (int? practiceid, string apivariant, int? appointmentId)
        {
            // verify the required parameter 'practiceid' is set
            if (practiceid == null)
                throw new ApiException(400, "Missing required parameter 'practiceid' when calling DefaultApi->DeleteAppointmentById");
            // verify the required parameter 'apivariant' is set
            if (apivariant == null)
                throw new ApiException(400, "Missing required parameter 'apivariant' when calling DefaultApi->DeleteAppointmentById");
            // verify the required parameter 'appointmentId' is set
            if (appointmentId == null)
                throw new ApiException(400, "Missing required parameter 'appointmentId' when calling DefaultApi->DeleteAppointmentById");

            var localVarPath = "/{apivariant}/{practiceid}/appointments/{appointmentId}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
			object localVarPostBody = null;

			// to determine the Content-Type header
			string[] localVarHttpContentTypes = new string[] {
            };
			string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
			string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (practiceid != null) localVarPathParams.Add("practiceid", this.Configuration.ApiClient.ParameterToString(practiceid)); // path parameter
            if (apivariant != null) localVarPathParams.Add("apivariant", this.Configuration.ApiClient.ParameterToString(apivariant)); // path parameter
            if (appointmentId != null) localVarPathParams.Add("appointmentId", this.Configuration.ApiClient.ParameterToString(appointmentId)); // path parameter
            // authentication (defaultSecurityScheme) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAppointmentById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AppointmentIds>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AppointmentIds) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AppointmentIds)));
        }

        /// <summary>
        /// Delete single lab result
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="patientId">Id of the patient for which get information</param>
        /// <param name="labResultId">Id of the lab result</param>
        /// <returns>DeleteLabResultDocumentResponse</returns>
        public DeleteLabResultDocumentResponse DeleteePatientLabResultDocument (int? practiceid, string apivariant, int? patientId, int? labResultId)
        {
             ApiResponse<DeleteLabResultDocumentResponse> localVarResponse = DeleteePatientLabResultDocumentWithHttpInfo(practiceid, apivariant, patientId, labResultId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete single lab result
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="patientId">Id of the patient for which get information</param>
        /// <param name="labResultId">Id of the lab result</param>
        /// <returns>ApiResponse of DeleteLabResultDocumentResponse</returns>
        public ApiResponse< DeleteLabResultDocumentResponse > DeleteePatientLabResultDocumentWithHttpInfo (int? practiceid, string apivariant, int? patientId, int? labResultId)
        {
            // verify the required parameter 'practiceid' is set
            if (practiceid == null)
                throw new ApiException(400, "Missing required parameter 'practiceid' when calling DefaultApi->DeleteePatientLabResultDocument");
            // verify the required parameter 'apivariant' is set
            if (apivariant == null)
                throw new ApiException(400, "Missing required parameter 'apivariant' when calling DefaultApi->DeleteePatientLabResultDocument");
            // verify the required parameter 'patientId' is set
            if (patientId == null)
                throw new ApiException(400, "Missing required parameter 'patientId' when calling DefaultApi->DeleteePatientLabResultDocument");
            // verify the required parameter 'labResultId' is set
            if (labResultId == null)
                throw new ApiException(400, "Missing required parameter 'labResultId' when calling DefaultApi->DeleteePatientLabResultDocument");

            var localVarPath = "/{apivariant}/{practiceid}/patients/{patientId}/documents/labresult/{labResultId}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
			object localVarPostBody = null;

			// to determine the Content-Type header
			string[] localVarHttpContentTypes = new string[] {
            };
			string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
			string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (practiceid != null) localVarPathParams.Add("practiceid", this.Configuration.ApiClient.ParameterToString(practiceid)); // path parameter
            if (apivariant != null) localVarPathParams.Add("apivariant", this.Configuration.ApiClient.ParameterToString(apivariant)); // path parameter
            if (patientId != null) localVarPathParams.Add("patientId", this.Configuration.ApiClient.ParameterToString(patientId)); // path parameter
            if (labResultId != null) localVarPathParams.Add("labResultId", this.Configuration.ApiClient.ParameterToString(labResultId)); // path parameter
            // authentication (defaultSecurityScheme) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteePatientLabResultDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeleteLabResultDocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DeleteLabResultDocumentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeleteLabResultDocumentResponse)));
        }

        /// <summary>
        /// Delete single lab result
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="patientId">Id of the patient for which get information</param>
        /// <param name="labResultId">Id of the lab result</param>
        /// <returns>Task of DeleteLabResultDocumentResponse</returns>
        public async System.Threading.Tasks.Task<DeleteLabResultDocumentResponse> DeleteePatientLabResultDocumentAsync (int? practiceid, string apivariant, int? patientId, int? labResultId)
        {
             ApiResponse<DeleteLabResultDocumentResponse> localVarResponse = await DeleteePatientLabResultDocumentAsyncWithHttpInfo(practiceid, apivariant, patientId, labResultId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete single lab result
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="patientId">Id of the patient for which get information</param>
        /// <param name="labResultId">Id of the lab result</param>
        /// <returns>Task of ApiResponse (DeleteLabResultDocumentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DeleteLabResultDocumentResponse>> DeleteePatientLabResultDocumentAsyncWithHttpInfo (int? practiceid, string apivariant, int? patientId, int? labResultId)
        {
            // verify the required parameter 'practiceid' is set
            if (practiceid == null)
                throw new ApiException(400, "Missing required parameter 'practiceid' when calling DefaultApi->DeleteePatientLabResultDocument");
            // verify the required parameter 'apivariant' is set
            if (apivariant == null)
                throw new ApiException(400, "Missing required parameter 'apivariant' when calling DefaultApi->DeleteePatientLabResultDocument");
            // verify the required parameter 'patientId' is set
            if (patientId == null)
                throw new ApiException(400, "Missing required parameter 'patientId' when calling DefaultApi->DeleteePatientLabResultDocument");
            // verify the required parameter 'labResultId' is set
            if (labResultId == null)
                throw new ApiException(400, "Missing required parameter 'labResultId' when calling DefaultApi->DeleteePatientLabResultDocument");

            var localVarPath = "/{apivariant}/{practiceid}/patients/{patientId}/documents/labresult/{labResultId}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
			object localVarPostBody = null;

			// to determine the Content-Type header
			string[] localVarHttpContentTypes = new string[] {
            };
			string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
			string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (practiceid != null) localVarPathParams.Add("practiceid", this.Configuration.ApiClient.ParameterToString(practiceid)); // path parameter
            if (apivariant != null) localVarPathParams.Add("apivariant", this.Configuration.ApiClient.ParameterToString(apivariant)); // path parameter
            if (patientId != null) localVarPathParams.Add("patientId", this.Configuration.ApiClient.ParameterToString(patientId)); // path parameter
            if (labResultId != null) localVarPathParams.Add("labResultId", this.Configuration.ApiClient.ParameterToString(labResultId)); // path parameter
            // authentication (defaultSecurityScheme) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteePatientLabResultDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeleteLabResultDocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DeleteLabResultDocumentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeleteLabResultDocumentResponse)));
        }

        /// <summary>
        /// Get Information about a single patient&#x27;s appointment by id
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="appointmentId">Id of the appointment.</param>
        /// <param name="ignorerestrictions">When showing patient detail for appointments, the patient information for patients with record restrictions and blocked patients will not be shown. Setting this flag to true will show that information for those patients.  (optional)</param>
        /// <param name="showclaimdetail">Include claim information, if available, associated with an appointment.  (optional)</param>
        /// <param name="showcopay">By default, the expected co-pay is returned. For performance purposes, you can set this to false and copay will not be populated.  (optional)</param>
        /// <param name="showexpectedprocedurecodes">Show the expetcted procedurecodes. (optional)</param>
        /// <param name="showinsurance">Include patient insurance information. Shows insurance packages for the appointment if any are selected, and all patient packages otherwise.  (optional)</param>
        /// <param name="showpatientdetail">Include patient information for each patient associated with an appointment. (optional)</param>
        /// <returns>Appointment</returns>
        public Appointment GetAppointmentById (int? practiceid, string apivariant, int? appointmentId, bool? ignorerestrictions = null, bool? showclaimdetail = null, bool? showcopay = null, bool? showexpectedprocedurecodes = null, bool? showinsurance = null, bool? showpatientdetail = null)
        {
             ApiResponse<Appointment> localVarResponse = GetAppointmentByIdWithHttpInfo(practiceid, apivariant, appointmentId, ignorerestrictions, showclaimdetail, showcopay, showexpectedprocedurecodes, showinsurance, showpatientdetail);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Information about a single patient&#x27;s appointment by id
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="appointmentId">Id of the appointment.</param>
        /// <param name="ignorerestrictions">When showing patient detail for appointments, the patient information for patients with record restrictions and blocked patients will not be shown. Setting this flag to true will show that information for those patients.  (optional)</param>
        /// <param name="showclaimdetail">Include claim information, if available, associated with an appointment.  (optional)</param>
        /// <param name="showcopay">By default, the expected co-pay is returned. For performance purposes, you can set this to false and copay will not be populated.  (optional)</param>
        /// <param name="showexpectedprocedurecodes">Show the expetcted procedurecodes. (optional)</param>
        /// <param name="showinsurance">Include patient insurance information. Shows insurance packages for the appointment if any are selected, and all patient packages otherwise.  (optional)</param>
        /// <param name="showpatientdetail">Include patient information for each patient associated with an appointment. (optional)</param>
        /// <returns>ApiResponse of Appointment</returns>
        public ApiResponse< Appointment > GetAppointmentByIdWithHttpInfo (int? practiceid, string apivariant, int? appointmentId, bool? ignorerestrictions = null, bool? showclaimdetail = null, bool? showcopay = null, bool? showexpectedprocedurecodes = null, bool? showinsurance = null, bool? showpatientdetail = null)
        {
            // verify the required parameter 'practiceid' is set
            if (practiceid == null)
                throw new ApiException(400, "Missing required parameter 'practiceid' when calling DefaultApi->GetAppointmentById");
            // verify the required parameter 'apivariant' is set
            if (apivariant == null)
                throw new ApiException(400, "Missing required parameter 'apivariant' when calling DefaultApi->GetAppointmentById");
            // verify the required parameter 'appointmentId' is set
            if (appointmentId == null)
                throw new ApiException(400, "Missing required parameter 'appointmentId' when calling DefaultApi->GetAppointmentById");

            var localVarPath = "/{apivariant}/{practiceid}/appointments/{appointmentId}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
			object localVarPostBody = null;

			// to determine the Content-Type header
			string[] localVarHttpContentTypes = new string[] {
            };
			string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
			string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (practiceid != null) localVarPathParams.Add("practiceid", this.Configuration.ApiClient.ParameterToString(practiceid)); // path parameter
            if (apivariant != null) localVarPathParams.Add("apivariant", this.Configuration.ApiClient.ParameterToString(apivariant)); // path parameter
            if (appointmentId != null) localVarPathParams.Add("appointmentId", this.Configuration.ApiClient.ParameterToString(appointmentId)); // path parameter
            if (ignorerestrictions != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ignorerestrictions", ignorerestrictions)); // query parameter
            if (showclaimdetail != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showclaimdetail", showclaimdetail)); // query parameter
            if (showcopay != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showcopay", showcopay)); // query parameter
            if (showexpectedprocedurecodes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showexpectedprocedurecodes", showexpectedprocedurecodes)); // query parameter
            if (showinsurance != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showinsurance", showinsurance)); // query parameter
            if (showpatientdetail != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showpatientdetail", showpatientdetail)); // query parameter
            // authentication (defaultSecurityScheme) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAppointmentById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Appointment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Appointment) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Appointment)));
        }

        /// <summary>
        /// Get Information about a single patient&#x27;s appointment by id
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="appointmentId">Id of the appointment.</param>
        /// <param name="ignorerestrictions">When showing patient detail for appointments, the patient information for patients with record restrictions and blocked patients will not be shown. Setting this flag to true will show that information for those patients.  (optional)</param>
        /// <param name="showclaimdetail">Include claim information, if available, associated with an appointment.  (optional)</param>
        /// <param name="showcopay">By default, the expected co-pay is returned. For performance purposes, you can set this to false and copay will not be populated.  (optional)</param>
        /// <param name="showexpectedprocedurecodes">Show the expetcted procedurecodes. (optional)</param>
        /// <param name="showinsurance">Include patient insurance information. Shows insurance packages for the appointment if any are selected, and all patient packages otherwise.  (optional)</param>
        /// <param name="showpatientdetail">Include patient information for each patient associated with an appointment. (optional)</param>
        /// <returns>Task of Appointment</returns>
        public async System.Threading.Tasks.Task<Appointment> GetAppointmentByIdAsync (int? practiceid, string apivariant, int? appointmentId, bool? ignorerestrictions = null, bool? showclaimdetail = null, bool? showcopay = null, bool? showexpectedprocedurecodes = null, bool? showinsurance = null, bool? showpatientdetail = null)
        {
             ApiResponse<Appointment> localVarResponse = await GetAppointmentByIdAsyncWithHttpInfo(practiceid, apivariant, appointmentId, ignorerestrictions, showclaimdetail, showcopay, showexpectedprocedurecodes, showinsurance, showpatientdetail);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Information about a single patient&#x27;s appointment by id
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="appointmentId">Id of the appointment.</param>
        /// <param name="ignorerestrictions">When showing patient detail for appointments, the patient information for patients with record restrictions and blocked patients will not be shown. Setting this flag to true will show that information for those patients.  (optional)</param>
        /// <param name="showclaimdetail">Include claim information, if available, associated with an appointment.  (optional)</param>
        /// <param name="showcopay">By default, the expected co-pay is returned. For performance purposes, you can set this to false and copay will not be populated.  (optional)</param>
        /// <param name="showexpectedprocedurecodes">Show the expetcted procedurecodes. (optional)</param>
        /// <param name="showinsurance">Include patient insurance information. Shows insurance packages for the appointment if any are selected, and all patient packages otherwise.  (optional)</param>
        /// <param name="showpatientdetail">Include patient information for each patient associated with an appointment. (optional)</param>
        /// <returns>Task of ApiResponse (Appointment)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Appointment>> GetAppointmentByIdAsyncWithHttpInfo (int? practiceid, string apivariant, int? appointmentId, bool? ignorerestrictions = null, bool? showclaimdetail = null, bool? showcopay = null, bool? showexpectedprocedurecodes = null, bool? showinsurance = null, bool? showpatientdetail = null)
        {
            // verify the required parameter 'practiceid' is set
            if (practiceid == null)
                throw new ApiException(400, "Missing required parameter 'practiceid' when calling DefaultApi->GetAppointmentById");
            // verify the required parameter 'apivariant' is set
            if (apivariant == null)
                throw new ApiException(400, "Missing required parameter 'apivariant' when calling DefaultApi->GetAppointmentById");
            // verify the required parameter 'appointmentId' is set
            if (appointmentId == null)
                throw new ApiException(400, "Missing required parameter 'appointmentId' when calling DefaultApi->GetAppointmentById");

            var localVarPath = "/{apivariant}/{practiceid}/appointments/{appointmentId}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
			object localVarPostBody = null;

			// to determine the Content-Type header
			string[] localVarHttpContentTypes = new string[] {
            };
			string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
			string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (practiceid != null) localVarPathParams.Add("practiceid", this.Configuration.ApiClient.ParameterToString(practiceid)); // path parameter
            if (apivariant != null) localVarPathParams.Add("apivariant", this.Configuration.ApiClient.ParameterToString(apivariant)); // path parameter
            if (appointmentId != null) localVarPathParams.Add("appointmentId", this.Configuration.ApiClient.ParameterToString(appointmentId)); // path parameter
            if (ignorerestrictions != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ignorerestrictions", ignorerestrictions)); // query parameter
            if (showclaimdetail != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showclaimdetail", showclaimdetail)); // query parameter
            if (showcopay != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showcopay", showcopay)); // query parameter
            if (showexpectedprocedurecodes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showexpectedprocedurecodes", showexpectedprocedurecodes)); // query parameter
            if (showinsurance != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showinsurance", showinsurance)); // query parameter
            if (showpatientdetail != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showpatientdetail", showpatientdetail)); // query parameter
            // authentication (defaultSecurityScheme) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAppointmentById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Appointment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Appointment) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Appointment)));
        }

        /// <summary>
        /// Get appointment types
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="hidegeneric">By default, we show both generic and non-generic types. Setting this to true will hide the generic types (and show only non-generic types). (optional)</param>
        /// <param name="hidenongeneric">By default, we show both generic and non-generic types. Setting this to true will hide non-generic types (and show only generic types). (optional)</param>
        /// <param name="hidenonpatient">This defaults to true if not specified, and thus will hide non-patient facing types. Setting this to false would thus show non-patient facing types. (optional)</param>
        /// <param name="hidetemplatetypeonly">By default, we show both \&quot;template only\&quot; and not-template only types. Setting this to true, the results will omit template only types. (\&quot;Template only\&quot; is a setting that makes the type appear in schedules, but forces users to select a non-template type upon booking.) (optional)</param>
        /// <returns>AppointmentTypeList</returns>
        public AppointmentTypeList GetAppointmentTypes (int? practiceid, string apivariant, bool? hidegeneric = null, bool? hidenongeneric = null, bool? hidenonpatient = null, bool? hidetemplatetypeonly = null)
        {
             ApiResponse<AppointmentTypeList> localVarResponse = GetAppointmentTypesWithHttpInfo(practiceid, apivariant, hidegeneric, hidenongeneric, hidenonpatient, hidetemplatetypeonly);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get appointment types
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="hidegeneric">By default, we show both generic and non-generic types. Setting this to true will hide the generic types (and show only non-generic types). (optional)</param>
        /// <param name="hidenongeneric">By default, we show both generic and non-generic types. Setting this to true will hide non-generic types (and show only generic types). (optional)</param>
        /// <param name="hidenonpatient">This defaults to true if not specified, and thus will hide non-patient facing types. Setting this to false would thus show non-patient facing types. (optional)</param>
        /// <param name="hidetemplatetypeonly">By default, we show both \&quot;template only\&quot; and not-template only types. Setting this to true, the results will omit template only types. (\&quot;Template only\&quot; is a setting that makes the type appear in schedules, but forces users to select a non-template type upon booking.) (optional)</param>
        /// <returns>ApiResponse of AppointmentTypeList</returns>
        public ApiResponse< AppointmentTypeList > GetAppointmentTypesWithHttpInfo (int? practiceid, string apivariant, bool? hidegeneric = null, bool? hidenongeneric = null, bool? hidenonpatient = null, bool? hidetemplatetypeonly = null)
        {
            // verify the required parameter 'practiceid' is set
            if (practiceid == null)
                throw new ApiException(400, "Missing required parameter 'practiceid' when calling DefaultApi->GetAppointmentTypes");
            // verify the required parameter 'apivariant' is set
            if (apivariant == null)
                throw new ApiException(400, "Missing required parameter 'apivariant' when calling DefaultApi->GetAppointmentTypes");

            var localVarPath = "/{apivariant}/{practiceid}/appointmenttypes";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
			object localVarPostBody = null;

			// to determine the Content-Type header
			string[] localVarHttpContentTypes = new string[] {
            };
			string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
			string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (practiceid != null) localVarPathParams.Add("practiceid", this.Configuration.ApiClient.ParameterToString(practiceid)); // path parameter
            if (apivariant != null) localVarPathParams.Add("apivariant", this.Configuration.ApiClient.ParameterToString(apivariant)); // path parameter
            if (hidegeneric != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "hidegeneric", hidegeneric)); // query parameter
            if (hidenongeneric != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "hidenongeneric", hidenongeneric)); // query parameter
            if (hidenonpatient != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "hidenonpatient", hidenonpatient)); // query parameter
            if (hidetemplatetypeonly != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "hidetemplatetypeonly", hidetemplatetypeonly)); // query parameter
            // authentication (defaultSecurityScheme) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAppointmentTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AppointmentTypeList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AppointmentTypeList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AppointmentTypeList)));
        }

        /// <summary>
        /// Get appointment types
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="hidegeneric">By default, we show both generic and non-generic types. Setting this to true will hide the generic types (and show only non-generic types). (optional)</param>
        /// <param name="hidenongeneric">By default, we show both generic and non-generic types. Setting this to true will hide non-generic types (and show only generic types). (optional)</param>
        /// <param name="hidenonpatient">This defaults to true if not specified, and thus will hide non-patient facing types. Setting this to false would thus show non-patient facing types. (optional)</param>
        /// <param name="hidetemplatetypeonly">By default, we show both \&quot;template only\&quot; and not-template only types. Setting this to true, the results will omit template only types. (\&quot;Template only\&quot; is a setting that makes the type appear in schedules, but forces users to select a non-template type upon booking.) (optional)</param>
        /// <returns>Task of AppointmentTypeList</returns>
        public async System.Threading.Tasks.Task<AppointmentTypeList> GetAppointmentTypesAsync (int? practiceid, string apivariant, bool? hidegeneric = null, bool? hidenongeneric = null, bool? hidenonpatient = null, bool? hidetemplatetypeonly = null)
        {
             ApiResponse<AppointmentTypeList> localVarResponse = await GetAppointmentTypesAsyncWithHttpInfo(practiceid, apivariant, hidegeneric, hidenongeneric, hidenonpatient, hidetemplatetypeonly);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get appointment types
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="hidegeneric">By default, we show both generic and non-generic types. Setting this to true will hide the generic types (and show only non-generic types). (optional)</param>
        /// <param name="hidenongeneric">By default, we show both generic and non-generic types. Setting this to true will hide non-generic types (and show only generic types). (optional)</param>
        /// <param name="hidenonpatient">This defaults to true if not specified, and thus will hide non-patient facing types. Setting this to false would thus show non-patient facing types. (optional)</param>
        /// <param name="hidetemplatetypeonly">By default, we show both \&quot;template only\&quot; and not-template only types. Setting this to true, the results will omit template only types. (\&quot;Template only\&quot; is a setting that makes the type appear in schedules, but forces users to select a non-template type upon booking.) (optional)</param>
        /// <returns>Task of ApiResponse (AppointmentTypeList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AppointmentTypeList>> GetAppointmentTypesAsyncWithHttpInfo (int? practiceid, string apivariant, bool? hidegeneric = null, bool? hidenongeneric = null, bool? hidenonpatient = null, bool? hidetemplatetypeonly = null)
        {
            // verify the required parameter 'practiceid' is set
            if (practiceid == null)
                throw new ApiException(400, "Missing required parameter 'practiceid' when calling DefaultApi->GetAppointmentTypes");
            // verify the required parameter 'apivariant' is set
            if (apivariant == null)
                throw new ApiException(400, "Missing required parameter 'apivariant' when calling DefaultApi->GetAppointmentTypes");

            var localVarPath = "/{apivariant}/{practiceid}/appointmenttypes";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
			object localVarPostBody = null;

			// to determine the Content-Type header
			string[] localVarHttpContentTypes = new string[] {
            };
			string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
			string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (practiceid != null) localVarPathParams.Add("practiceid", this.Configuration.ApiClient.ParameterToString(practiceid)); // path parameter
            if (apivariant != null) localVarPathParams.Add("apivariant", this.Configuration.ApiClient.ParameterToString(apivariant)); // path parameter
            if (hidegeneric != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "hidegeneric", hidegeneric)); // query parameter
            if (hidenongeneric != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "hidenongeneric", hidenongeneric)); // query parameter
            if (hidenonpatient != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "hidenonpatient", hidenonpatient)); // query parameter
            if (hidetemplatetypeonly != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "hidetemplatetypeonly", hidetemplatetypeonly)); // query parameter
            // authentication (defaultSecurityScheme) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAppointmentTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AppointmentTypeList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AppointmentTypeList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AppointmentTypeList)));
        }

        /// <summary>
        /// Get booked appointments
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="appointmentstatus">Filter appointments by status. (optional)</param>
        /// <param name="appointmenttypeid">Filter by appointment type ID. (optional)</param>
        /// <param name="departmentid">The athenaNet department ID. (optional)</param>
        /// <param name="enddate">End of the appointment search date range (mm/dd/yyyy). Inclusive. (optional)</param>
        /// <param name="endlastmodified">Identify appointments modified prior to this date/time (mm/dd/yyyy hh:mi:ss). Inclusive. Note: This can only be used if a startlastmodified value is supplied as well.  (optional)</param>
        /// <param name="ignorerestrictions">When showing patient detail for appointments, the patient information for patients with record restrictions and blocked patients will not be shown. Setting this flag to true will show that information for those patients.  (optional)</param>
        /// <param name="patientid">The athenaNet patient ID. If operating in a Provider Group Enterprise practice, this should be the enterprise patient ID.  (optional)</param>
        /// <param name="providerid">The athenaNet provider ID. Multiple IDs (either as a comma delimited list or multiple POSTed values) are allowed. (optional)</param>
        /// <param name="scheduledenddate">End of the appointment scheduled search date range (mm/dd/yyyy). Inclusive. (optional)</param>
        /// <param name="scheduledstartdate">Start of the appointment scheduled search date range (mm/dd/yyyy). Inclusive. (optional)</param>
        /// <param name="showcancelled">Include appointments that have been cancelled. (optional)</param>
        /// <param name="showclaimdetail">Include claim information, if available, associated with an appointment.  (optional)</param>
        /// <param name="showcopay">By default, the expected co-pay is returned. For performance purposes, you can set this to false and copay will not be populated.  (optional)</param>
        /// <param name="showexpectedprocedurecodes">Show the expetcted procedurecodes. (optional)</param>
        /// <param name="showinsurance">Include patient insurance information. Shows insurance packages for the appointment if any are selected, and all patient packages otherwise.  (optional)</param>
        /// <param name="showpatientdetail">Include patient information for each patient associated with an appointment. (optional)</param>
        /// <param name="showremindercalldetail">Include all remindercall related results, if available, associated with an appointment.  (optional)</param>
        /// <param name="startdate">Start of the appointment search date range (mm/dd/yyyy). Inclusive. (optional)</param>
        /// <param name="startlastmodified">Identify appointments modified after this date/time (mm/dd/yyyy hh:mi:ss). Inclusive. (optional)</param>
        /// <returns>AppointmentList</returns>
        public AppointmentList GetBookedAppointments (int? practiceid, string apivariant, string appointmentstatus = null, int? appointmenttypeid = null, int? departmentid = null, string enddate = null, string endlastmodified = null, bool? ignorerestrictions = null, int? patientid = null, string providerid = null, string scheduledenddate = null, string scheduledstartdate = null, bool? showcancelled = null, bool? showclaimdetail = null, bool? showcopay = null, bool? showexpectedprocedurecodes = null, bool? showinsurance = null, bool? showpatientdetail = null, bool? showremindercalldetail = null, string startdate = null, string startlastmodified = null)
        {
             ApiResponse<AppointmentList> localVarResponse = GetBookedAppointmentsWithHttpInfo(practiceid, apivariant, appointmentstatus, appointmenttypeid, departmentid, enddate, endlastmodified, ignorerestrictions, patientid, providerid, scheduledenddate, scheduledstartdate, showcancelled, showclaimdetail, showcopay, showexpectedprocedurecodes, showinsurance, showpatientdetail, showremindercalldetail, startdate, startlastmodified);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get booked appointments
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="appointmentstatus">Filter appointments by status. (optional)</param>
        /// <param name="appointmenttypeid">Filter by appointment type ID. (optional)</param>
        /// <param name="departmentid">The athenaNet department ID. (optional)</param>
        /// <param name="enddate">End of the appointment search date range (mm/dd/yyyy). Inclusive. (optional)</param>
        /// <param name="endlastmodified">Identify appointments modified prior to this date/time (mm/dd/yyyy hh:mi:ss). Inclusive. Note: This can only be used if a startlastmodified value is supplied as well.  (optional)</param>
        /// <param name="ignorerestrictions">When showing patient detail for appointments, the patient information for patients with record restrictions and blocked patients will not be shown. Setting this flag to true will show that information for those patients.  (optional)</param>
        /// <param name="patientid">The athenaNet patient ID. If operating in a Provider Group Enterprise practice, this should be the enterprise patient ID.  (optional)</param>
        /// <param name="providerid">The athenaNet provider ID. Multiple IDs (either as a comma delimited list or multiple POSTed values) are allowed. (optional)</param>
        /// <param name="scheduledenddate">End of the appointment scheduled search date range (mm/dd/yyyy). Inclusive. (optional)</param>
        /// <param name="scheduledstartdate">Start of the appointment scheduled search date range (mm/dd/yyyy). Inclusive. (optional)</param>
        /// <param name="showcancelled">Include appointments that have been cancelled. (optional)</param>
        /// <param name="showclaimdetail">Include claim information, if available, associated with an appointment.  (optional)</param>
        /// <param name="showcopay">By default, the expected co-pay is returned. For performance purposes, you can set this to false and copay will not be populated.  (optional)</param>
        /// <param name="showexpectedprocedurecodes">Show the expetcted procedurecodes. (optional)</param>
        /// <param name="showinsurance">Include patient insurance information. Shows insurance packages for the appointment if any are selected, and all patient packages otherwise.  (optional)</param>
        /// <param name="showpatientdetail">Include patient information for each patient associated with an appointment. (optional)</param>
        /// <param name="showremindercalldetail">Include all remindercall related results, if available, associated with an appointment.  (optional)</param>
        /// <param name="startdate">Start of the appointment search date range (mm/dd/yyyy). Inclusive. (optional)</param>
        /// <param name="startlastmodified">Identify appointments modified after this date/time (mm/dd/yyyy hh:mi:ss). Inclusive. (optional)</param>
        /// <returns>ApiResponse of AppointmentList</returns>
        public ApiResponse< AppointmentList > GetBookedAppointmentsWithHttpInfo (int? practiceid, string apivariant, string appointmentstatus = null, int? appointmenttypeid = null, int? departmentid = null, string enddate = null, string endlastmodified = null, bool? ignorerestrictions = null, int? patientid = null, string providerid = null, string scheduledenddate = null, string scheduledstartdate = null, bool? showcancelled = null, bool? showclaimdetail = null, bool? showcopay = null, bool? showexpectedprocedurecodes = null, bool? showinsurance = null, bool? showpatientdetail = null, bool? showremindercalldetail = null, string startdate = null, string startlastmodified = null)
        {
            // verify the required parameter 'practiceid' is set
            if (practiceid == null)
                throw new ApiException(400, "Missing required parameter 'practiceid' when calling DefaultApi->GetBookedAppointments");
            // verify the required parameter 'apivariant' is set
            if (apivariant == null)
                throw new ApiException(400, "Missing required parameter 'apivariant' when calling DefaultApi->GetBookedAppointments");

            var localVarPath = "/{apivariant}/{practiceid}/appointments/booked";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
			object localVarPostBody = null;

			// to determine the Content-Type header
			string[] localVarHttpContentTypes = new string[] {
            };
			string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
			string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (practiceid != null) localVarPathParams.Add("practiceid", this.Configuration.ApiClient.ParameterToString(practiceid)); // path parameter
            if (apivariant != null) localVarPathParams.Add("apivariant", this.Configuration.ApiClient.ParameterToString(apivariant)); // path parameter
            if (appointmentstatus != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "appointmentstatus", appointmentstatus)); // query parameter
            if (appointmenttypeid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "appointmenttypeid", appointmenttypeid)); // query parameter
            if (departmentid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "departmentid", departmentid)); // query parameter
            if (enddate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enddate", enddate)); // query parameter
            if (endlastmodified != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endlastmodified", endlastmodified)); // query parameter
            if (ignorerestrictions != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ignorerestrictions", ignorerestrictions)); // query parameter
            if (patientid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "patientid", patientid)); // query parameter
            if (providerid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "providerid", providerid)); // query parameter
            if (scheduledenddate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "scheduledenddate", scheduledenddate)); // query parameter
            if (scheduledstartdate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "scheduledstartdate", scheduledstartdate)); // query parameter
            if (showcancelled != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showcancelled", showcancelled)); // query parameter
            if (showclaimdetail != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showclaimdetail", showclaimdetail)); // query parameter
            if (showcopay != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showcopay", showcopay)); // query parameter
            if (showexpectedprocedurecodes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showexpectedprocedurecodes", showexpectedprocedurecodes)); // query parameter
            if (showinsurance != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showinsurance", showinsurance)); // query parameter
            if (showpatientdetail != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showpatientdetail", showpatientdetail)); // query parameter
            if (showremindercalldetail != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showremindercalldetail", showremindercalldetail)); // query parameter
            if (startdate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startdate", startdate)); // query parameter
            if (startlastmodified != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startlastmodified", startlastmodified)); // query parameter
            // authentication (defaultSecurityScheme) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBookedAppointments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AppointmentList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AppointmentList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AppointmentList)));
        }

        /// <summary>
        /// Get booked appointments
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="appointmentstatus">Filter appointments by status. (optional)</param>
        /// <param name="appointmenttypeid">Filter by appointment type ID. (optional)</param>
        /// <param name="departmentid">The athenaNet department ID. (optional)</param>
        /// <param name="enddate">End of the appointment search date range (mm/dd/yyyy). Inclusive. (optional)</param>
        /// <param name="endlastmodified">Identify appointments modified prior to this date/time (mm/dd/yyyy hh:mi:ss). Inclusive. Note: This can only be used if a startlastmodified value is supplied as well.  (optional)</param>
        /// <param name="ignorerestrictions">When showing patient detail for appointments, the patient information for patients with record restrictions and blocked patients will not be shown. Setting this flag to true will show that information for those patients.  (optional)</param>
        /// <param name="patientid">The athenaNet patient ID. If operating in a Provider Group Enterprise practice, this should be the enterprise patient ID.  (optional)</param>
        /// <param name="providerid">The athenaNet provider ID. Multiple IDs (either as a comma delimited list or multiple POSTed values) are allowed. (optional)</param>
        /// <param name="scheduledenddate">End of the appointment scheduled search date range (mm/dd/yyyy). Inclusive. (optional)</param>
        /// <param name="scheduledstartdate">Start of the appointment scheduled search date range (mm/dd/yyyy). Inclusive. (optional)</param>
        /// <param name="showcancelled">Include appointments that have been cancelled. (optional)</param>
        /// <param name="showclaimdetail">Include claim information, if available, associated with an appointment.  (optional)</param>
        /// <param name="showcopay">By default, the expected co-pay is returned. For performance purposes, you can set this to false and copay will not be populated.  (optional)</param>
        /// <param name="showexpectedprocedurecodes">Show the expetcted procedurecodes. (optional)</param>
        /// <param name="showinsurance">Include patient insurance information. Shows insurance packages for the appointment if any are selected, and all patient packages otherwise.  (optional)</param>
        /// <param name="showpatientdetail">Include patient information for each patient associated with an appointment. (optional)</param>
        /// <param name="showremindercalldetail">Include all remindercall related results, if available, associated with an appointment.  (optional)</param>
        /// <param name="startdate">Start of the appointment search date range (mm/dd/yyyy). Inclusive. (optional)</param>
        /// <param name="startlastmodified">Identify appointments modified after this date/time (mm/dd/yyyy hh:mi:ss). Inclusive. (optional)</param>
        /// <returns>Task of AppointmentList</returns>
        public async System.Threading.Tasks.Task<AppointmentList> GetBookedAppointmentsAsync (int? practiceid, string apivariant, string appointmentstatus = null, int? appointmenttypeid = null, int? departmentid = null, string enddate = null, string endlastmodified = null, bool? ignorerestrictions = null, int? patientid = null, string providerid = null, string scheduledenddate = null, string scheduledstartdate = null, bool? showcancelled = null, bool? showclaimdetail = null, bool? showcopay = null, bool? showexpectedprocedurecodes = null, bool? showinsurance = null, bool? showpatientdetail = null, bool? showremindercalldetail = null, string startdate = null, string startlastmodified = null)
        {
             ApiResponse<AppointmentList> localVarResponse = await GetBookedAppointmentsAsyncWithHttpInfo(practiceid, apivariant, appointmentstatus, appointmenttypeid, departmentid, enddate, endlastmodified, ignorerestrictions, patientid, providerid, scheduledenddate, scheduledstartdate, showcancelled, showclaimdetail, showcopay, showexpectedprocedurecodes, showinsurance, showpatientdetail, showremindercalldetail, startdate, startlastmodified);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get booked appointments
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="appointmentstatus">Filter appointments by status. (optional)</param>
        /// <param name="appointmenttypeid">Filter by appointment type ID. (optional)</param>
        /// <param name="departmentid">The athenaNet department ID. (optional)</param>
        /// <param name="enddate">End of the appointment search date range (mm/dd/yyyy). Inclusive. (optional)</param>
        /// <param name="endlastmodified">Identify appointments modified prior to this date/time (mm/dd/yyyy hh:mi:ss). Inclusive. Note: This can only be used if a startlastmodified value is supplied as well.  (optional)</param>
        /// <param name="ignorerestrictions">When showing patient detail for appointments, the patient information for patients with record restrictions and blocked patients will not be shown. Setting this flag to true will show that information for those patients.  (optional)</param>
        /// <param name="patientid">The athenaNet patient ID. If operating in a Provider Group Enterprise practice, this should be the enterprise patient ID.  (optional)</param>
        /// <param name="providerid">The athenaNet provider ID. Multiple IDs (either as a comma delimited list or multiple POSTed values) are allowed. (optional)</param>
        /// <param name="scheduledenddate">End of the appointment scheduled search date range (mm/dd/yyyy). Inclusive. (optional)</param>
        /// <param name="scheduledstartdate">Start of the appointment scheduled search date range (mm/dd/yyyy). Inclusive. (optional)</param>
        /// <param name="showcancelled">Include appointments that have been cancelled. (optional)</param>
        /// <param name="showclaimdetail">Include claim information, if available, associated with an appointment.  (optional)</param>
        /// <param name="showcopay">By default, the expected co-pay is returned. For performance purposes, you can set this to false and copay will not be populated.  (optional)</param>
        /// <param name="showexpectedprocedurecodes">Show the expetcted procedurecodes. (optional)</param>
        /// <param name="showinsurance">Include patient insurance information. Shows insurance packages for the appointment if any are selected, and all patient packages otherwise.  (optional)</param>
        /// <param name="showpatientdetail">Include patient information for each patient associated with an appointment. (optional)</param>
        /// <param name="showremindercalldetail">Include all remindercall related results, if available, associated with an appointment.  (optional)</param>
        /// <param name="startdate">Start of the appointment search date range (mm/dd/yyyy). Inclusive. (optional)</param>
        /// <param name="startlastmodified">Identify appointments modified after this date/time (mm/dd/yyyy hh:mi:ss). Inclusive. (optional)</param>
        /// <returns>Task of ApiResponse (AppointmentList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AppointmentList>> GetBookedAppointmentsAsyncWithHttpInfo (int? practiceid, string apivariant, string appointmentstatus = null, int? appointmenttypeid = null, int? departmentid = null, string enddate = null, string endlastmodified = null, bool? ignorerestrictions = null, int? patientid = null, string providerid = null, string scheduledenddate = null, string scheduledstartdate = null, bool? showcancelled = null, bool? showclaimdetail = null, bool? showcopay = null, bool? showexpectedprocedurecodes = null, bool? showinsurance = null, bool? showpatientdetail = null, bool? showremindercalldetail = null, string startdate = null, string startlastmodified = null)
        {
            // verify the required parameter 'practiceid' is set
            if (practiceid == null)
                throw new ApiException(400, "Missing required parameter 'practiceid' when calling DefaultApi->GetBookedAppointments");
            // verify the required parameter 'apivariant' is set
            if (apivariant == null)
                throw new ApiException(400, "Missing required parameter 'apivariant' when calling DefaultApi->GetBookedAppointments");

            var localVarPath = "/{apivariant}/{practiceid}/appointments/booked";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
			object localVarPostBody = null;

			// to determine the Content-Type header
			string[] localVarHttpContentTypes = new string[] {
            };
			string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
			string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (practiceid != null) localVarPathParams.Add("practiceid", this.Configuration.ApiClient.ParameterToString(practiceid)); // path parameter
            if (apivariant != null) localVarPathParams.Add("apivariant", this.Configuration.ApiClient.ParameterToString(apivariant)); // path parameter
            if (appointmentstatus != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "appointmentstatus", appointmentstatus)); // query parameter
            if (appointmenttypeid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "appointmenttypeid", appointmenttypeid)); // query parameter
            if (departmentid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "departmentid", departmentid)); // query parameter
            if (enddate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enddate", enddate)); // query parameter
            if (endlastmodified != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endlastmodified", endlastmodified)); // query parameter
            if (ignorerestrictions != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ignorerestrictions", ignorerestrictions)); // query parameter
            if (patientid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "patientid", patientid)); // query parameter
            if (providerid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "providerid", providerid)); // query parameter
            if (scheduledenddate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "scheduledenddate", scheduledenddate)); // query parameter
            if (scheduledstartdate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "scheduledstartdate", scheduledstartdate)); // query parameter
            if (showcancelled != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showcancelled", showcancelled)); // query parameter
            if (showclaimdetail != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showclaimdetail", showclaimdetail)); // query parameter
            if (showcopay != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showcopay", showcopay)); // query parameter
            if (showexpectedprocedurecodes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showexpectedprocedurecodes", showexpectedprocedurecodes)); // query parameter
            if (showinsurance != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showinsurance", showinsurance)); // query parameter
            if (showpatientdetail != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showpatientdetail", showpatientdetail)); // query parameter
            if (showremindercalldetail != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showremindercalldetail", showremindercalldetail)); // query parameter
            if (startdate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startdate", startdate)); // query parameter
            if (startlastmodified != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startlastmodified", startlastmodified)); // query parameter
            // authentication (defaultSecurityScheme) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBookedAppointments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AppointmentList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AppointmentList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AppointmentList)));
        }

        /// <summary>
        /// Get booked appointments
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="appointmentstatus">Filter appointments by status. (optional)</param>
        /// <param name="appointmenttypeid">Filter by appointment type ID. (optional)</param>
        /// <param name="departmentid">The athenaNet department ID. Multiple IDs (either as a comma delimited list or multiple POSTed values) are allowed. (optional)</param>
        /// <param name="enddate">End of the appointment search date range (mm/dd/yyyy). Inclusive. (optional)</param>
        /// <param name="endlastmodified">Identify appointments modified prior to this date/time (mm/dd/yyyy hh:mi:ss). Inclusive. Note: This can only be used if a startlastmodified value is supplied as well.  (optional)</param>
        /// <param name="ignorerestrictions">When showing patient detail for appointments, the patient information for patients with record restrictions and blocked patients will not be shown. Setting this flag to true will show that information for those patients.  (optional)</param>
        /// <param name="patientid">The athenaNet patient ID. If operating in a Provider Group Enterprise practice, this should be the enterprise patient ID.  (optional)</param>
        /// <param name="providerid">The athenaNet provider ID. Multiple IDs (either as a comma delimited list or multiple POSTed values) are allowed. (optional)</param>
        /// <param name="scheduledenddate">End of the appointment scheduled search date range (mm/dd/yyyy). Inclusive. (optional)</param>
        /// <param name="scheduledstartdate">Start of the appointment scheduled search date range (mm/dd/yyyy). Inclusive. (optional)</param>
        /// <param name="showcancelled">Include appointments that have been cancelled. (optional)</param>
        /// <param name="showclaimdetail">Include claim information, if available, associated with an appointment.  (optional)</param>
        /// <param name="showcopay">By default, the expected co-pay is returned. For performance purposes, you can set this to false and copay will not be populated.  (optional)</param>
        /// <param name="showexpectedprocedurecodes">Show the expetcted procedurecodes. (optional)</param>
        /// <param name="showinsurance">Include patient insurance information. Shows insurance packages for the appointment if any are selected, and all patient packages otherwise.  (optional)</param>
        /// <param name="showpatientdetail">Include patient information for each patient associated with an appointment. (optional)</param>
        /// <param name="showremindercalldetail">Include all remindercall related results, if available, associated with an appointment.  (optional)</param>
        /// <param name="startdate">Start of the appointment search date range (mm/dd/yyyy). Inclusive. (optional)</param>
        /// <param name="startlastmodified">Identify appointments modified after this date/time (mm/dd/yyyy hh:mi:ss). Inclusive. (optional)</param>
        /// <returns>AppointmentList</returns>
        public AppointmentList GetBookedAppointmentsFromMultipleDepartments (int? practiceid, string apivariant, string appointmentstatus = null, int? appointmenttypeid = null, string departmentid = null, string enddate = null, string endlastmodified = null, bool? ignorerestrictions = null, int? patientid = null, string providerid = null, string scheduledenddate = null, string scheduledstartdate = null, bool? showcancelled = null, bool? showclaimdetail = null, bool? showcopay = null, bool? showexpectedprocedurecodes = null, bool? showinsurance = null, bool? showpatientdetail = null, bool? showremindercalldetail = null, string startdate = null, string startlastmodified = null)
        {
             ApiResponse<AppointmentList> localVarResponse = GetBookedAppointmentsFromMultipleDepartmentsWithHttpInfo(practiceid, apivariant, appointmentstatus, appointmenttypeid, departmentid, enddate, endlastmodified, ignorerestrictions, patientid, providerid, scheduledenddate, scheduledstartdate, showcancelled, showclaimdetail, showcopay, showexpectedprocedurecodes, showinsurance, showpatientdetail, showremindercalldetail, startdate, startlastmodified);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get booked appointments
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="appointmentstatus">Filter appointments by status. (optional)</param>
        /// <param name="appointmenttypeid">Filter by appointment type ID. (optional)</param>
        /// <param name="departmentid">The athenaNet department ID. Multiple IDs (either as a comma delimited list or multiple POSTed values) are allowed. (optional)</param>
        /// <param name="enddate">End of the appointment search date range (mm/dd/yyyy). Inclusive. (optional)</param>
        /// <param name="endlastmodified">Identify appointments modified prior to this date/time (mm/dd/yyyy hh:mi:ss). Inclusive. Note: This can only be used if a startlastmodified value is supplied as well.  (optional)</param>
        /// <param name="ignorerestrictions">When showing patient detail for appointments, the patient information for patients with record restrictions and blocked patients will not be shown. Setting this flag to true will show that information for those patients.  (optional)</param>
        /// <param name="patientid">The athenaNet patient ID. If operating in a Provider Group Enterprise practice, this should be the enterprise patient ID.  (optional)</param>
        /// <param name="providerid">The athenaNet provider ID. Multiple IDs (either as a comma delimited list or multiple POSTed values) are allowed. (optional)</param>
        /// <param name="scheduledenddate">End of the appointment scheduled search date range (mm/dd/yyyy). Inclusive. (optional)</param>
        /// <param name="scheduledstartdate">Start of the appointment scheduled search date range (mm/dd/yyyy). Inclusive. (optional)</param>
        /// <param name="showcancelled">Include appointments that have been cancelled. (optional)</param>
        /// <param name="showclaimdetail">Include claim information, if available, associated with an appointment.  (optional)</param>
        /// <param name="showcopay">By default, the expected co-pay is returned. For performance purposes, you can set this to false and copay will not be populated.  (optional)</param>
        /// <param name="showexpectedprocedurecodes">Show the expetcted procedurecodes. (optional)</param>
        /// <param name="showinsurance">Include patient insurance information. Shows insurance packages for the appointment if any are selected, and all patient packages otherwise.  (optional)</param>
        /// <param name="showpatientdetail">Include patient information for each patient associated with an appointment. (optional)</param>
        /// <param name="showremindercalldetail">Include all remindercall related results, if available, associated with an appointment.  (optional)</param>
        /// <param name="startdate">Start of the appointment search date range (mm/dd/yyyy). Inclusive. (optional)</param>
        /// <param name="startlastmodified">Identify appointments modified after this date/time (mm/dd/yyyy hh:mi:ss). Inclusive. (optional)</param>
        /// <returns>ApiResponse of AppointmentList</returns>
        public ApiResponse< AppointmentList > GetBookedAppointmentsFromMultipleDepartmentsWithHttpInfo (int? practiceid, string apivariant, string appointmentstatus = null, int? appointmenttypeid = null, string departmentid = null, string enddate = null, string endlastmodified = null, bool? ignorerestrictions = null, int? patientid = null, string providerid = null, string scheduledenddate = null, string scheduledstartdate = null, bool? showcancelled = null, bool? showclaimdetail = null, bool? showcopay = null, bool? showexpectedprocedurecodes = null, bool? showinsurance = null, bool? showpatientdetail = null, bool? showremindercalldetail = null, string startdate = null, string startlastmodified = null)
        {
            // verify the required parameter 'practiceid' is set
            if (practiceid == null)
                throw new ApiException(400, "Missing required parameter 'practiceid' when calling DefaultApi->GetBookedAppointmentsFromMultipleDepartments");
            // verify the required parameter 'apivariant' is set
            if (apivariant == null)
                throw new ApiException(400, "Missing required parameter 'apivariant' when calling DefaultApi->GetBookedAppointmentsFromMultipleDepartments");

            var localVarPath = "/{apivariant}/{practiceid}/appointments/booked/multipledepartment";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
			object localVarPostBody = null;

			// to determine the Content-Type header
			string[] localVarHttpContentTypes = new string[] {
            };
			string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
			string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (practiceid != null) localVarPathParams.Add("practiceid", this.Configuration.ApiClient.ParameterToString(practiceid)); // path parameter
            if (apivariant != null) localVarPathParams.Add("apivariant", this.Configuration.ApiClient.ParameterToString(apivariant)); // path parameter
            if (appointmentstatus != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "appointmentstatus", appointmentstatus)); // query parameter
            if (appointmenttypeid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "appointmenttypeid", appointmenttypeid)); // query parameter
            if (departmentid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "departmentid", departmentid)); // query parameter
            if (enddate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enddate", enddate)); // query parameter
            if (endlastmodified != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endlastmodified", endlastmodified)); // query parameter
            if (ignorerestrictions != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ignorerestrictions", ignorerestrictions)); // query parameter
            if (patientid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "patientid", patientid)); // query parameter
            if (providerid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "providerid", providerid)); // query parameter
            if (scheduledenddate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "scheduledenddate", scheduledenddate)); // query parameter
            if (scheduledstartdate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "scheduledstartdate", scheduledstartdate)); // query parameter
            if (showcancelled != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showcancelled", showcancelled)); // query parameter
            if (showclaimdetail != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showclaimdetail", showclaimdetail)); // query parameter
            if (showcopay != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showcopay", showcopay)); // query parameter
            if (showexpectedprocedurecodes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showexpectedprocedurecodes", showexpectedprocedurecodes)); // query parameter
            if (showinsurance != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showinsurance", showinsurance)); // query parameter
            if (showpatientdetail != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showpatientdetail", showpatientdetail)); // query parameter
            if (showremindercalldetail != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showremindercalldetail", showremindercalldetail)); // query parameter
            if (startdate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startdate", startdate)); // query parameter
            if (startlastmodified != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startlastmodified", startlastmodified)); // query parameter
            // authentication (defaultSecurityScheme) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBookedAppointmentsFromMultipleDepartments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AppointmentList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AppointmentList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AppointmentList)));
        }

        /// <summary>
        /// Get booked appointments
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="appointmentstatus">Filter appointments by status. (optional)</param>
        /// <param name="appointmenttypeid">Filter by appointment type ID. (optional)</param>
        /// <param name="departmentid">The athenaNet department ID. Multiple IDs (either as a comma delimited list or multiple POSTed values) are allowed. (optional)</param>
        /// <param name="enddate">End of the appointment search date range (mm/dd/yyyy). Inclusive. (optional)</param>
        /// <param name="endlastmodified">Identify appointments modified prior to this date/time (mm/dd/yyyy hh:mi:ss). Inclusive. Note: This can only be used if a startlastmodified value is supplied as well.  (optional)</param>
        /// <param name="ignorerestrictions">When showing patient detail for appointments, the patient information for patients with record restrictions and blocked patients will not be shown. Setting this flag to true will show that information for those patients.  (optional)</param>
        /// <param name="patientid">The athenaNet patient ID. If operating in a Provider Group Enterprise practice, this should be the enterprise patient ID.  (optional)</param>
        /// <param name="providerid">The athenaNet provider ID. Multiple IDs (either as a comma delimited list or multiple POSTed values) are allowed. (optional)</param>
        /// <param name="scheduledenddate">End of the appointment scheduled search date range (mm/dd/yyyy). Inclusive. (optional)</param>
        /// <param name="scheduledstartdate">Start of the appointment scheduled search date range (mm/dd/yyyy). Inclusive. (optional)</param>
        /// <param name="showcancelled">Include appointments that have been cancelled. (optional)</param>
        /// <param name="showclaimdetail">Include claim information, if available, associated with an appointment.  (optional)</param>
        /// <param name="showcopay">By default, the expected co-pay is returned. For performance purposes, you can set this to false and copay will not be populated.  (optional)</param>
        /// <param name="showexpectedprocedurecodes">Show the expetcted procedurecodes. (optional)</param>
        /// <param name="showinsurance">Include patient insurance information. Shows insurance packages for the appointment if any are selected, and all patient packages otherwise.  (optional)</param>
        /// <param name="showpatientdetail">Include patient information for each patient associated with an appointment. (optional)</param>
        /// <param name="showremindercalldetail">Include all remindercall related results, if available, associated with an appointment.  (optional)</param>
        /// <param name="startdate">Start of the appointment search date range (mm/dd/yyyy). Inclusive. (optional)</param>
        /// <param name="startlastmodified">Identify appointments modified after this date/time (mm/dd/yyyy hh:mi:ss). Inclusive. (optional)</param>
        /// <returns>Task of AppointmentList</returns>
        public async System.Threading.Tasks.Task<AppointmentList> GetBookedAppointmentsFromMultipleDepartmentsAsync (int? practiceid, string apivariant, string appointmentstatus = null, int? appointmenttypeid = null, string departmentid = null, string enddate = null, string endlastmodified = null, bool? ignorerestrictions = null, int? patientid = null, string providerid = null, string scheduledenddate = null, string scheduledstartdate = null, bool? showcancelled = null, bool? showclaimdetail = null, bool? showcopay = null, bool? showexpectedprocedurecodes = null, bool? showinsurance = null, bool? showpatientdetail = null, bool? showremindercalldetail = null, string startdate = null, string startlastmodified = null)
        {
             ApiResponse<AppointmentList> localVarResponse = await GetBookedAppointmentsFromMultipleDepartmentsAsyncWithHttpInfo(practiceid, apivariant, appointmentstatus, appointmenttypeid, departmentid, enddate, endlastmodified, ignorerestrictions, patientid, providerid, scheduledenddate, scheduledstartdate, showcancelled, showclaimdetail, showcopay, showexpectedprocedurecodes, showinsurance, showpatientdetail, showremindercalldetail, startdate, startlastmodified);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get booked appointments
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="appointmentstatus">Filter appointments by status. (optional)</param>
        /// <param name="appointmenttypeid">Filter by appointment type ID. (optional)</param>
        /// <param name="departmentid">The athenaNet department ID. Multiple IDs (either as a comma delimited list or multiple POSTed values) are allowed. (optional)</param>
        /// <param name="enddate">End of the appointment search date range (mm/dd/yyyy). Inclusive. (optional)</param>
        /// <param name="endlastmodified">Identify appointments modified prior to this date/time (mm/dd/yyyy hh:mi:ss). Inclusive. Note: This can only be used if a startlastmodified value is supplied as well.  (optional)</param>
        /// <param name="ignorerestrictions">When showing patient detail for appointments, the patient information for patients with record restrictions and blocked patients will not be shown. Setting this flag to true will show that information for those patients.  (optional)</param>
        /// <param name="patientid">The athenaNet patient ID. If operating in a Provider Group Enterprise practice, this should be the enterprise patient ID.  (optional)</param>
        /// <param name="providerid">The athenaNet provider ID. Multiple IDs (either as a comma delimited list or multiple POSTed values) are allowed. (optional)</param>
        /// <param name="scheduledenddate">End of the appointment scheduled search date range (mm/dd/yyyy). Inclusive. (optional)</param>
        /// <param name="scheduledstartdate">Start of the appointment scheduled search date range (mm/dd/yyyy). Inclusive. (optional)</param>
        /// <param name="showcancelled">Include appointments that have been cancelled. (optional)</param>
        /// <param name="showclaimdetail">Include claim information, if available, associated with an appointment.  (optional)</param>
        /// <param name="showcopay">By default, the expected co-pay is returned. For performance purposes, you can set this to false and copay will not be populated.  (optional)</param>
        /// <param name="showexpectedprocedurecodes">Show the expetcted procedurecodes. (optional)</param>
        /// <param name="showinsurance">Include patient insurance information. Shows insurance packages for the appointment if any are selected, and all patient packages otherwise.  (optional)</param>
        /// <param name="showpatientdetail">Include patient information for each patient associated with an appointment. (optional)</param>
        /// <param name="showremindercalldetail">Include all remindercall related results, if available, associated with an appointment.  (optional)</param>
        /// <param name="startdate">Start of the appointment search date range (mm/dd/yyyy). Inclusive. (optional)</param>
        /// <param name="startlastmodified">Identify appointments modified after this date/time (mm/dd/yyyy hh:mi:ss). Inclusive. (optional)</param>
        /// <returns>Task of ApiResponse (AppointmentList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AppointmentList>> GetBookedAppointmentsFromMultipleDepartmentsAsyncWithHttpInfo (int? practiceid, string apivariant, string appointmentstatus = null, int? appointmenttypeid = null, string departmentid = null, string enddate = null, string endlastmodified = null, bool? ignorerestrictions = null, int? patientid = null, string providerid = null, string scheduledenddate = null, string scheduledstartdate = null, bool? showcancelled = null, bool? showclaimdetail = null, bool? showcopay = null, bool? showexpectedprocedurecodes = null, bool? showinsurance = null, bool? showpatientdetail = null, bool? showremindercalldetail = null, string startdate = null, string startlastmodified = null)
        {
            // verify the required parameter 'practiceid' is set
            if (practiceid == null)
                throw new ApiException(400, "Missing required parameter 'practiceid' when calling DefaultApi->GetBookedAppointmentsFromMultipleDepartments");
            // verify the required parameter 'apivariant' is set
            if (apivariant == null)
                throw new ApiException(400, "Missing required parameter 'apivariant' when calling DefaultApi->GetBookedAppointmentsFromMultipleDepartments");

            var localVarPath = "/{apivariant}/{practiceid}/appointments/booked/multipledepartment";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
			object localVarPostBody = null;

			// to determine the Content-Type header
			string[] localVarHttpContentTypes = new string[] {
            };
			string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
			string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (practiceid != null) localVarPathParams.Add("practiceid", this.Configuration.ApiClient.ParameterToString(practiceid)); // path parameter
            if (apivariant != null) localVarPathParams.Add("apivariant", this.Configuration.ApiClient.ParameterToString(apivariant)); // path parameter
            if (appointmentstatus != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "appointmentstatus", appointmentstatus)); // query parameter
            if (appointmenttypeid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "appointmenttypeid", appointmenttypeid)); // query parameter
            if (departmentid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "departmentid", departmentid)); // query parameter
            if (enddate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enddate", enddate)); // query parameter
            if (endlastmodified != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endlastmodified", endlastmodified)); // query parameter
            if (ignorerestrictions != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ignorerestrictions", ignorerestrictions)); // query parameter
            if (patientid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "patientid", patientid)); // query parameter
            if (providerid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "providerid", providerid)); // query parameter
            if (scheduledenddate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "scheduledenddate", scheduledenddate)); // query parameter
            if (scheduledstartdate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "scheduledstartdate", scheduledstartdate)); // query parameter
            if (showcancelled != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showcancelled", showcancelled)); // query parameter
            if (showclaimdetail != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showclaimdetail", showclaimdetail)); // query parameter
            if (showcopay != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showcopay", showcopay)); // query parameter
            if (showexpectedprocedurecodes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showexpectedprocedurecodes", showexpectedprocedurecodes)); // query parameter
            if (showinsurance != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showinsurance", showinsurance)); // query parameter
            if (showpatientdetail != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showpatientdetail", showpatientdetail)); // query parameter
            if (showremindercalldetail != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showremindercalldetail", showremindercalldetail)); // query parameter
            if (startdate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startdate", startdate)); // query parameter
            if (startlastmodified != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startlastmodified", startlastmodified)); // query parameter
            // authentication (defaultSecurityScheme) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBookedAppointmentsFromMultipleDepartments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AppointmentList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AppointmentList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AppointmentList)));
        }

        /// <summary>
        /// Get claims
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="appointmentid">One or more appointment IDs. (optional)</param>
        /// <param name="providerid">Will match either the provider or the supervising provider. (optional)</param>
        /// <param name="departmentid">The department ID of the service department for the claims being searched for. (optional)</param>
        /// <param name="createdenddate">The claim creation date, end of range, inclusive. (optional)</param>
        /// <param name="createdstartdate">The claim creation date, start of range, inclusive. (optional)</param>
        /// <param name="patientid">The patient ID associated with the claims to search for (optional)</param>
        /// <param name="procedurecodes">One or more procedure codes (optional)</param>
        /// <param name="serviceenddate">The service date, end of range, inclusive. (optional)</param>
        /// <param name="servicestartdate">The service date, start of range, inclusive. (optional)</param>
        /// <param name="showcustomfields">Include custom fields for the claims. (optional)</param>
        /// <returns>ClaimsList</returns>
        public ClaimsList GetClaims (int? practiceid, string apivariant, int? appointmentid = null, int? providerid = null, int? departmentid = null, string createdenddate = null, string createdstartdate = null, int? patientid = null, string procedurecodes = null, string serviceenddate = null, string servicestartdate = null, bool? showcustomfields = null)
        {
             ApiResponse<ClaimsList> localVarResponse = GetClaimsWithHttpInfo(practiceid, apivariant, appointmentid, providerid, departmentid, createdenddate, createdstartdate, patientid, procedurecodes, serviceenddate, servicestartdate, showcustomfields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get claims
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="appointmentid">One or more appointment IDs. (optional)</param>
        /// <param name="providerid">Will match either the provider or the supervising provider. (optional)</param>
        /// <param name="departmentid">The department ID of the service department for the claims being searched for. (optional)</param>
        /// <param name="createdenddate">The claim creation date, end of range, inclusive. (optional)</param>
        /// <param name="createdstartdate">The claim creation date, start of range, inclusive. (optional)</param>
        /// <param name="patientid">The patient ID associated with the claims to search for (optional)</param>
        /// <param name="procedurecodes">One or more procedure codes (optional)</param>
        /// <param name="serviceenddate">The service date, end of range, inclusive. (optional)</param>
        /// <param name="servicestartdate">The service date, start of range, inclusive. (optional)</param>
        /// <param name="showcustomfields">Include custom fields for the claims. (optional)</param>
        /// <returns>ApiResponse of ClaimsList</returns>
        public ApiResponse< ClaimsList > GetClaimsWithHttpInfo (int? practiceid, string apivariant, int? appointmentid = null, int? providerid = null, int? departmentid = null, string createdenddate = null, string createdstartdate = null, int? patientid = null, string procedurecodes = null, string serviceenddate = null, string servicestartdate = null, bool? showcustomfields = null)
        {
            // verify the required parameter 'practiceid' is set
            if (practiceid == null)
                throw new ApiException(400, "Missing required parameter 'practiceid' when calling DefaultApi->GetClaims");
            // verify the required parameter 'apivariant' is set
            if (apivariant == null)
                throw new ApiException(400, "Missing required parameter 'apivariant' when calling DefaultApi->GetClaims");

            var localVarPath = "/{apivariant}/{practiceid}/claims";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
			object localVarPostBody = null;

			// to determine the Content-Type header
			string[] localVarHttpContentTypes = new string[] {
            };
			string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
			string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (practiceid != null) localVarPathParams.Add("practiceid", this.Configuration.ApiClient.ParameterToString(practiceid)); // path parameter
            if (apivariant != null) localVarPathParams.Add("apivariant", this.Configuration.ApiClient.ParameterToString(apivariant)); // path parameter
            if (appointmentid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "appointmentid", appointmentid)); // query parameter
            if (providerid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "providerid", providerid)); // query parameter
            if (departmentid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "departmentid", departmentid)); // query parameter
            if (createdenddate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createdenddate", createdenddate)); // query parameter
            if (createdstartdate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createdstartdate", createdstartdate)); // query parameter
            if (patientid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "patientid", patientid)); // query parameter
            if (procedurecodes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "procedurecodes", procedurecodes)); // query parameter
            if (serviceenddate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "serviceenddate", serviceenddate)); // query parameter
            if (servicestartdate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "servicestartdate", servicestartdate)); // query parameter
            if (showcustomfields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showcustomfields", showcustomfields)); // query parameter
            // authentication (defaultSecurityScheme) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetClaims", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ClaimsList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ClaimsList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ClaimsList)));
        }

        /// <summary>
        /// Get claims
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="appointmentid">One or more appointment IDs. (optional)</param>
        /// <param name="providerid">Will match either the provider or the supervising provider. (optional)</param>
        /// <param name="departmentid">The department ID of the service department for the claims being searched for. (optional)</param>
        /// <param name="createdenddate">The claim creation date, end of range, inclusive. (optional)</param>
        /// <param name="createdstartdate">The claim creation date, start of range, inclusive. (optional)</param>
        /// <param name="patientid">The patient ID associated with the claims to search for (optional)</param>
        /// <param name="procedurecodes">One or more procedure codes (optional)</param>
        /// <param name="serviceenddate">The service date, end of range, inclusive. (optional)</param>
        /// <param name="servicestartdate">The service date, start of range, inclusive. (optional)</param>
        /// <param name="showcustomfields">Include custom fields for the claims. (optional)</param>
        /// <returns>Task of ClaimsList</returns>
        public async System.Threading.Tasks.Task<ClaimsList> GetClaimsAsync (int? practiceid, string apivariant, int? appointmentid = null, int? providerid = null, int? departmentid = null, string createdenddate = null, string createdstartdate = null, int? patientid = null, string procedurecodes = null, string serviceenddate = null, string servicestartdate = null, bool? showcustomfields = null)
        {
             ApiResponse<ClaimsList> localVarResponse = await GetClaimsAsyncWithHttpInfo(practiceid, apivariant, appointmentid, providerid, departmentid, createdenddate, createdstartdate, patientid, procedurecodes, serviceenddate, servicestartdate, showcustomfields);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get claims
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="appointmentid">One or more appointment IDs. (optional)</param>
        /// <param name="providerid">Will match either the provider or the supervising provider. (optional)</param>
        /// <param name="departmentid">The department ID of the service department for the claims being searched for. (optional)</param>
        /// <param name="createdenddate">The claim creation date, end of range, inclusive. (optional)</param>
        /// <param name="createdstartdate">The claim creation date, start of range, inclusive. (optional)</param>
        /// <param name="patientid">The patient ID associated with the claims to search for (optional)</param>
        /// <param name="procedurecodes">One or more procedure codes (optional)</param>
        /// <param name="serviceenddate">The service date, end of range, inclusive. (optional)</param>
        /// <param name="servicestartdate">The service date, start of range, inclusive. (optional)</param>
        /// <param name="showcustomfields">Include custom fields for the claims. (optional)</param>
        /// <returns>Task of ApiResponse (ClaimsList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ClaimsList>> GetClaimsAsyncWithHttpInfo (int? practiceid, string apivariant, int? appointmentid = null, int? providerid = null, int? departmentid = null, string createdenddate = null, string createdstartdate = null, int? patientid = null, string procedurecodes = null, string serviceenddate = null, string servicestartdate = null, bool? showcustomfields = null)
        {
            // verify the required parameter 'practiceid' is set
            if (practiceid == null)
                throw new ApiException(400, "Missing required parameter 'practiceid' when calling DefaultApi->GetClaims");
            // verify the required parameter 'apivariant' is set
            if (apivariant == null)
                throw new ApiException(400, "Missing required parameter 'apivariant' when calling DefaultApi->GetClaims");

            var localVarPath = "/{apivariant}/{practiceid}/claims";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
			object localVarPostBody = null;

			// to determine the Content-Type header
			string[] localVarHttpContentTypes = new string[] {
            };
			string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
			string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (practiceid != null) localVarPathParams.Add("practiceid", this.Configuration.ApiClient.ParameterToString(practiceid)); // path parameter
            if (apivariant != null) localVarPathParams.Add("apivariant", this.Configuration.ApiClient.ParameterToString(apivariant)); // path parameter
            if (appointmentid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "appointmentid", appointmentid)); // query parameter
            if (providerid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "providerid", providerid)); // query parameter
            if (departmentid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "departmentid", departmentid)); // query parameter
            if (createdenddate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createdenddate", createdenddate)); // query parameter
            if (createdstartdate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "createdstartdate", createdstartdate)); // query parameter
            if (patientid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "patientid", patientid)); // query parameter
            if (procedurecodes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "procedurecodes", procedurecodes)); // query parameter
            if (serviceenddate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "serviceenddate", serviceenddate)); // query parameter
            if (servicestartdate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "servicestartdate", servicestartdate)); // query parameter
            if (showcustomfields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showcustomfields", showcustomfields)); // query parameter
            // authentication (defaultSecurityScheme) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetClaims", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ClaimsList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ClaimsList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ClaimsList)));
        }

        /// <summary>
        /// Get department IDs
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="limit">Number of entries to return (default 1500, max 5000) (optional)</param>
        /// <param name="offset">Starting point of entries; 0-indexed (optional)</param>
        /// <param name="hospitalonly">If set to true, return hospital only departments. (optional)</param>
        /// <param name="showalldepartments">By default, departments hidden in the portal do not appear. When this is set to true, that restriction is not applied. Default is false. (optional)</param>
        /// <param name="providerlist">If set to true, list providers who see patients in this department. Default is false. (optional)</param>
        /// <returns>DepartmentList</returns>
        public DepartmentList GetDepartments (int? practiceid, string apivariant, int? limit = null, int? offset = null, bool? hospitalonly = null, bool? showalldepartments = null, bool? providerlist = null)
        {
             ApiResponse<DepartmentList> localVarResponse = GetDepartmentsWithHttpInfo(practiceid, apivariant, limit, offset, hospitalonly, showalldepartments, providerlist);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get department IDs
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="limit">Number of entries to return (default 1500, max 5000) (optional)</param>
        /// <param name="offset">Starting point of entries; 0-indexed (optional)</param>
        /// <param name="hospitalonly">If set to true, return hospital only departments. (optional)</param>
        /// <param name="showalldepartments">By default, departments hidden in the portal do not appear. When this is set to true, that restriction is not applied. Default is false. (optional)</param>
        /// <param name="providerlist">If set to true, list providers who see patients in this department. Default is false. (optional)</param>
        /// <returns>ApiResponse of DepartmentList</returns>
        public ApiResponse< DepartmentList > GetDepartmentsWithHttpInfo (int? practiceid, string apivariant, int? limit = null, int? offset = null, bool? hospitalonly = null, bool? showalldepartments = null, bool? providerlist = null)
        {
            // verify the required parameter 'practiceid' is set
            if (practiceid == null)
                throw new ApiException(400, "Missing required parameter 'practiceid' when calling DefaultApi->GetDepartments");
            // verify the required parameter 'apivariant' is set
            if (apivariant == null)
                throw new ApiException(400, "Missing required parameter 'apivariant' when calling DefaultApi->GetDepartments");

            var localVarPath = "/{apivariant}/{practiceid}/departments";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
			object localVarPostBody = null;

			// to determine the Content-Type header
			string[] localVarHttpContentTypes = new string[] {
            };
			string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
			string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (practiceid != null) localVarPathParams.Add("practiceid", this.Configuration.ApiClient.ParameterToString(practiceid)); // path parameter
            if (apivariant != null) localVarPathParams.Add("apivariant", this.Configuration.ApiClient.ParameterToString(apivariant)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (hospitalonly != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "hospitalonly", hospitalonly)); // query parameter
            if (showalldepartments != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showalldepartments", showalldepartments)); // query parameter
            if (providerlist != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "providerlist", providerlist)); // query parameter
            // authentication (defaultSecurityScheme) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDepartments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DepartmentList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DepartmentList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DepartmentList)));
        }

        /// <summary>
        /// Get department IDs
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="limit">Number of entries to return (default 1500, max 5000) (optional)</param>
        /// <param name="offset">Starting point of entries; 0-indexed (optional)</param>
        /// <param name="hospitalonly">If set to true, return hospital only departments. (optional)</param>
        /// <param name="showalldepartments">By default, departments hidden in the portal do not appear. When this is set to true, that restriction is not applied. Default is false. (optional)</param>
        /// <param name="providerlist">If set to true, list providers who see patients in this department. Default is false. (optional)</param>
        /// <returns>Task of DepartmentList</returns>
        public async System.Threading.Tasks.Task<DepartmentList> GetDepartmentsAsync (int? practiceid, string apivariant, int? limit = null, int? offset = null, bool? hospitalonly = null, bool? showalldepartments = null, bool? providerlist = null)
        {
             ApiResponse<DepartmentList> localVarResponse = await GetDepartmentsAsyncWithHttpInfo(practiceid, apivariant, limit, offset, hospitalonly, showalldepartments, providerlist);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get department IDs
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="limit">Number of entries to return (default 1500, max 5000) (optional)</param>
        /// <param name="offset">Starting point of entries; 0-indexed (optional)</param>
        /// <param name="hospitalonly">If set to true, return hospital only departments. (optional)</param>
        /// <param name="showalldepartments">By default, departments hidden in the portal do not appear. When this is set to true, that restriction is not applied. Default is false. (optional)</param>
        /// <param name="providerlist">If set to true, list providers who see patients in this department. Default is false. (optional)</param>
        /// <returns>Task of ApiResponse (DepartmentList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DepartmentList>> GetDepartmentsAsyncWithHttpInfo (int? practiceid, string apivariant, int? limit = null, int? offset = null, bool? hospitalonly = null, bool? showalldepartments = null, bool? providerlist = null)
        {
            // verify the required parameter 'practiceid' is set
            if (practiceid == null)
                throw new ApiException(400, "Missing required parameter 'practiceid' when calling DefaultApi->GetDepartments");
            // verify the required parameter 'apivariant' is set
            if (apivariant == null)
                throw new ApiException(400, "Missing required parameter 'apivariant' when calling DefaultApi->GetDepartments");

            var localVarPath = "/{apivariant}/{practiceid}/departments";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
			object localVarPostBody = null;

			// to determine the Content-Type header
			string[] localVarHttpContentTypes = new string[] {
            };
			string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
			string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (practiceid != null) localVarPathParams.Add("practiceid", this.Configuration.ApiClient.ParameterToString(practiceid)); // path parameter
            if (apivariant != null) localVarPathParams.Add("apivariant", this.Configuration.ApiClient.ParameterToString(apivariant)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (hospitalonly != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "hospitalonly", hospitalonly)); // query parameter
            if (showalldepartments != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showalldepartments", showalldepartments)); // query parameter
            if (providerlist != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "providerlist", providerlist)); // query parameter
            // authentication (defaultSecurityScheme) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDepartments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DepartmentList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DepartmentList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DepartmentList)));
        }

        /// <summary>
        /// Get encounter by id.
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="encounterid">The encounter ID.</param>
        /// <returns>List{Encounter}</returns>
        public List<Encounter> GetEncounter (int? practiceid, string apivariant, int? encounterid)
        {
             ApiResponse<List<Encounter>> localVarResponse = GetEncounterWithHttpInfo(practiceid, apivariant, encounterid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get encounter by id.
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="encounterid">The encounter ID.</param>
        /// <returns>ApiResponse of List{Encounter}</returns>
        public ApiResponse< List<Encounter> > GetEncounterWithHttpInfo (int? practiceid, string apivariant, int? encounterid)
        {
            // verify the required parameter 'practiceid' is set
            if (practiceid == null)
                throw new ApiException(400, "Missing required parameter 'practiceid' when calling DefaultApi->GetEncounter");
            // verify the required parameter 'apivariant' is set
            if (apivariant == null)
                throw new ApiException(400, "Missing required parameter 'apivariant' when calling DefaultApi->GetEncounter");
            // verify the required parameter 'encounterid' is set
            if (encounterid == null)
                throw new ApiException(400, "Missing required parameter 'encounterid' when calling DefaultApi->GetEncounter");

            var localVarPath = "/{apivariant}/{practiceid}/chart/encounter/{encounterid}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
			object localVarPostBody = null;

			// to determine the Content-Type header
			string[] localVarHttpContentTypes = new string[] {
            };
			string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
			string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (practiceid != null) localVarPathParams.Add("practiceid", this.Configuration.ApiClient.ParameterToString(practiceid)); // path parameter
            if (apivariant != null) localVarPathParams.Add("apivariant", this.Configuration.ApiClient.ParameterToString(apivariant)); // path parameter
            if (encounterid != null) localVarPathParams.Add("encounterid", this.Configuration.ApiClient.ParameterToString(encounterid)); // path parameter
            // authentication (defaultSecurityScheme) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEncounter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Encounter>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Encounter>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Encounter>)));
        }

        /// <summary>
        /// Get encounter by id.
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="encounterid">The encounter ID.</param>
        /// <returns>Task of List{Encounter}</returns>
        public async System.Threading.Tasks.Task<List<Encounter>> GetEncounterAsync (int? practiceid, string apivariant, int? encounterid)
        {
             ApiResponse<List<Encounter>> localVarResponse = await GetEncounterAsyncWithHttpInfo(practiceid, apivariant, encounterid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get encounter by id.
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="encounterid">The encounter ID.</param>
        /// <returns>Task of ApiResponse (List{Encounter})</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Encounter>>> GetEncounterAsyncWithHttpInfo (int? practiceid, string apivariant, int? encounterid)
        {
            // verify the required parameter 'practiceid' is set
            if (practiceid == null)
                throw new ApiException(400, "Missing required parameter 'practiceid' when calling DefaultApi->GetEncounter");
            // verify the required parameter 'apivariant' is set
            if (apivariant == null)
                throw new ApiException(400, "Missing required parameter 'apivariant' when calling DefaultApi->GetEncounter");
            // verify the required parameter 'encounterid' is set
            if (encounterid == null)
                throw new ApiException(400, "Missing required parameter 'encounterid' when calling DefaultApi->GetEncounter");

            var localVarPath = "/{apivariant}/{practiceid}/chart/encounter/{encounterid}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
			object localVarPostBody = null;

			// to determine the Content-Type header
			string[] localVarHttpContentTypes = new string[] {
            };
			string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
			string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (practiceid != null) localVarPathParams.Add("practiceid", this.Configuration.ApiClient.ParameterToString(practiceid)); // path parameter
            if (apivariant != null) localVarPathParams.Add("apivariant", this.Configuration.ApiClient.ParameterToString(apivariant)); // path parameter
            if (encounterid != null) localVarPathParams.Add("encounterid", this.Configuration.ApiClient.ParameterToString(encounterid)); // path parameter
            // authentication (defaultSecurityScheme) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEncounter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Encounter>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Encounter>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Encounter>)));
        }

        /// <summary>
        /// Given an encounter returns the assessment text.
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="encounterid">The encounter ID.</param>
        /// <returns>List{EncounterAssesmentText}</returns>
        public List<EncounterAssesmentText> GetEncounterAssesmentText (int? practiceid, string apivariant, int? encounterid)
        {
             ApiResponse<List<EncounterAssesmentText>> localVarResponse = GetEncounterAssesmentTextWithHttpInfo(practiceid, apivariant, encounterid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Given an encounter returns the assessment text.
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="encounterid">The encounter ID.</param>
        /// <returns>ApiResponse of List{EncounterAssesmentText}</returns>
        public ApiResponse< List<EncounterAssesmentText> > GetEncounterAssesmentTextWithHttpInfo (int? practiceid, string apivariant, int? encounterid)
        {
            // verify the required parameter 'practiceid' is set
            if (practiceid == null)
                throw new ApiException(400, "Missing required parameter 'practiceid' when calling DefaultApi->GetEncounterAssesmentText");
            // verify the required parameter 'apivariant' is set
            if (apivariant == null)
                throw new ApiException(400, "Missing required parameter 'apivariant' when calling DefaultApi->GetEncounterAssesmentText");
            // verify the required parameter 'encounterid' is set
            if (encounterid == null)
                throw new ApiException(400, "Missing required parameter 'encounterid' when calling DefaultApi->GetEncounterAssesmentText");

            var localVarPath = "/{apivariant}/{practiceid}/chart/encounter/{encounterid}/assessment";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
			object localVarPostBody = null;

			// to determine the Content-Type header
			string[] localVarHttpContentTypes = new string[] {
            };
			string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
			string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (practiceid != null) localVarPathParams.Add("practiceid", this.Configuration.ApiClient.ParameterToString(practiceid)); // path parameter
            if (apivariant != null) localVarPathParams.Add("apivariant", this.Configuration.ApiClient.ParameterToString(apivariant)); // path parameter
            if (encounterid != null) localVarPathParams.Add("encounterid", this.Configuration.ApiClient.ParameterToString(encounterid)); // path parameter
            // authentication (defaultSecurityScheme) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEncounterAssesmentText", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<EncounterAssesmentText>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<EncounterAssesmentText>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<EncounterAssesmentText>)));
        }

        /// <summary>
        /// Given an encounter returns the assessment text.
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="encounterid">The encounter ID.</param>
        /// <returns>Task of List{EncounterAssesmentText}</returns>
        public async System.Threading.Tasks.Task<List<EncounterAssesmentText>> GetEncounterAssesmentTextAsync (int? practiceid, string apivariant, int? encounterid)
        {
             ApiResponse<List<EncounterAssesmentText>> localVarResponse = await GetEncounterAssesmentTextAsyncWithHttpInfo(practiceid, apivariant, encounterid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Given an encounter returns the assessment text.
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="encounterid">The encounter ID.</param>
        /// <returns>Task of ApiResponse (List{EncounterAssesmentText})</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<EncounterAssesmentText>>> GetEncounterAssesmentTextAsyncWithHttpInfo (int? practiceid, string apivariant, int? encounterid)
        {
            // verify the required parameter 'practiceid' is set
            if (practiceid == null)
                throw new ApiException(400, "Missing required parameter 'practiceid' when calling DefaultApi->GetEncounterAssesmentText");
            // verify the required parameter 'apivariant' is set
            if (apivariant == null)
                throw new ApiException(400, "Missing required parameter 'apivariant' when calling DefaultApi->GetEncounterAssesmentText");
            // verify the required parameter 'encounterid' is set
            if (encounterid == null)
                throw new ApiException(400, "Missing required parameter 'encounterid' when calling DefaultApi->GetEncounterAssesmentText");

            var localVarPath = "/{apivariant}/{practiceid}/chart/encounter/{encounterid}/assessment";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
			object localVarPostBody = null;

			// to determine the Content-Type header
			string[] localVarHttpContentTypes = new string[] {
            };
			string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
			string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (practiceid != null) localVarPathParams.Add("practiceid", this.Configuration.ApiClient.ParameterToString(practiceid)); // path parameter
            if (apivariant != null) localVarPathParams.Add("apivariant", this.Configuration.ApiClient.ParameterToString(apivariant)); // path parameter
            if (encounterid != null) localVarPathParams.Add("encounterid", this.Configuration.ApiClient.ParameterToString(encounterid)); // path parameter
            // authentication (defaultSecurityScheme) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEncounterAssesmentText", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<EncounterAssesmentText>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<EncounterAssesmentText>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<EncounterAssesmentText>)));
        }

        /// <summary>
        /// Get open appointment slots
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="appointmenttypeid">Normally, an appointment reason ID should be used which will map to the correct underlying appointment type in athenaNet. This field will ignore the practice&#x27;s existing setup for what should be scheduled. Please consult with athenahealth before using. Either an appointmenttypeid or a reasonid must be specified or no results will be returned.  (optional)</param>
        /// <param name="bypassscheduletimechecks">Bypass checks that usually require returned appointments to be some amount of hours in the future (as configured by the practice, defaulting to 24 hours), and also ignores the setting that only  shows appointments for a certain number of days in the future (also configurable by the practice, defaulting to 90 days).  (optional)</param>
        /// <param name="departmentid">The athenaNet department ID. (optional)</param>
        /// <param name="enddate">End of the appointment search date range (mm/dd/yyyy). Inclusive. Defaults to seven days from startdate. (optional)</param>
        /// <param name="ignoreschedulablepermission">By default, we show only appointments that are are available to scheduled via the API. This flag allows you to bypass that restriction for viewing available appointments (but you still may not be able to schedule based on this permission!). This flag does not, however, show the full schedule (that is, appointments that are already booked).   (optional)</param>
        /// <param name="providerid">The athenaNet provider ID. Required if a reasonid other than -1 is specified. (optional)</param>
        /// <param name="reasonid">The athenaNet patient appointment reason ID, from GET /patientappointmentreasons. While this is not technically required due to some unusual use cases, it is highly recommended for most calls. We do allow a special value of -1 for the reasonid. This reasonid will return open, web-schedulable slots regardless of reason. However, slots returned using a search of -1 may return slots that are not bookable by any reason ID (they may be bookable by specific appointment type IDs instead). This argument allows multiple valid reason IDs to be specified (e.g. reasonid&#x3D;1,2,3), so if you are looking for slots that match \&quot;any\&quot; reason, it is recommended that you enumerate the set of reasons you are looking for. Either a reasonid or an appointmenttypeid must be specified or no results will be returned. If a reasonid other than -1 is specified then a providerid must also be specified.  (optional)</param>
        /// <param name="showfrozenslots">By default, we hide appointments that are frozen from being returned via the API.  This flag allows you to show frozen slots in the set of results returned.  (optional)</param>
        /// <param name="startdate">Start of the appointment search date range (mm/dd/yyyy). Inclusive. Defaults to today. (optional)</param>
        /// <returns>AppointmentList</returns>
        public AppointmentList GetOpenAppointments (int? practiceid, string apivariant, int? appointmenttypeid = null, bool? bypassscheduletimechecks = null, int? departmentid = null, string enddate = null, bool? ignoreschedulablepermission = null, string providerid = null, string reasonid = null, bool? showfrozenslots = null, string startdate = null)
        {
             ApiResponse<AppointmentList> localVarResponse = GetOpenAppointmentsWithHttpInfo(practiceid, apivariant, appointmenttypeid, bypassscheduletimechecks, departmentid, enddate, ignoreschedulablepermission, providerid, reasonid, showfrozenslots, startdate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get open appointment slots
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="appointmenttypeid">Normally, an appointment reason ID should be used which will map to the correct underlying appointment type in athenaNet. This field will ignore the practice&#x27;s existing setup for what should be scheduled. Please consult with athenahealth before using. Either an appointmenttypeid or a reasonid must be specified or no results will be returned.  (optional)</param>
        /// <param name="bypassscheduletimechecks">Bypass checks that usually require returned appointments to be some amount of hours in the future (as configured by the practice, defaulting to 24 hours), and also ignores the setting that only  shows appointments for a certain number of days in the future (also configurable by the practice, defaulting to 90 days).  (optional)</param>
        /// <param name="departmentid">The athenaNet department ID. (optional)</param>
        /// <param name="enddate">End of the appointment search date range (mm/dd/yyyy). Inclusive. Defaults to seven days from startdate. (optional)</param>
        /// <param name="ignoreschedulablepermission">By default, we show only appointments that are are available to scheduled via the API. This flag allows you to bypass that restriction for viewing available appointments (but you still may not be able to schedule based on this permission!). This flag does not, however, show the full schedule (that is, appointments that are already booked).   (optional)</param>
        /// <param name="providerid">The athenaNet provider ID. Required if a reasonid other than -1 is specified. (optional)</param>
        /// <param name="reasonid">The athenaNet patient appointment reason ID, from GET /patientappointmentreasons. While this is not technically required due to some unusual use cases, it is highly recommended for most calls. We do allow a special value of -1 for the reasonid. This reasonid will return open, web-schedulable slots regardless of reason. However, slots returned using a search of -1 may return slots that are not bookable by any reason ID (they may be bookable by specific appointment type IDs instead). This argument allows multiple valid reason IDs to be specified (e.g. reasonid&#x3D;1,2,3), so if you are looking for slots that match \&quot;any\&quot; reason, it is recommended that you enumerate the set of reasons you are looking for. Either a reasonid or an appointmenttypeid must be specified or no results will be returned. If a reasonid other than -1 is specified then a providerid must also be specified.  (optional)</param>
        /// <param name="showfrozenslots">By default, we hide appointments that are frozen from being returned via the API.  This flag allows you to show frozen slots in the set of results returned.  (optional)</param>
        /// <param name="startdate">Start of the appointment search date range (mm/dd/yyyy). Inclusive. Defaults to today. (optional)</param>
        /// <returns>ApiResponse of AppointmentList</returns>
        public ApiResponse< AppointmentList > GetOpenAppointmentsWithHttpInfo (int? practiceid, string apivariant, int? appointmenttypeid = null, bool? bypassscheduletimechecks = null, int? departmentid = null, string enddate = null, bool? ignoreschedulablepermission = null, string providerid = null, string reasonid = null, bool? showfrozenslots = null, string startdate = null)
        {
            // verify the required parameter 'practiceid' is set
            if (practiceid == null)
                throw new ApiException(400, "Missing required parameter 'practiceid' when calling DefaultApi->GetOpenAppointments");
            // verify the required parameter 'apivariant' is set
            if (apivariant == null)
                throw new ApiException(400, "Missing required parameter 'apivariant' when calling DefaultApi->GetOpenAppointments");

            var localVarPath = "/{apivariant}/{practiceid}/appointments/open";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
			object localVarPostBody = null;

			// to determine the Content-Type header
			string[] localVarHttpContentTypes = new string[] {
            };
			string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
			string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (practiceid != null) localVarPathParams.Add("practiceid", this.Configuration.ApiClient.ParameterToString(practiceid)); // path parameter
            if (apivariant != null) localVarPathParams.Add("apivariant", this.Configuration.ApiClient.ParameterToString(apivariant)); // path parameter
            if (appointmenttypeid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "appointmenttypeid", appointmenttypeid)); // query parameter
            if (bypassscheduletimechecks != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "bypassscheduletimechecks", bypassscheduletimechecks)); // query parameter
            if (departmentid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "departmentid", departmentid)); // query parameter
            if (enddate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enddate", enddate)); // query parameter
            if (ignoreschedulablepermission != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ignoreschedulablepermission", ignoreschedulablepermission)); // query parameter
            if (providerid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "providerid", providerid)); // query parameter
            if (reasonid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "reasonid", reasonid)); // query parameter
            if (showfrozenslots != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showfrozenslots", showfrozenslots)); // query parameter
            if (startdate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startdate", startdate)); // query parameter
            // authentication (defaultSecurityScheme) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOpenAppointments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AppointmentList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AppointmentList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AppointmentList)));
        }

        /// <summary>
        /// Get open appointment slots
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="appointmenttypeid">Normally, an appointment reason ID should be used which will map to the correct underlying appointment type in athenaNet. This field will ignore the practice&#x27;s existing setup for what should be scheduled. Please consult with athenahealth before using. Either an appointmenttypeid or a reasonid must be specified or no results will be returned.  (optional)</param>
        /// <param name="bypassscheduletimechecks">Bypass checks that usually require returned appointments to be some amount of hours in the future (as configured by the practice, defaulting to 24 hours), and also ignores the setting that only  shows appointments for a certain number of days in the future (also configurable by the practice, defaulting to 90 days).  (optional)</param>
        /// <param name="departmentid">The athenaNet department ID. (optional)</param>
        /// <param name="enddate">End of the appointment search date range (mm/dd/yyyy). Inclusive. Defaults to seven days from startdate. (optional)</param>
        /// <param name="ignoreschedulablepermission">By default, we show only appointments that are are available to scheduled via the API. This flag allows you to bypass that restriction for viewing available appointments (but you still may not be able to schedule based on this permission!). This flag does not, however, show the full schedule (that is, appointments that are already booked).   (optional)</param>
        /// <param name="providerid">The athenaNet provider ID. Required if a reasonid other than -1 is specified. (optional)</param>
        /// <param name="reasonid">The athenaNet patient appointment reason ID, from GET /patientappointmentreasons. While this is not technically required due to some unusual use cases, it is highly recommended for most calls. We do allow a special value of -1 for the reasonid. This reasonid will return open, web-schedulable slots regardless of reason. However, slots returned using a search of -1 may return slots that are not bookable by any reason ID (they may be bookable by specific appointment type IDs instead). This argument allows multiple valid reason IDs to be specified (e.g. reasonid&#x3D;1,2,3), so if you are looking for slots that match \&quot;any\&quot; reason, it is recommended that you enumerate the set of reasons you are looking for. Either a reasonid or an appointmenttypeid must be specified or no results will be returned. If a reasonid other than -1 is specified then a providerid must also be specified.  (optional)</param>
        /// <param name="showfrozenslots">By default, we hide appointments that are frozen from being returned via the API.  This flag allows you to show frozen slots in the set of results returned.  (optional)</param>
        /// <param name="startdate">Start of the appointment search date range (mm/dd/yyyy). Inclusive. Defaults to today. (optional)</param>
        /// <returns>Task of AppointmentList</returns>
        public async System.Threading.Tasks.Task<AppointmentList> GetOpenAppointmentsAsync (int? practiceid, string apivariant, int? appointmenttypeid = null, bool? bypassscheduletimechecks = null, int? departmentid = null, string enddate = null, bool? ignoreschedulablepermission = null, string providerid = null, string reasonid = null, bool? showfrozenslots = null, string startdate = null)
        {
             ApiResponse<AppointmentList> localVarResponse = await GetOpenAppointmentsAsyncWithHttpInfo(practiceid, apivariant, appointmenttypeid, bypassscheduletimechecks, departmentid, enddate, ignoreschedulablepermission, providerid, reasonid, showfrozenslots, startdate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get open appointment slots
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="appointmenttypeid">Normally, an appointment reason ID should be used which will map to the correct underlying appointment type in athenaNet. This field will ignore the practice&#x27;s existing setup for what should be scheduled. Please consult with athenahealth before using. Either an appointmenttypeid or a reasonid must be specified or no results will be returned.  (optional)</param>
        /// <param name="bypassscheduletimechecks">Bypass checks that usually require returned appointments to be some amount of hours in the future (as configured by the practice, defaulting to 24 hours), and also ignores the setting that only  shows appointments for a certain number of days in the future (also configurable by the practice, defaulting to 90 days).  (optional)</param>
        /// <param name="departmentid">The athenaNet department ID. (optional)</param>
        /// <param name="enddate">End of the appointment search date range (mm/dd/yyyy). Inclusive. Defaults to seven days from startdate. (optional)</param>
        /// <param name="ignoreschedulablepermission">By default, we show only appointments that are are available to scheduled via the API. This flag allows you to bypass that restriction for viewing available appointments (but you still may not be able to schedule based on this permission!). This flag does not, however, show the full schedule (that is, appointments that are already booked).   (optional)</param>
        /// <param name="providerid">The athenaNet provider ID. Required if a reasonid other than -1 is specified. (optional)</param>
        /// <param name="reasonid">The athenaNet patient appointment reason ID, from GET /patientappointmentreasons. While this is not technically required due to some unusual use cases, it is highly recommended for most calls. We do allow a special value of -1 for the reasonid. This reasonid will return open, web-schedulable slots regardless of reason. However, slots returned using a search of -1 may return slots that are not bookable by any reason ID (they may be bookable by specific appointment type IDs instead). This argument allows multiple valid reason IDs to be specified (e.g. reasonid&#x3D;1,2,3), so if you are looking for slots that match \&quot;any\&quot; reason, it is recommended that you enumerate the set of reasons you are looking for. Either a reasonid or an appointmenttypeid must be specified or no results will be returned. If a reasonid other than -1 is specified then a providerid must also be specified.  (optional)</param>
        /// <param name="showfrozenslots">By default, we hide appointments that are frozen from being returned via the API.  This flag allows you to show frozen slots in the set of results returned.  (optional)</param>
        /// <param name="startdate">Start of the appointment search date range (mm/dd/yyyy). Inclusive. Defaults to today. (optional)</param>
        /// <returns>Task of ApiResponse (AppointmentList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AppointmentList>> GetOpenAppointmentsAsyncWithHttpInfo (int? practiceid, string apivariant, int? appointmenttypeid = null, bool? bypassscheduletimechecks = null, int? departmentid = null, string enddate = null, bool? ignoreschedulablepermission = null, string providerid = null, string reasonid = null, bool? showfrozenslots = null, string startdate = null)
        {
            // verify the required parameter 'practiceid' is set
            if (practiceid == null)
                throw new ApiException(400, "Missing required parameter 'practiceid' when calling DefaultApi->GetOpenAppointments");
            // verify the required parameter 'apivariant' is set
            if (apivariant == null)
                throw new ApiException(400, "Missing required parameter 'apivariant' when calling DefaultApi->GetOpenAppointments");

            var localVarPath = "/{apivariant}/{practiceid}/appointments/open";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
			object localVarPostBody = null;

			// to determine the Content-Type header
			string[] localVarHttpContentTypes = new string[] {
            };
			string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
			string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (practiceid != null) localVarPathParams.Add("practiceid", this.Configuration.ApiClient.ParameterToString(practiceid)); // path parameter
            if (apivariant != null) localVarPathParams.Add("apivariant", this.Configuration.ApiClient.ParameterToString(apivariant)); // path parameter
            if (appointmenttypeid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "appointmenttypeid", appointmenttypeid)); // query parameter
            if (bypassscheduletimechecks != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "bypassscheduletimechecks", bypassscheduletimechecks)); // query parameter
            if (departmentid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "departmentid", departmentid)); // query parameter
            if (enddate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enddate", enddate)); // query parameter
            if (ignoreschedulablepermission != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ignoreschedulablepermission", ignoreschedulablepermission)); // query parameter
            if (providerid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "providerid", providerid)); // query parameter
            if (reasonid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "reasonid", reasonid)); // query parameter
            if (showfrozenslots != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showfrozenslots", showfrozenslots)); // query parameter
            if (startdate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startdate", startdate)); // query parameter
            // authentication (defaultSecurityScheme) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOpenAppointments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AppointmentList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AppointmentList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AppointmentList)));
        }

        /// <summary>
        /// Get patient medical history
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="patientId">Id of the patient for which get medications</param>
        /// <param name="departmentid">The athenanet department ID</param>
        /// <param name="allresultsbyencounterid">ID used to return lab results for a specific encounter. (optional)</param>
        /// <param name="analyteresultstatus">Filter the results based on the analyte&#x27;s result status. Since the result status is a free text field, this list is not exhaustive, but does represent a majority of the used statuses.  (optional)</param>
        /// <param name="enddate">Filter lab orders not individual results that are on or before this date. Example: enddate&#x3D;1/21/2018. If no enddate is specified, all lab orders found since startdate will be included if specified.  (optional)</param>
        /// <param name="labresultstatus">Filter the results based on the lab result&#x27;s result status. Since the result status is a free text field, this list is not exhaustive, but does represent a majority of the used statuses.  (optional)</param>
        /// <param name="showabnormaldetails">Include the translation of the abnormalflag into HL7 code standards. (optional)</param>
        /// <param name="showhidden">Includes the lab results and analytes marked as hidden. Hidden lab results and analytes are created when they are manually entered, for example on the qm tab or in flowsheets.  (optional)</param>
        /// <param name="showtemplate">If true, interpretation template added to the document is also returned. (optional)</param>
        /// <param name="startdate">Filter lab orders not individual results that are on or after this date. Example: startdate&#x3D;6/21/2015. If no startdate is specified, all prior lab orders will be included until enddate if specified.  (optional)</param>
        /// <returns>List{AnalytesList}</returns>
        public List<AnalytesList> GetPatientAnalytes (int? practiceid, string apivariant, int? patientId, int? departmentid, int? allresultsbyencounterid = null, string analyteresultstatus = null, string enddate = null, string labresultstatus = null, bool? showabnormaldetails = null, bool? showhidden = null, bool? showtemplate = null, string startdate = null)
        {
             ApiResponse<List<AnalytesList>> localVarResponse = GetPatientAnalytesWithHttpInfo(practiceid, apivariant, patientId, departmentid, allresultsbyencounterid, analyteresultstatus, enddate, labresultstatus, showabnormaldetails, showhidden, showtemplate, startdate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get patient medical history
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="patientId">Id of the patient for which get medications</param>
        /// <param name="departmentid">The athenanet department ID</param>
        /// <param name="allresultsbyencounterid">ID used to return lab results for a specific encounter. (optional)</param>
        /// <param name="analyteresultstatus">Filter the results based on the analyte&#x27;s result status. Since the result status is a free text field, this list is not exhaustive, but does represent a majority of the used statuses.  (optional)</param>
        /// <param name="enddate">Filter lab orders not individual results that are on or before this date. Example: enddate&#x3D;1/21/2018. If no enddate is specified, all lab orders found since startdate will be included if specified.  (optional)</param>
        /// <param name="labresultstatus">Filter the results based on the lab result&#x27;s result status. Since the result status is a free text field, this list is not exhaustive, but does represent a majority of the used statuses.  (optional)</param>
        /// <param name="showabnormaldetails">Include the translation of the abnormalflag into HL7 code standards. (optional)</param>
        /// <param name="showhidden">Includes the lab results and analytes marked as hidden. Hidden lab results and analytes are created when they are manually entered, for example on the qm tab or in flowsheets.  (optional)</param>
        /// <param name="showtemplate">If true, interpretation template added to the document is also returned. (optional)</param>
        /// <param name="startdate">Filter lab orders not individual results that are on or after this date. Example: startdate&#x3D;6/21/2015. If no startdate is specified, all prior lab orders will be included until enddate if specified.  (optional)</param>
        /// <returns>ApiResponse of List{AnalytesList}</returns>
        public ApiResponse< List<AnalytesList> > GetPatientAnalytesWithHttpInfo (int? practiceid, string apivariant, int? patientId, int? departmentid, int? allresultsbyencounterid = null, string analyteresultstatus = null, string enddate = null, string labresultstatus = null, bool? showabnormaldetails = null, bool? showhidden = null, bool? showtemplate = null, string startdate = null)
        {
            // verify the required parameter 'practiceid' is set
            if (practiceid == null)
                throw new ApiException(400, "Missing required parameter 'practiceid' when calling DefaultApi->GetPatientAnalytes");
            // verify the required parameter 'apivariant' is set
            if (apivariant == null)
                throw new ApiException(400, "Missing required parameter 'apivariant' when calling DefaultApi->GetPatientAnalytes");
            // verify the required parameter 'patientId' is set
            if (patientId == null)
                throw new ApiException(400, "Missing required parameter 'patientId' when calling DefaultApi->GetPatientAnalytes");
            // verify the required parameter 'departmentid' is set
            if (departmentid == null)
                throw new ApiException(400, "Missing required parameter 'departmentid' when calling DefaultApi->GetPatientAnalytes");

            var localVarPath = "/{apivariant}/{practiceid}/chart/{patientId}/analytes";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
			object localVarPostBody = null;

			// to determine the Content-Type header
			string[] localVarHttpContentTypes = new string[] {
            };
			string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
			string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (practiceid != null) localVarPathParams.Add("practiceid", this.Configuration.ApiClient.ParameterToString(practiceid)); // path parameter
            if (apivariant != null) localVarPathParams.Add("apivariant", this.Configuration.ApiClient.ParameterToString(apivariant)); // path parameter
            if (patientId != null) localVarPathParams.Add("patientId", this.Configuration.ApiClient.ParameterToString(patientId)); // path parameter
            if (departmentid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "departmentid", departmentid)); // query parameter
            if (allresultsbyencounterid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "allresultsbyencounterid", allresultsbyencounterid)); // query parameter
            if (analyteresultstatus != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "analyteresultstatus", analyteresultstatus)); // query parameter
            if (enddate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enddate", enddate)); // query parameter
            if (labresultstatus != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "labresultstatus", labresultstatus)); // query parameter
            if (showabnormaldetails != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showabnormaldetails", showabnormaldetails)); // query parameter
            if (showhidden != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showhidden", showhidden)); // query parameter
            if (showtemplate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showtemplate", showtemplate)); // query parameter
            if (startdate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startdate", startdate)); // query parameter
            // authentication (defaultSecurityScheme) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPatientAnalytes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AnalytesList>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<AnalytesList>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AnalytesList>)));
        }

        /// <summary>
        /// Get patient medical history
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="patientId">Id of the patient for which get medications</param>
        /// <param name="departmentid">The athenanet department ID</param>
        /// <param name="allresultsbyencounterid">ID used to return lab results for a specific encounter. (optional)</param>
        /// <param name="analyteresultstatus">Filter the results based on the analyte&#x27;s result status. Since the result status is a free text field, this list is not exhaustive, but does represent a majority of the used statuses.  (optional)</param>
        /// <param name="enddate">Filter lab orders not individual results that are on or before this date. Example: enddate&#x3D;1/21/2018. If no enddate is specified, all lab orders found since startdate will be included if specified.  (optional)</param>
        /// <param name="labresultstatus">Filter the results based on the lab result&#x27;s result status. Since the result status is a free text field, this list is not exhaustive, but does represent a majority of the used statuses.  (optional)</param>
        /// <param name="showabnormaldetails">Include the translation of the abnormalflag into HL7 code standards. (optional)</param>
        /// <param name="showhidden">Includes the lab results and analytes marked as hidden. Hidden lab results and analytes are created when they are manually entered, for example on the qm tab or in flowsheets.  (optional)</param>
        /// <param name="showtemplate">If true, interpretation template added to the document is also returned. (optional)</param>
        /// <param name="startdate">Filter lab orders not individual results that are on or after this date. Example: startdate&#x3D;6/21/2015. If no startdate is specified, all prior lab orders will be included until enddate if specified.  (optional)</param>
        /// <returns>Task of List{AnalytesList}</returns>
        public async System.Threading.Tasks.Task<List<AnalytesList>> GetPatientAnalytesAsync (int? practiceid, string apivariant, int? patientId, int? departmentid, int? allresultsbyencounterid = null, string analyteresultstatus = null, string enddate = null, string labresultstatus = null, bool? showabnormaldetails = null, bool? showhidden = null, bool? showtemplate = null, string startdate = null)
        {
             ApiResponse<List<AnalytesList>> localVarResponse = await GetPatientAnalytesAsyncWithHttpInfo(practiceid, apivariant, patientId, departmentid, allresultsbyencounterid, analyteresultstatus, enddate, labresultstatus, showabnormaldetails, showhidden, showtemplate, startdate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get patient medical history
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="patientId">Id of the patient for which get medications</param>
        /// <param name="departmentid">The athenanet department ID</param>
        /// <param name="allresultsbyencounterid">ID used to return lab results for a specific encounter. (optional)</param>
        /// <param name="analyteresultstatus">Filter the results based on the analyte&#x27;s result status. Since the result status is a free text field, this list is not exhaustive, but does represent a majority of the used statuses.  (optional)</param>
        /// <param name="enddate">Filter lab orders not individual results that are on or before this date. Example: enddate&#x3D;1/21/2018. If no enddate is specified, all lab orders found since startdate will be included if specified.  (optional)</param>
        /// <param name="labresultstatus">Filter the results based on the lab result&#x27;s result status. Since the result status is a free text field, this list is not exhaustive, but does represent a majority of the used statuses.  (optional)</param>
        /// <param name="showabnormaldetails">Include the translation of the abnormalflag into HL7 code standards. (optional)</param>
        /// <param name="showhidden">Includes the lab results and analytes marked as hidden. Hidden lab results and analytes are created when they are manually entered, for example on the qm tab or in flowsheets.  (optional)</param>
        /// <param name="showtemplate">If true, interpretation template added to the document is also returned. (optional)</param>
        /// <param name="startdate">Filter lab orders not individual results that are on or after this date. Example: startdate&#x3D;6/21/2015. If no startdate is specified, all prior lab orders will be included until enddate if specified.  (optional)</param>
        /// <returns>Task of ApiResponse (List{AnalytesList})</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<AnalytesList>>> GetPatientAnalytesAsyncWithHttpInfo (int? practiceid, string apivariant, int? patientId, int? departmentid, int? allresultsbyencounterid = null, string analyteresultstatus = null, string enddate = null, string labresultstatus = null, bool? showabnormaldetails = null, bool? showhidden = null, bool? showtemplate = null, string startdate = null)
        {
            // verify the required parameter 'practiceid' is set
            if (practiceid == null)
                throw new ApiException(400, "Missing required parameter 'practiceid' when calling DefaultApi->GetPatientAnalytes");
            // verify the required parameter 'apivariant' is set
            if (apivariant == null)
                throw new ApiException(400, "Missing required parameter 'apivariant' when calling DefaultApi->GetPatientAnalytes");
            // verify the required parameter 'patientId' is set
            if (patientId == null)
                throw new ApiException(400, "Missing required parameter 'patientId' when calling DefaultApi->GetPatientAnalytes");
            // verify the required parameter 'departmentid' is set
            if (departmentid == null)
                throw new ApiException(400, "Missing required parameter 'departmentid' when calling DefaultApi->GetPatientAnalytes");

            var localVarPath = "/{apivariant}/{practiceid}/chart/{patientId}/analytes";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
			object localVarPostBody = null;

			// to determine the Content-Type header
			string[] localVarHttpContentTypes = new string[] {
            };
			string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
			string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (practiceid != null) localVarPathParams.Add("practiceid", this.Configuration.ApiClient.ParameterToString(practiceid)); // path parameter
            if (apivariant != null) localVarPathParams.Add("apivariant", this.Configuration.ApiClient.ParameterToString(apivariant)); // path parameter
            if (patientId != null) localVarPathParams.Add("patientId", this.Configuration.ApiClient.ParameterToString(patientId)); // path parameter
            if (departmentid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "departmentid", departmentid)); // query parameter
            if (allresultsbyencounterid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "allresultsbyencounterid", allresultsbyencounterid)); // query parameter
            if (analyteresultstatus != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "analyteresultstatus", analyteresultstatus)); // query parameter
            if (enddate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enddate", enddate)); // query parameter
            if (labresultstatus != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "labresultstatus", labresultstatus)); // query parameter
            if (showabnormaldetails != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showabnormaldetails", showabnormaldetails)); // query parameter
            if (showhidden != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showhidden", showhidden)); // query parameter
            if (showtemplate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showtemplate", showtemplate)); // query parameter
            if (startdate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startdate", startdate)); // query parameter
            // authentication (defaultSecurityScheme) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPatientAnalytes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AnalytesList>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<AnalytesList>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AnalytesList>)));
        }

        /// <summary>
        /// Get a patient by ID
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="patientId">Id of the patient for which get information</param>
        /// <param name="departmentid">This is the ID for the department of the patient you are retrieving. If you are calling this on an enterprise practice with multiple financial groups (also called \&quot;provider groups\&quot;), this  will ensure you are retrieving the correct patient and not a copy that is in a different department.  (optional)</param>
        /// <param name="ignorerestrictions">Set to true to allow ability to find patients with record restrictions and blocked patients. This should only be used when there is no reflection to the patient at all that a match was found or not found.  (optional)</param>
        /// <param name="show2015edcehrtvalues">Use 2015 Ed. CEHRT compliant strings for describing gender identity and sexual orientation. (optional)</param>
        /// <param name="showallclaims">Include information on claims where there is no outstanding patient balance. (Only to be used when showbalancedetails is selected.)  (optional)</param>
        /// <param name="showallpatientdepartmentstatus">Include an array of all departments the patient is a part of along with all statuses for those departments. (optional)</param>
        /// <param name="showbalancedetails">Show detailed information on patient balances. (optional)</param>
        /// <param name="showcustomfields">Include custom fields for the patient. (optional)</param>
        /// <param name="showfullssn">If set, will show full SSN instead of a masked number. (optional)</param>
        /// <param name="showinsurance">Include patient insurance information. (optional)</param>
        /// <param name="showlocalpatientid">If set, will show local patient id. (optional)</param>
        /// <param name="showportalstatus">If set, will include portal enrollment status in response. (optional)</param>
        /// <returns>List{Patient}</returns>
        public List<Patient> GetPatientById (int? practiceid, string apivariant, int? patientId, int? departmentid = null, bool? ignorerestrictions = null, bool? show2015edcehrtvalues = null, bool? showallclaims = null, bool? showallpatientdepartmentstatus = null, bool? showbalancedetails = null, bool? showcustomfields = null, bool? showfullssn = null, bool? showinsurance = null, bool? showlocalpatientid = null, bool? showportalstatus = null)
        {
             ApiResponse<List<Patient>> localVarResponse = GetPatientByIdWithHttpInfo(practiceid, apivariant, patientId, departmentid, ignorerestrictions, show2015edcehrtvalues, showallclaims, showallpatientdepartmentstatus, showbalancedetails, showcustomfields, showfullssn, showinsurance, showlocalpatientid, showportalstatus);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a patient by ID
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="patientId">Id of the patient for which get information</param>
        /// <param name="departmentid">This is the ID for the department of the patient you are retrieving. If you are calling this on an enterprise practice with multiple financial groups (also called \&quot;provider groups\&quot;), this  will ensure you are retrieving the correct patient and not a copy that is in a different department.  (optional)</param>
        /// <param name="ignorerestrictions">Set to true to allow ability to find patients with record restrictions and blocked patients. This should only be used when there is no reflection to the patient at all that a match was found or not found.  (optional)</param>
        /// <param name="show2015edcehrtvalues">Use 2015 Ed. CEHRT compliant strings for describing gender identity and sexual orientation. (optional)</param>
        /// <param name="showallclaims">Include information on claims where there is no outstanding patient balance. (Only to be used when showbalancedetails is selected.)  (optional)</param>
        /// <param name="showallpatientdepartmentstatus">Include an array of all departments the patient is a part of along with all statuses for those departments. (optional)</param>
        /// <param name="showbalancedetails">Show detailed information on patient balances. (optional)</param>
        /// <param name="showcustomfields">Include custom fields for the patient. (optional)</param>
        /// <param name="showfullssn">If set, will show full SSN instead of a masked number. (optional)</param>
        /// <param name="showinsurance">Include patient insurance information. (optional)</param>
        /// <param name="showlocalpatientid">If set, will show local patient id. (optional)</param>
        /// <param name="showportalstatus">If set, will include portal enrollment status in response. (optional)</param>
        /// <returns>ApiResponse of List{Patient}</returns>
        public ApiResponse< List<Patient> > GetPatientByIdWithHttpInfo (int? practiceid, string apivariant, int? patientId, int? departmentid = null, bool? ignorerestrictions = null, bool? show2015edcehrtvalues = null, bool? showallclaims = null, bool? showallpatientdepartmentstatus = null, bool? showbalancedetails = null, bool? showcustomfields = null, bool? showfullssn = null, bool? showinsurance = null, bool? showlocalpatientid = null, bool? showportalstatus = null)
        {
            // verify the required parameter 'practiceid' is set
            if (practiceid == null)
                throw new ApiException(400, "Missing required parameter 'practiceid' when calling DefaultApi->GetPatientById");
            // verify the required parameter 'apivariant' is set
            if (apivariant == null)
                throw new ApiException(400, "Missing required parameter 'apivariant' when calling DefaultApi->GetPatientById");
            // verify the required parameter 'patientId' is set
            if (patientId == null)
                throw new ApiException(400, "Missing required parameter 'patientId' when calling DefaultApi->GetPatientById");

            var localVarPath = "/{apivariant}/{practiceid}/patients/{patientId}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
			object localVarPostBody = null;

			// to determine the Content-Type header
			string[] localVarHttpContentTypes = new string[] {
            };
			string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
			string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (practiceid != null) localVarPathParams.Add("practiceid", this.Configuration.ApiClient.ParameterToString(practiceid)); // path parameter
            if (apivariant != null) localVarPathParams.Add("apivariant", this.Configuration.ApiClient.ParameterToString(apivariant)); // path parameter
            if (patientId != null) localVarPathParams.Add("patientId", this.Configuration.ApiClient.ParameterToString(patientId)); // path parameter
            if (departmentid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "departmentid", departmentid)); // query parameter
            if (ignorerestrictions != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ignorerestrictions", ignorerestrictions)); // query parameter
            if (show2015edcehrtvalues != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "show2015edcehrtvalues", show2015edcehrtvalues)); // query parameter
            if (showallclaims != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showallclaims", showallclaims)); // query parameter
            if (showallpatientdepartmentstatus != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showallpatientdepartmentstatus", showallpatientdepartmentstatus)); // query parameter
            if (showbalancedetails != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showbalancedetails", showbalancedetails)); // query parameter
            if (showcustomfields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showcustomfields", showcustomfields)); // query parameter
            if (showfullssn != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showfullssn", showfullssn)); // query parameter
            if (showinsurance != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showinsurance", showinsurance)); // query parameter
            if (showlocalpatientid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showlocalpatientid", showlocalpatientid)); // query parameter
            if (showportalstatus != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showportalstatus", showportalstatus)); // query parameter
            // authentication (defaultSecurityScheme) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPatientById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Patient>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Patient>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Patient>)));
        }

        /// <summary>
        /// Get a patient by ID
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="patientId">Id of the patient for which get information</param>
        /// <param name="departmentid">This is the ID for the department of the patient you are retrieving. If you are calling this on an enterprise practice with multiple financial groups (also called \&quot;provider groups\&quot;), this  will ensure you are retrieving the correct patient and not a copy that is in a different department.  (optional)</param>
        /// <param name="ignorerestrictions">Set to true to allow ability to find patients with record restrictions and blocked patients. This should only be used when there is no reflection to the patient at all that a match was found or not found.  (optional)</param>
        /// <param name="show2015edcehrtvalues">Use 2015 Ed. CEHRT compliant strings for describing gender identity and sexual orientation. (optional)</param>
        /// <param name="showallclaims">Include information on claims where there is no outstanding patient balance. (Only to be used when showbalancedetails is selected.)  (optional)</param>
        /// <param name="showallpatientdepartmentstatus">Include an array of all departments the patient is a part of along with all statuses for those departments. (optional)</param>
        /// <param name="showbalancedetails">Show detailed information on patient balances. (optional)</param>
        /// <param name="showcustomfields">Include custom fields for the patient. (optional)</param>
        /// <param name="showfullssn">If set, will show full SSN instead of a masked number. (optional)</param>
        /// <param name="showinsurance">Include patient insurance information. (optional)</param>
        /// <param name="showlocalpatientid">If set, will show local patient id. (optional)</param>
        /// <param name="showportalstatus">If set, will include portal enrollment status in response. (optional)</param>
        /// <returns>Task of List{Patient}</returns>
        public async System.Threading.Tasks.Task<List<Patient>> GetPatientByIdAsync (int? practiceid, string apivariant, int? patientId, int? departmentid = null, bool? ignorerestrictions = null, bool? show2015edcehrtvalues = null, bool? showallclaims = null, bool? showallpatientdepartmentstatus = null, bool? showbalancedetails = null, bool? showcustomfields = null, bool? showfullssn = null, bool? showinsurance = null, bool? showlocalpatientid = null, bool? showportalstatus = null)
        {
             ApiResponse<List<Patient>> localVarResponse = await GetPatientByIdAsyncWithHttpInfo(practiceid, apivariant, patientId, departmentid, ignorerestrictions, show2015edcehrtvalues, showallclaims, showallpatientdepartmentstatus, showbalancedetails, showcustomfields, showfullssn, showinsurance, showlocalpatientid, showportalstatus);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a patient by ID
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="patientId">Id of the patient for which get information</param>
        /// <param name="departmentid">This is the ID for the department of the patient you are retrieving. If you are calling this on an enterprise practice with multiple financial groups (also called \&quot;provider groups\&quot;), this  will ensure you are retrieving the correct patient and not a copy that is in a different department.  (optional)</param>
        /// <param name="ignorerestrictions">Set to true to allow ability to find patients with record restrictions and blocked patients. This should only be used when there is no reflection to the patient at all that a match was found or not found.  (optional)</param>
        /// <param name="show2015edcehrtvalues">Use 2015 Ed. CEHRT compliant strings for describing gender identity and sexual orientation. (optional)</param>
        /// <param name="showallclaims">Include information on claims where there is no outstanding patient balance. (Only to be used when showbalancedetails is selected.)  (optional)</param>
        /// <param name="showallpatientdepartmentstatus">Include an array of all departments the patient is a part of along with all statuses for those departments. (optional)</param>
        /// <param name="showbalancedetails">Show detailed information on patient balances. (optional)</param>
        /// <param name="showcustomfields">Include custom fields for the patient. (optional)</param>
        /// <param name="showfullssn">If set, will show full SSN instead of a masked number. (optional)</param>
        /// <param name="showinsurance">Include patient insurance information. (optional)</param>
        /// <param name="showlocalpatientid">If set, will show local patient id. (optional)</param>
        /// <param name="showportalstatus">If set, will include portal enrollment status in response. (optional)</param>
        /// <returns>Task of ApiResponse (List{Patient})</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Patient>>> GetPatientByIdAsyncWithHttpInfo (int? practiceid, string apivariant, int? patientId, int? departmentid = null, bool? ignorerestrictions = null, bool? show2015edcehrtvalues = null, bool? showallclaims = null, bool? showallpatientdepartmentstatus = null, bool? showbalancedetails = null, bool? showcustomfields = null, bool? showfullssn = null, bool? showinsurance = null, bool? showlocalpatientid = null, bool? showportalstatus = null)
        {
            // verify the required parameter 'practiceid' is set
            if (practiceid == null)
                throw new ApiException(400, "Missing required parameter 'practiceid' when calling DefaultApi->GetPatientById");
            // verify the required parameter 'apivariant' is set
            if (apivariant == null)
                throw new ApiException(400, "Missing required parameter 'apivariant' when calling DefaultApi->GetPatientById");
            // verify the required parameter 'patientId' is set
            if (patientId == null)
                throw new ApiException(400, "Missing required parameter 'patientId' when calling DefaultApi->GetPatientById");

            var localVarPath = "/{apivariant}/{practiceid}/patients/{patientId}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
			object localVarPostBody = null;

			// to determine the Content-Type header
			string[] localVarHttpContentTypes = new string[] {
            };
			string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
			string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (practiceid != null) localVarPathParams.Add("practiceid", this.Configuration.ApiClient.ParameterToString(practiceid)); // path parameter
            if (apivariant != null) localVarPathParams.Add("apivariant", this.Configuration.ApiClient.ParameterToString(apivariant)); // path parameter
            if (patientId != null) localVarPathParams.Add("patientId", this.Configuration.ApiClient.ParameterToString(patientId)); // path parameter
            if (departmentid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "departmentid", departmentid)); // query parameter
            if (ignorerestrictions != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ignorerestrictions", ignorerestrictions)); // query parameter
            if (show2015edcehrtvalues != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "show2015edcehrtvalues", show2015edcehrtvalues)); // query parameter
            if (showallclaims != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showallclaims", showallclaims)); // query parameter
            if (showallpatientdepartmentstatus != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showallpatientdepartmentstatus", showallpatientdepartmentstatus)); // query parameter
            if (showbalancedetails != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showbalancedetails", showbalancedetails)); // query parameter
            if (showcustomfields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showcustomfields", showcustomfields)); // query parameter
            if (showfullssn != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showfullssn", showfullssn)); // query parameter
            if (showinsurance != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showinsurance", showinsurance)); // query parameter
            if (showlocalpatientid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showlocalpatientid", showlocalpatientid)); // query parameter
            if (showportalstatus != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showportalstatus", showportalstatus)); // query parameter
            // authentication (defaultSecurityScheme) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPatientById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Patient>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Patient>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Patient>)));
        }

        /// <summary>
        /// Get a patient CCDA informtion by ID
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="patientId">Id of the patient for which get information</param>
        /// <returns>List{PatientCcda}</returns>
        public List<PatientCcda> GetPatientCcdaRecord (int? practiceid, string apivariant, int? patientId)
        {
             ApiResponse<List<PatientCcda>> localVarResponse = GetPatientCcdaRecordWithHttpInfo(practiceid, apivariant, patientId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a patient CCDA informtion by ID
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="patientId">Id of the patient for which get information</param>
        /// <returns>ApiResponse of List{PatientCcda}</returns>
        public ApiResponse< List<PatientCcda> > GetPatientCcdaRecordWithHttpInfo (int? practiceid, string apivariant, int? patientId)
        {
            // verify the required parameter 'practiceid' is set
            if (practiceid == null)
                throw new ApiException(400, "Missing required parameter 'practiceid' when calling DefaultApi->GetPatientCcdaRecord");
            // verify the required parameter 'apivariant' is set
            if (apivariant == null)
                throw new ApiException(400, "Missing required parameter 'apivariant' when calling DefaultApi->GetPatientCcdaRecord");
            // verify the required parameter 'patientId' is set
            if (patientId == null)
                throw new ApiException(400, "Missing required parameter 'patientId' when calling DefaultApi->GetPatientCcdaRecord");

            var localVarPath = "/{apivariant}/{practiceid}/patients/{patientId}/ccda";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
			object localVarPostBody = null;

			// to determine the Content-Type header
			string[] localVarHttpContentTypes = new string[] {
            };
			string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
			string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (practiceid != null) localVarPathParams.Add("practiceid", this.Configuration.ApiClient.ParameterToString(practiceid)); // path parameter
            if (apivariant != null) localVarPathParams.Add("apivariant", this.Configuration.ApiClient.ParameterToString(apivariant)); // path parameter
            if (patientId != null) localVarPathParams.Add("patientId", this.Configuration.ApiClient.ParameterToString(patientId)); // path parameter
            // authentication (defaultSecurityScheme) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPatientCcdaRecord", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PatientCcda>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<PatientCcda>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PatientCcda>)));
        }

        /// <summary>
        /// Get a patient CCDA informtion by ID
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="patientId">Id of the patient for which get information</param>
        /// <returns>Task of List{PatientCcda}</returns>
        public async System.Threading.Tasks.Task<List<PatientCcda>> GetPatientCcdaRecordAsync (int? practiceid, string apivariant, int? patientId)
        {
             ApiResponse<List<PatientCcda>> localVarResponse = await GetPatientCcdaRecordAsyncWithHttpInfo(practiceid, apivariant, patientId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a patient CCDA informtion by ID
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="patientId">Id of the patient for which get information</param>
        /// <returns>Task of ApiResponse (List{PatientCcda})</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<PatientCcda>>> GetPatientCcdaRecordAsyncWithHttpInfo (int? practiceid, string apivariant, int? patientId)
        {
            // verify the required parameter 'practiceid' is set
            if (practiceid == null)
                throw new ApiException(400, "Missing required parameter 'practiceid' when calling DefaultApi->GetPatientCcdaRecord");
            // verify the required parameter 'apivariant' is set
            if (apivariant == null)
                throw new ApiException(400, "Missing required parameter 'apivariant' when calling DefaultApi->GetPatientCcdaRecord");
            // verify the required parameter 'patientId' is set
            if (patientId == null)
                throw new ApiException(400, "Missing required parameter 'patientId' when calling DefaultApi->GetPatientCcdaRecord");

            var localVarPath = "/{apivariant}/{practiceid}/patients/{patientId}/ccda";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
			object localVarPostBody = null;

			// to determine the Content-Type header
			string[] localVarHttpContentTypes = new string[] {
            };
			string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
			string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (practiceid != null) localVarPathParams.Add("practiceid", this.Configuration.ApiClient.ParameterToString(practiceid)); // path parameter
            if (apivariant != null) localVarPathParams.Add("apivariant", this.Configuration.ApiClient.ParameterToString(apivariant)); // path parameter
            if (patientId != null) localVarPathParams.Add("patientId", this.Configuration.ApiClient.ParameterToString(patientId)); // path parameter
            // authentication (defaultSecurityScheme) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPatientCcdaRecord", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PatientCcda>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<PatientCcda>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PatientCcda>)));
        }

        /// <summary>
        /// Get encounters for the speicic patient.
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="encounterid">The encounter ID.</param>
        /// <param name="allowdischargetype">If set, this will allow getting orders for a discharge encounter type. (optional)</param>
        /// <param name="showclinicalprovider">If set, this will show the information about the provider receiving the order. (optional)</param>
        /// <param name="showdeclinedorders">If set, include orders that were declined (optional)</param>
        /// <param name="showexternalcodes">If set, translate the order information to relevant external vocabularies, where available. Examples are medictions to RxNorm and NDC, vaccines to CVX and MVX, labs to LOINC, etc. Our mappings are not exhaustive.  (optional)</param>
        /// <returns>List{EncounterDiagnosesList}</returns>
        public List<EncounterDiagnosesList> GetPatientEncounterOrders (int? practiceid, string apivariant, int? encounterid, bool? allowdischargetype = null, bool? showclinicalprovider = null, bool? showdeclinedorders = null, bool? showexternalcodes = null)
        {
             ApiResponse<List<EncounterDiagnosesList>> localVarResponse = GetPatientEncounterOrdersWithHttpInfo(practiceid, apivariant, encounterid, allowdischargetype, showclinicalprovider, showdeclinedorders, showexternalcodes);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get encounters for the speicic patient.
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="encounterid">The encounter ID.</param>
        /// <param name="allowdischargetype">If set, this will allow getting orders for a discharge encounter type. (optional)</param>
        /// <param name="showclinicalprovider">If set, this will show the information about the provider receiving the order. (optional)</param>
        /// <param name="showdeclinedorders">If set, include orders that were declined (optional)</param>
        /// <param name="showexternalcodes">If set, translate the order information to relevant external vocabularies, where available. Examples are medictions to RxNorm and NDC, vaccines to CVX and MVX, labs to LOINC, etc. Our mappings are not exhaustive.  (optional)</param>
        /// <returns>ApiResponse of List{EncounterDiagnosesList}</returns>
        public ApiResponse< List<EncounterDiagnosesList> > GetPatientEncounterOrdersWithHttpInfo (int? practiceid, string apivariant, int? encounterid, bool? allowdischargetype = null, bool? showclinicalprovider = null, bool? showdeclinedorders = null, bool? showexternalcodes = null)
        {
            // verify the required parameter 'practiceid' is set
            if (practiceid == null)
                throw new ApiException(400, "Missing required parameter 'practiceid' when calling DefaultApi->GetPatientEncounterOrders");
            // verify the required parameter 'apivariant' is set
            if (apivariant == null)
                throw new ApiException(400, "Missing required parameter 'apivariant' when calling DefaultApi->GetPatientEncounterOrders");
            // verify the required parameter 'encounterid' is set
            if (encounterid == null)
                throw new ApiException(400, "Missing required parameter 'encounterid' when calling DefaultApi->GetPatientEncounterOrders");

            var localVarPath = "/{apivariant}/{practiceid}/chart/encounter/{encounterid}/orders";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
			object localVarPostBody = null;

			// to determine the Content-Type header
			string[] localVarHttpContentTypes = new string[] {
            };
			string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
			string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (practiceid != null) localVarPathParams.Add("practiceid", this.Configuration.ApiClient.ParameterToString(practiceid)); // path parameter
            if (apivariant != null) localVarPathParams.Add("apivariant", this.Configuration.ApiClient.ParameterToString(apivariant)); // path parameter
            if (encounterid != null) localVarPathParams.Add("encounterid", this.Configuration.ApiClient.ParameterToString(encounterid)); // path parameter
            if (allowdischargetype != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "allowdischargetype", allowdischargetype)); // query parameter
            if (showclinicalprovider != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showclinicalprovider", showclinicalprovider)); // query parameter
            if (showdeclinedorders != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showdeclinedorders", showdeclinedorders)); // query parameter
            if (showexternalcodes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showexternalcodes", showexternalcodes)); // query parameter
            // authentication (defaultSecurityScheme) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPatientEncounterOrders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<EncounterDiagnosesList>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<EncounterDiagnosesList>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<EncounterDiagnosesList>)));
        }

        /// <summary>
        /// Get encounters for the speicic patient.
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="encounterid">The encounter ID.</param>
        /// <param name="allowdischargetype">If set, this will allow getting orders for a discharge encounter type. (optional)</param>
        /// <param name="showclinicalprovider">If set, this will show the information about the provider receiving the order. (optional)</param>
        /// <param name="showdeclinedorders">If set, include orders that were declined (optional)</param>
        /// <param name="showexternalcodes">If set, translate the order information to relevant external vocabularies, where available. Examples are medictions to RxNorm and NDC, vaccines to CVX and MVX, labs to LOINC, etc. Our mappings are not exhaustive.  (optional)</param>
        /// <returns>Task of List{EncounterDiagnosesList}</returns>
        public async System.Threading.Tasks.Task<List<EncounterDiagnosesList>> GetPatientEncounterOrdersAsync (int? practiceid, string apivariant, int? encounterid, bool? allowdischargetype = null, bool? showclinicalprovider = null, bool? showdeclinedorders = null, bool? showexternalcodes = null)
        {
             ApiResponse<List<EncounterDiagnosesList>> localVarResponse = await GetPatientEncounterOrdersAsyncWithHttpInfo(practiceid, apivariant, encounterid, allowdischargetype, showclinicalprovider, showdeclinedorders, showexternalcodes);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get encounters for the speicic patient.
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="encounterid">The encounter ID.</param>
        /// <param name="allowdischargetype">If set, this will allow getting orders for a discharge encounter type. (optional)</param>
        /// <param name="showclinicalprovider">If set, this will show the information about the provider receiving the order. (optional)</param>
        /// <param name="showdeclinedorders">If set, include orders that were declined (optional)</param>
        /// <param name="showexternalcodes">If set, translate the order information to relevant external vocabularies, where available. Examples are medictions to RxNorm and NDC, vaccines to CVX and MVX, labs to LOINC, etc. Our mappings are not exhaustive.  (optional)</param>
        /// <returns>Task of ApiResponse (List{EncounterDiagnosesList})</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<EncounterDiagnosesList>>> GetPatientEncounterOrdersAsyncWithHttpInfo (int? practiceid, string apivariant, int? encounterid, bool? allowdischargetype = null, bool? showclinicalprovider = null, bool? showdeclinedorders = null, bool? showexternalcodes = null)
        {
            // verify the required parameter 'practiceid' is set
            if (practiceid == null)
                throw new ApiException(400, "Missing required parameter 'practiceid' when calling DefaultApi->GetPatientEncounterOrders");
            // verify the required parameter 'apivariant' is set
            if (apivariant == null)
                throw new ApiException(400, "Missing required parameter 'apivariant' when calling DefaultApi->GetPatientEncounterOrders");
            // verify the required parameter 'encounterid' is set
            if (encounterid == null)
                throw new ApiException(400, "Missing required parameter 'encounterid' when calling DefaultApi->GetPatientEncounterOrders");

            var localVarPath = "/{apivariant}/{practiceid}/chart/encounter/{encounterid}/orders";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
			object localVarPostBody = null;

			// to determine the Content-Type header
			string[] localVarHttpContentTypes = new string[] {
            };
			string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
			string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (practiceid != null) localVarPathParams.Add("practiceid", this.Configuration.ApiClient.ParameterToString(practiceid)); // path parameter
            if (apivariant != null) localVarPathParams.Add("apivariant", this.Configuration.ApiClient.ParameterToString(apivariant)); // path parameter
            if (encounterid != null) localVarPathParams.Add("encounterid", this.Configuration.ApiClient.ParameterToString(encounterid)); // path parameter
            if (allowdischargetype != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "allowdischargetype", allowdischargetype)); // query parameter
            if (showclinicalprovider != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showclinicalprovider", showclinicalprovider)); // query parameter
            if (showdeclinedorders != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showdeclinedorders", showdeclinedorders)); // query parameter
            if (showexternalcodes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showexternalcodes", showexternalcodes)); // query parameter
            // authentication (defaultSecurityScheme) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPatientEncounterOrders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<EncounterDiagnosesList>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<EncounterDiagnosesList>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<EncounterDiagnosesList>)));
        }

        /// <summary>
        /// Get encounters for the speicic patient.
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="patientId">Id of the patient for which get medications</param>
        /// <param name="departmentid">The department for this patient. A patient may have multiple charts, and the department determines which chart to retrieve. </param>
        /// <param name="appointmentid">Find the encounter for this appointment. (optional)</param>
        /// <param name="providerid">The ID of the provider for this encounter (optional)</param>
        /// <param name="enddate">Omit any encounters later than this date (optional)</param>
        /// <param name="startdate">Omit any encounters earlier than this date (optional)</param>
        /// <param name="showallstatuses">By default only encounters in OPEN, CLOSED, or REVIEW status are retrieved, with this flag, encounters aren&#x27;t filtered by status.  (optional)</param>
        /// <param name="showalltypes">Retrieve all encounter types, by default only VISIT and ORDERSONLY are retrieved. (optional)</param>
        /// <param name="showdiagnoses">Query diagnosis information for every encounter (optional)</param>
        /// <returns>List{EncountersList}</returns>
        public List<EncountersList> GetPatientEncounters (int? practiceid, string apivariant, int? patientId, int? departmentid, int? appointmentid = null, int? providerid = null, string enddate = null, string startdate = null, bool? showallstatuses = null, bool? showalltypes = null, bool? showdiagnoses = null)
        {
             ApiResponse<List<EncountersList>> localVarResponse = GetPatientEncountersWithHttpInfo(practiceid, apivariant, patientId, departmentid, appointmentid, providerid, enddate, startdate, showallstatuses, showalltypes, showdiagnoses);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get encounters for the speicic patient.
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="patientId">Id of the patient for which get medications</param>
        /// <param name="departmentid">The department for this patient. A patient may have multiple charts, and the department determines which chart to retrieve. </param>
        /// <param name="appointmentid">Find the encounter for this appointment. (optional)</param>
        /// <param name="providerid">The ID of the provider for this encounter (optional)</param>
        /// <param name="enddate">Omit any encounters later than this date (optional)</param>
        /// <param name="startdate">Omit any encounters earlier than this date (optional)</param>
        /// <param name="showallstatuses">By default only encounters in OPEN, CLOSED, or REVIEW status are retrieved, with this flag, encounters aren&#x27;t filtered by status.  (optional)</param>
        /// <param name="showalltypes">Retrieve all encounter types, by default only VISIT and ORDERSONLY are retrieved. (optional)</param>
        /// <param name="showdiagnoses">Query diagnosis information for every encounter (optional)</param>
        /// <returns>ApiResponse of List{EncountersList}</returns>
        public ApiResponse< List<EncountersList> > GetPatientEncountersWithHttpInfo (int? practiceid, string apivariant, int? patientId, int? departmentid, int? appointmentid = null, int? providerid = null, string enddate = null, string startdate = null, bool? showallstatuses = null, bool? showalltypes = null, bool? showdiagnoses = null)
        {
            // verify the required parameter 'practiceid' is set
            if (practiceid == null)
                throw new ApiException(400, "Missing required parameter 'practiceid' when calling DefaultApi->GetPatientEncounters");
            // verify the required parameter 'apivariant' is set
            if (apivariant == null)
                throw new ApiException(400, "Missing required parameter 'apivariant' when calling DefaultApi->GetPatientEncounters");
            // verify the required parameter 'patientId' is set
            if (patientId == null)
                throw new ApiException(400, "Missing required parameter 'patientId' when calling DefaultApi->GetPatientEncounters");
            // verify the required parameter 'departmentid' is set
            if (departmentid == null)
                throw new ApiException(400, "Missing required parameter 'departmentid' when calling DefaultApi->GetPatientEncounters");

            var localVarPath = "/{apivariant}/{practiceid}/chart/{patientId}/encounters";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
			object localVarPostBody = null;

			// to determine the Content-Type header
			string[] localVarHttpContentTypes = new string[] {
            };
			string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
			string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (practiceid != null) localVarPathParams.Add("practiceid", this.Configuration.ApiClient.ParameterToString(practiceid)); // path parameter
            if (apivariant != null) localVarPathParams.Add("apivariant", this.Configuration.ApiClient.ParameterToString(apivariant)); // path parameter
            if (patientId != null) localVarPathParams.Add("patientId", this.Configuration.ApiClient.ParameterToString(patientId)); // path parameter
            if (departmentid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "departmentid", departmentid)); // query parameter
            if (appointmentid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "appointmentid", appointmentid)); // query parameter
            if (providerid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "providerid", providerid)); // query parameter
            if (enddate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enddate", enddate)); // query parameter
            if (startdate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startdate", startdate)); // query parameter
            if (showallstatuses != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showallstatuses", showallstatuses)); // query parameter
            if (showalltypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showalltypes", showalltypes)); // query parameter
            if (showdiagnoses != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showdiagnoses", showdiagnoses)); // query parameter
            // authentication (defaultSecurityScheme) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPatientEncounters", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<EncountersList>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<EncountersList>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<EncountersList>)));
        }

        /// <summary>
        /// Get encounters for the speicic patient.
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="patientId">Id of the patient for which get medications</param>
        /// <param name="departmentid">The department for this patient. A patient may have multiple charts, and the department determines which chart to retrieve. </param>
        /// <param name="appointmentid">Find the encounter for this appointment. (optional)</param>
        /// <param name="providerid">The ID of the provider for this encounter (optional)</param>
        /// <param name="enddate">Omit any encounters later than this date (optional)</param>
        /// <param name="startdate">Omit any encounters earlier than this date (optional)</param>
        /// <param name="showallstatuses">By default only encounters in OPEN, CLOSED, or REVIEW status are retrieved, with this flag, encounters aren&#x27;t filtered by status.  (optional)</param>
        /// <param name="showalltypes">Retrieve all encounter types, by default only VISIT and ORDERSONLY are retrieved. (optional)</param>
        /// <param name="showdiagnoses">Query diagnosis information for every encounter (optional)</param>
        /// <returns>Task of List{EncountersList}</returns>
        public async System.Threading.Tasks.Task<List<EncountersList>> GetPatientEncountersAsync (int? practiceid, string apivariant, int? patientId, int? departmentid, int? appointmentid = null, int? providerid = null, string enddate = null, string startdate = null, bool? showallstatuses = null, bool? showalltypes = null, bool? showdiagnoses = null)
        {
             ApiResponse<List<EncountersList>> localVarResponse = await GetPatientEncountersAsyncWithHttpInfo(practiceid, apivariant, patientId, departmentid, appointmentid, providerid, enddate, startdate, showallstatuses, showalltypes, showdiagnoses);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get encounters for the speicic patient.
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="patientId">Id of the patient for which get medications</param>
        /// <param name="departmentid">The department for this patient. A patient may have multiple charts, and the department determines which chart to retrieve. </param>
        /// <param name="appointmentid">Find the encounter for this appointment. (optional)</param>
        /// <param name="providerid">The ID of the provider for this encounter (optional)</param>
        /// <param name="enddate">Omit any encounters later than this date (optional)</param>
        /// <param name="startdate">Omit any encounters earlier than this date (optional)</param>
        /// <param name="showallstatuses">By default only encounters in OPEN, CLOSED, or REVIEW status are retrieved, with this flag, encounters aren&#x27;t filtered by status.  (optional)</param>
        /// <param name="showalltypes">Retrieve all encounter types, by default only VISIT and ORDERSONLY are retrieved. (optional)</param>
        /// <param name="showdiagnoses">Query diagnosis information for every encounter (optional)</param>
        /// <returns>Task of ApiResponse (List{EncountersList})</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<EncountersList>>> GetPatientEncountersAsyncWithHttpInfo (int? practiceid, string apivariant, int? patientId, int? departmentid, int? appointmentid = null, int? providerid = null, string enddate = null, string startdate = null, bool? showallstatuses = null, bool? showalltypes = null, bool? showdiagnoses = null)
        {
            // verify the required parameter 'practiceid' is set
            if (practiceid == null)
                throw new ApiException(400, "Missing required parameter 'practiceid' when calling DefaultApi->GetPatientEncounters");
            // verify the required parameter 'apivariant' is set
            if (apivariant == null)
                throw new ApiException(400, "Missing required parameter 'apivariant' when calling DefaultApi->GetPatientEncounters");
            // verify the required parameter 'patientId' is set
            if (patientId == null)
                throw new ApiException(400, "Missing required parameter 'patientId' when calling DefaultApi->GetPatientEncounters");
            // verify the required parameter 'departmentid' is set
            if (departmentid == null)
                throw new ApiException(400, "Missing required parameter 'departmentid' when calling DefaultApi->GetPatientEncounters");

            var localVarPath = "/{apivariant}/{practiceid}/chart/{patientId}/encounters";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
			object localVarPostBody = null;

			// to determine the Content-Type header
			string[] localVarHttpContentTypes = new string[] {
            };
			string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
			string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (practiceid != null) localVarPathParams.Add("practiceid", this.Configuration.ApiClient.ParameterToString(practiceid)); // path parameter
            if (apivariant != null) localVarPathParams.Add("apivariant", this.Configuration.ApiClient.ParameterToString(apivariant)); // path parameter
            if (patientId != null) localVarPathParams.Add("patientId", this.Configuration.ApiClient.ParameterToString(patientId)); // path parameter
            if (departmentid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "departmentid", departmentid)); // query parameter
            if (appointmentid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "appointmentid", appointmentid)); // query parameter
            if (providerid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "providerid", providerid)); // query parameter
            if (enddate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enddate", enddate)); // query parameter
            if (startdate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startdate", startdate)); // query parameter
            if (showallstatuses != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showallstatuses", showallstatuses)); // query parameter
            if (showalltypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showalltypes", showalltypes)); // query parameter
            if (showdiagnoses != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showdiagnoses", showdiagnoses)); // query parameter
            // authentication (defaultSecurityScheme) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPatientEncounters", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<EncountersList>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<EncountersList>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<EncountersList>)));
        }

        /// <summary>
        /// Get information about patient lab result document
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="patientId">Id of the patient for which get information</param>
        /// <param name="labResultId">Id of the lab result</param>
        /// <param name="showtemplate">If true, interpretation template added to the document is also returned.  (optional)</param>
        /// <returns>List{PatientLabResultDocumentDetails}</returns>
        public List<PatientLabResultDocumentDetails> GetPatientLabResultDocument (int? practiceid, string apivariant, int? patientId, int? labResultId, bool? showtemplate = null)
        {
             ApiResponse<List<PatientLabResultDocumentDetails>> localVarResponse = GetPatientLabResultDocumentWithHttpInfo(practiceid, apivariant, patientId, labResultId, showtemplate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get information about patient lab result document
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="patientId">Id of the patient for which get information</param>
        /// <param name="labResultId">Id of the lab result</param>
        /// <param name="showtemplate">If true, interpretation template added to the document is also returned.  (optional)</param>
        /// <returns>ApiResponse of List{PatientLabResultDocumentDetails}</returns>
        public ApiResponse< List<PatientLabResultDocumentDetails> > GetPatientLabResultDocumentWithHttpInfo (int? practiceid, string apivariant, int? patientId, int? labResultId, bool? showtemplate = null)
        {
            // verify the required parameter 'practiceid' is set
            if (practiceid == null)
                throw new ApiException(400, "Missing required parameter 'practiceid' when calling DefaultApi->GetPatientLabResultDocument");
            // verify the required parameter 'apivariant' is set
            if (apivariant == null)
                throw new ApiException(400, "Missing required parameter 'apivariant' when calling DefaultApi->GetPatientLabResultDocument");
            // verify the required parameter 'patientId' is set
            if (patientId == null)
                throw new ApiException(400, "Missing required parameter 'patientId' when calling DefaultApi->GetPatientLabResultDocument");
            // verify the required parameter 'labResultId' is set
            if (labResultId == null)
                throw new ApiException(400, "Missing required parameter 'labResultId' when calling DefaultApi->GetPatientLabResultDocument");

            var localVarPath = "/{apivariant}/{practiceid}/patients/{patientId}/documents/labresult/{labResultId}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
			object localVarPostBody = null;

			// to determine the Content-Type header
			string[] localVarHttpContentTypes = new string[] {
            };
			string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
			string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (practiceid != null) localVarPathParams.Add("practiceid", this.Configuration.ApiClient.ParameterToString(practiceid)); // path parameter
            if (apivariant != null) localVarPathParams.Add("apivariant", this.Configuration.ApiClient.ParameterToString(apivariant)); // path parameter
            if (patientId != null) localVarPathParams.Add("patientId", this.Configuration.ApiClient.ParameterToString(patientId)); // path parameter
            if (labResultId != null) localVarPathParams.Add("labResultId", this.Configuration.ApiClient.ParameterToString(labResultId)); // path parameter
            if (showtemplate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showtemplate", showtemplate)); // query parameter
            // authentication (defaultSecurityScheme) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPatientLabResultDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PatientLabResultDocumentDetails>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<PatientLabResultDocumentDetails>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PatientLabResultDocumentDetails>)));
        }

        /// <summary>
        /// Get information about patient lab result document
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="patientId">Id of the patient for which get information</param>
        /// <param name="labResultId">Id of the lab result</param>
        /// <param name="showtemplate">If true, interpretation template added to the document is also returned.  (optional)</param>
        /// <returns>Task of List{PatientLabResultDocumentDetails}</returns>
        public async System.Threading.Tasks.Task<List<PatientLabResultDocumentDetails>> GetPatientLabResultDocumentAsync (int? practiceid, string apivariant, int? patientId, int? labResultId, bool? showtemplate = null)
        {
             ApiResponse<List<PatientLabResultDocumentDetails>> localVarResponse = await GetPatientLabResultDocumentAsyncWithHttpInfo(practiceid, apivariant, patientId, labResultId, showtemplate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get information about patient lab result document
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="patientId">Id of the patient for which get information</param>
        /// <param name="labResultId">Id of the lab result</param>
        /// <param name="showtemplate">If true, interpretation template added to the document is also returned.  (optional)</param>
        /// <returns>Task of ApiResponse (List{PatientLabResultDocumentDetails})</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<PatientLabResultDocumentDetails>>> GetPatientLabResultDocumentAsyncWithHttpInfo (int? practiceid, string apivariant, int? patientId, int? labResultId, bool? showtemplate = null)
        {
            // verify the required parameter 'practiceid' is set
            if (practiceid == null)
                throw new ApiException(400, "Missing required parameter 'practiceid' when calling DefaultApi->GetPatientLabResultDocument");
            // verify the required parameter 'apivariant' is set
            if (apivariant == null)
                throw new ApiException(400, "Missing required parameter 'apivariant' when calling DefaultApi->GetPatientLabResultDocument");
            // verify the required parameter 'patientId' is set
            if (patientId == null)
                throw new ApiException(400, "Missing required parameter 'patientId' when calling DefaultApi->GetPatientLabResultDocument");
            // verify the required parameter 'labResultId' is set
            if (labResultId == null)
                throw new ApiException(400, "Missing required parameter 'labResultId' when calling DefaultApi->GetPatientLabResultDocument");

            var localVarPath = "/{apivariant}/{practiceid}/patients/{patientId}/documents/labresult/{labResultId}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
			object localVarPostBody = null;

			// to determine the Content-Type header
			string[] localVarHttpContentTypes = new string[] {
            };
			string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
			string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (practiceid != null) localVarPathParams.Add("practiceid", this.Configuration.ApiClient.ParameterToString(practiceid)); // path parameter
            if (apivariant != null) localVarPathParams.Add("apivariant", this.Configuration.ApiClient.ParameterToString(apivariant)); // path parameter
            if (patientId != null) localVarPathParams.Add("patientId", this.Configuration.ApiClient.ParameterToString(patientId)); // path parameter
            if (labResultId != null) localVarPathParams.Add("labResultId", this.Configuration.ApiClient.ParameterToString(labResultId)); // path parameter
            if (showtemplate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showtemplate", showtemplate)); // query parameter
            // authentication (defaultSecurityScheme) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPatientLabResultDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PatientLabResultDocumentDetails>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<PatientLabResultDocumentDetails>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PatientLabResultDocumentDetails>)));
        }

        /// <summary>
        /// Get a patient lab results documents
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="patientId">Id of the patient for which get information</param>
        /// <param name="departmentid">The athenaNet department id.  (optional)</param>
        /// <param name="documentsubclass">The document subclass to filter document results.  (optional)</param>
        /// <param name="encounterid">Show only documents attached to this encounter.  (optional)</param>
        /// <param name="showdeleted">The document subclass to filter document results.  (optional)</param>
        /// <param name="showtemplate">If true, interpretation template added to the document is also returned.  (optional)</param>
        /// <param name="status">The status of the task to filter document results.  (optional)</param>
        /// <returns>PatientLabResultDocumentList</returns>
        public PatientLabResultDocumentList GetPatientLabResultDocuments (int? practiceid, string apivariant, int? patientId, int? departmentid = null, string documentsubclass = null, int? encounterid = null, bool? showdeleted = null, bool? showtemplate = null, string status = null)
        {
             ApiResponse<PatientLabResultDocumentList> localVarResponse = GetPatientLabResultDocumentsWithHttpInfo(practiceid, apivariant, patientId, departmentid, documentsubclass, encounterid, showdeleted, showtemplate, status);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a patient lab results documents
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="patientId">Id of the patient for which get information</param>
        /// <param name="departmentid">The athenaNet department id.  (optional)</param>
        /// <param name="documentsubclass">The document subclass to filter document results.  (optional)</param>
        /// <param name="encounterid">Show only documents attached to this encounter.  (optional)</param>
        /// <param name="showdeleted">The document subclass to filter document results.  (optional)</param>
        /// <param name="showtemplate">If true, interpretation template added to the document is also returned.  (optional)</param>
        /// <param name="status">The status of the task to filter document results.  (optional)</param>
        /// <returns>ApiResponse of PatientLabResultDocumentList</returns>
        public ApiResponse< PatientLabResultDocumentList > GetPatientLabResultDocumentsWithHttpInfo (int? practiceid, string apivariant, int? patientId, int? departmentid = null, string documentsubclass = null, int? encounterid = null, bool? showdeleted = null, bool? showtemplate = null, string status = null)
        {
            // verify the required parameter 'practiceid' is set
            if (practiceid == null)
                throw new ApiException(400, "Missing required parameter 'practiceid' when calling DefaultApi->GetPatientLabResultDocuments");
            // verify the required parameter 'apivariant' is set
            if (apivariant == null)
                throw new ApiException(400, "Missing required parameter 'apivariant' when calling DefaultApi->GetPatientLabResultDocuments");
            // verify the required parameter 'patientId' is set
            if (patientId == null)
                throw new ApiException(400, "Missing required parameter 'patientId' when calling DefaultApi->GetPatientLabResultDocuments");

            var localVarPath = "/{apivariant}/{practiceid}/patients/{patientId}/documents/labresult";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
			object localVarPostBody = null;

			// to determine the Content-Type header
			string[] localVarHttpContentTypes = new string[] {
            };
			string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
			string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (practiceid != null) localVarPathParams.Add("practiceid", this.Configuration.ApiClient.ParameterToString(practiceid)); // path parameter
            if (apivariant != null) localVarPathParams.Add("apivariant", this.Configuration.ApiClient.ParameterToString(apivariant)); // path parameter
            if (patientId != null) localVarPathParams.Add("patientId", this.Configuration.ApiClient.ParameterToString(patientId)); // path parameter
            if (departmentid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "departmentid", departmentid)); // query parameter
            if (documentsubclass != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "documentsubclass", documentsubclass)); // query parameter
            if (encounterid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "encounterid", encounterid)); // query parameter
            if (showdeleted != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showdeleted", showdeleted)); // query parameter
            if (showtemplate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showtemplate", showtemplate)); // query parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter
            // authentication (defaultSecurityScheme) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPatientLabResultDocuments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PatientLabResultDocumentList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PatientLabResultDocumentList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PatientLabResultDocumentList)));
        }

        /// <summary>
        /// Get a patient lab results documents
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="patientId">Id of the patient for which get information</param>
        /// <param name="departmentid">The athenaNet department id.  (optional)</param>
        /// <param name="documentsubclass">The document subclass to filter document results.  (optional)</param>
        /// <param name="encounterid">Show only documents attached to this encounter.  (optional)</param>
        /// <param name="showdeleted">The document subclass to filter document results.  (optional)</param>
        /// <param name="showtemplate">If true, interpretation template added to the document is also returned.  (optional)</param>
        /// <param name="status">The status of the task to filter document results.  (optional)</param>
        /// <returns>Task of PatientLabResultDocumentList</returns>
        public async System.Threading.Tasks.Task<PatientLabResultDocumentList> GetPatientLabResultDocumentsAsync (int? practiceid, string apivariant, int? patientId, int? departmentid = null, string documentsubclass = null, int? encounterid = null, bool? showdeleted = null, bool? showtemplate = null, string status = null)
        {
             ApiResponse<PatientLabResultDocumentList> localVarResponse = await GetPatientLabResultDocumentsAsyncWithHttpInfo(practiceid, apivariant, patientId, departmentid, documentsubclass, encounterid, showdeleted, showtemplate, status);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a patient lab results documents
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="patientId">Id of the patient for which get information</param>
        /// <param name="departmentid">The athenaNet department id.  (optional)</param>
        /// <param name="documentsubclass">The document subclass to filter document results.  (optional)</param>
        /// <param name="encounterid">Show only documents attached to this encounter.  (optional)</param>
        /// <param name="showdeleted">The document subclass to filter document results.  (optional)</param>
        /// <param name="showtemplate">If true, interpretation template added to the document is also returned.  (optional)</param>
        /// <param name="status">The status of the task to filter document results.  (optional)</param>
        /// <returns>Task of ApiResponse (PatientLabResultDocumentList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PatientLabResultDocumentList>> GetPatientLabResultDocumentsAsyncWithHttpInfo (int? practiceid, string apivariant, int? patientId, int? departmentid = null, string documentsubclass = null, int? encounterid = null, bool? showdeleted = null, bool? showtemplate = null, string status = null)
        {
            // verify the required parameter 'practiceid' is set
            if (practiceid == null)
                throw new ApiException(400, "Missing required parameter 'practiceid' when calling DefaultApi->GetPatientLabResultDocuments");
            // verify the required parameter 'apivariant' is set
            if (apivariant == null)
                throw new ApiException(400, "Missing required parameter 'apivariant' when calling DefaultApi->GetPatientLabResultDocuments");
            // verify the required parameter 'patientId' is set
            if (patientId == null)
                throw new ApiException(400, "Missing required parameter 'patientId' when calling DefaultApi->GetPatientLabResultDocuments");

            var localVarPath = "/{apivariant}/{practiceid}/patients/{patientId}/documents/labresult";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
			object localVarPostBody = null;

			// to determine the Content-Type header
			string[] localVarHttpContentTypes = new string[] {
            };
			string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
			string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (practiceid != null) localVarPathParams.Add("practiceid", this.Configuration.ApiClient.ParameterToString(practiceid)); // path parameter
            if (apivariant != null) localVarPathParams.Add("apivariant", this.Configuration.ApiClient.ParameterToString(apivariant)); // path parameter
            if (patientId != null) localVarPathParams.Add("patientId", this.Configuration.ApiClient.ParameterToString(patientId)); // path parameter
            if (departmentid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "departmentid", departmentid)); // query parameter
            if (documentsubclass != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "documentsubclass", documentsubclass)); // query parameter
            if (encounterid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "encounterid", encounterid)); // query parameter
            if (showdeleted != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showdeleted", showdeleted)); // query parameter
            if (showtemplate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showtemplate", showtemplate)); // query parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter
            // authentication (defaultSecurityScheme) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPatientLabResultDocuments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PatientLabResultDocumentList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PatientLabResultDocumentList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PatientLabResultDocumentList)));
        }

        /// <summary>
        /// Get patient medical history
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="patientId">Id of the patient for which get medications</param>
        /// <param name="departmentid">The athenanet department ID</param>
        /// <param name="allresultsbyencounterid">ID used to return lab results for a specific encounter. (optional)</param>
        /// <param name="analyteresultstatus">Filter the results based on the analyte&#x27;s result status. Since the result status is a free text field, this list is not exhaustive, but does represent a majority of the used statuses.  (optional)</param>
        /// <param name="enddate">Filter lab orders not individual results that are on or before this date. Example: enddate&#x3D;1/21/2018. If no enddate is specified, all lab orders found since startdate will be included if specified.  (optional)</param>
        /// <param name="labresultstatus">Filter the results based on the lab result&#x27;s result status. Since the result status is a free text field, this list is not exhaustive, but does represent a majority of the used statuses.  (optional)</param>
        /// <param name="showabnormaldetails">Include the translation of the abnormalflag into HL7 code standards. (optional)</param>
        /// <param name="showhidden">Includes the lab results and analytes marked as hidden. Hidden lab results and analytes are created when they are manually entered, for example on the qm tab or in flowsheets.  (optional)</param>
        /// <param name="showtemplate">If true, interpretation template added to the document is also returned. (optional)</param>
        /// <param name="startdate">Filter lab orders not individual results that are on or after this date. Example: startdate&#x3D;6/21/2015. If no startdate is specified, all prior lab orders will be included until enddate if specified.  (optional)</param>
        /// <returns>LabResultList</returns>
        public LabResultList GetPatientLabResults (int? practiceid, string apivariant, int? patientId, int? departmentid, int? allresultsbyencounterid = null, string analyteresultstatus = null, string enddate = null, string labresultstatus = null, bool? showabnormaldetails = null, bool? showhidden = null, bool? showtemplate = null, string startdate = null)
        {
             ApiResponse<LabResultList> localVarResponse = GetPatientLabResultsWithHttpInfo(practiceid, apivariant, patientId, departmentid, allresultsbyencounterid, analyteresultstatus, enddate, labresultstatus, showabnormaldetails, showhidden, showtemplate, startdate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get patient medical history
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="patientId">Id of the patient for which get medications</param>
        /// <param name="departmentid">The athenanet department ID</param>
        /// <param name="allresultsbyencounterid">ID used to return lab results for a specific encounter. (optional)</param>
        /// <param name="analyteresultstatus">Filter the results based on the analyte&#x27;s result status. Since the result status is a free text field, this list is not exhaustive, but does represent a majority of the used statuses.  (optional)</param>
        /// <param name="enddate">Filter lab orders not individual results that are on or before this date. Example: enddate&#x3D;1/21/2018. If no enddate is specified, all lab orders found since startdate will be included if specified.  (optional)</param>
        /// <param name="labresultstatus">Filter the results based on the lab result&#x27;s result status. Since the result status is a free text field, this list is not exhaustive, but does represent a majority of the used statuses.  (optional)</param>
        /// <param name="showabnormaldetails">Include the translation of the abnormalflag into HL7 code standards. (optional)</param>
        /// <param name="showhidden">Includes the lab results and analytes marked as hidden. Hidden lab results and analytes are created when they are manually entered, for example on the qm tab or in flowsheets.  (optional)</param>
        /// <param name="showtemplate">If true, interpretation template added to the document is also returned. (optional)</param>
        /// <param name="startdate">Filter lab orders not individual results that are on or after this date. Example: startdate&#x3D;6/21/2015. If no startdate is specified, all prior lab orders will be included until enddate if specified.  (optional)</param>
        /// <returns>ApiResponse of LabResultList</returns>
        public ApiResponse< LabResultList > GetPatientLabResultsWithHttpInfo (int? practiceid, string apivariant, int? patientId, int? departmentid, int? allresultsbyencounterid = null, string analyteresultstatus = null, string enddate = null, string labresultstatus = null, bool? showabnormaldetails = null, bool? showhidden = null, bool? showtemplate = null, string startdate = null)
        {
            // verify the required parameter 'practiceid' is set
            if (practiceid == null)
                throw new ApiException(400, "Missing required parameter 'practiceid' when calling DefaultApi->GetPatientLabResults");
            // verify the required parameter 'apivariant' is set
            if (apivariant == null)
                throw new ApiException(400, "Missing required parameter 'apivariant' when calling DefaultApi->GetPatientLabResults");
            // verify the required parameter 'patientId' is set
            if (patientId == null)
                throw new ApiException(400, "Missing required parameter 'patientId' when calling DefaultApi->GetPatientLabResults");
            // verify the required parameter 'departmentid' is set
            if (departmentid == null)
                throw new ApiException(400, "Missing required parameter 'departmentid' when calling DefaultApi->GetPatientLabResults");

            var localVarPath = "/{apivariant}/{practiceid}/chart/{patientId}/labresults";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
			object localVarPostBody = null;

			// to determine the Content-Type header
			string[] localVarHttpContentTypes = new string[] {
            };
			string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
			string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (practiceid != null) localVarPathParams.Add("practiceid", this.Configuration.ApiClient.ParameterToString(practiceid)); // path parameter
            if (apivariant != null) localVarPathParams.Add("apivariant", this.Configuration.ApiClient.ParameterToString(apivariant)); // path parameter
            if (patientId != null) localVarPathParams.Add("patientId", this.Configuration.ApiClient.ParameterToString(patientId)); // path parameter
            if (departmentid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "departmentid", departmentid)); // query parameter
            if (allresultsbyencounterid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "allresultsbyencounterid", allresultsbyencounterid)); // query parameter
            if (analyteresultstatus != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "analyteresultstatus", analyteresultstatus)); // query parameter
            if (enddate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enddate", enddate)); // query parameter
            if (labresultstatus != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "labresultstatus", labresultstatus)); // query parameter
            if (showabnormaldetails != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showabnormaldetails", showabnormaldetails)); // query parameter
            if (showhidden != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showhidden", showhidden)); // query parameter
            if (showtemplate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showtemplate", showtemplate)); // query parameter
            if (startdate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startdate", startdate)); // query parameter
            // authentication (defaultSecurityScheme) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPatientLabResults", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LabResultList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (LabResultList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LabResultList)));
        }

        /// <summary>
        /// Get patient medical history
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="patientId">Id of the patient for which get medications</param>
        /// <param name="departmentid">The athenanet department ID</param>
        /// <param name="allresultsbyencounterid">ID used to return lab results for a specific encounter. (optional)</param>
        /// <param name="analyteresultstatus">Filter the results based on the analyte&#x27;s result status. Since the result status is a free text field, this list is not exhaustive, but does represent a majority of the used statuses.  (optional)</param>
        /// <param name="enddate">Filter lab orders not individual results that are on or before this date. Example: enddate&#x3D;1/21/2018. If no enddate is specified, all lab orders found since startdate will be included if specified.  (optional)</param>
        /// <param name="labresultstatus">Filter the results based on the lab result&#x27;s result status. Since the result status is a free text field, this list is not exhaustive, but does represent a majority of the used statuses.  (optional)</param>
        /// <param name="showabnormaldetails">Include the translation of the abnormalflag into HL7 code standards. (optional)</param>
        /// <param name="showhidden">Includes the lab results and analytes marked as hidden. Hidden lab results and analytes are created when they are manually entered, for example on the qm tab or in flowsheets.  (optional)</param>
        /// <param name="showtemplate">If true, interpretation template added to the document is also returned. (optional)</param>
        /// <param name="startdate">Filter lab orders not individual results that are on or after this date. Example: startdate&#x3D;6/21/2015. If no startdate is specified, all prior lab orders will be included until enddate if specified.  (optional)</param>
        /// <returns>Task of LabResultList</returns>
        public async System.Threading.Tasks.Task<LabResultList> GetPatientLabResultsAsync (int? practiceid, string apivariant, int? patientId, int? departmentid, int? allresultsbyencounterid = null, string analyteresultstatus = null, string enddate = null, string labresultstatus = null, bool? showabnormaldetails = null, bool? showhidden = null, bool? showtemplate = null, string startdate = null)
        {
             ApiResponse<LabResultList> localVarResponse = await GetPatientLabResultsAsyncWithHttpInfo(practiceid, apivariant, patientId, departmentid, allresultsbyencounterid, analyteresultstatus, enddate, labresultstatus, showabnormaldetails, showhidden, showtemplate, startdate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get patient medical history
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="patientId">Id of the patient for which get medications</param>
        /// <param name="departmentid">The athenanet department ID</param>
        /// <param name="allresultsbyencounterid">ID used to return lab results for a specific encounter. (optional)</param>
        /// <param name="analyteresultstatus">Filter the results based on the analyte&#x27;s result status. Since the result status is a free text field, this list is not exhaustive, but does represent a majority of the used statuses.  (optional)</param>
        /// <param name="enddate">Filter lab orders not individual results that are on or before this date. Example: enddate&#x3D;1/21/2018. If no enddate is specified, all lab orders found since startdate will be included if specified.  (optional)</param>
        /// <param name="labresultstatus">Filter the results based on the lab result&#x27;s result status. Since the result status is a free text field, this list is not exhaustive, but does represent a majority of the used statuses.  (optional)</param>
        /// <param name="showabnormaldetails">Include the translation of the abnormalflag into HL7 code standards. (optional)</param>
        /// <param name="showhidden">Includes the lab results and analytes marked as hidden. Hidden lab results and analytes are created when they are manually entered, for example on the qm tab or in flowsheets.  (optional)</param>
        /// <param name="showtemplate">If true, interpretation template added to the document is also returned. (optional)</param>
        /// <param name="startdate">Filter lab orders not individual results that are on or after this date. Example: startdate&#x3D;6/21/2015. If no startdate is specified, all prior lab orders will be included until enddate if specified.  (optional)</param>
        /// <returns>Task of ApiResponse (LabResultList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LabResultList>> GetPatientLabResultsAsyncWithHttpInfo (int? practiceid, string apivariant, int? patientId, int? departmentid, int? allresultsbyencounterid = null, string analyteresultstatus = null, string enddate = null, string labresultstatus = null, bool? showabnormaldetails = null, bool? showhidden = null, bool? showtemplate = null, string startdate = null)
        {
            // verify the required parameter 'practiceid' is set
            if (practiceid == null)
                throw new ApiException(400, "Missing required parameter 'practiceid' when calling DefaultApi->GetPatientLabResults");
            // verify the required parameter 'apivariant' is set
            if (apivariant == null)
                throw new ApiException(400, "Missing required parameter 'apivariant' when calling DefaultApi->GetPatientLabResults");
            // verify the required parameter 'patientId' is set
            if (patientId == null)
                throw new ApiException(400, "Missing required parameter 'patientId' when calling DefaultApi->GetPatientLabResults");
            // verify the required parameter 'departmentid' is set
            if (departmentid == null)
                throw new ApiException(400, "Missing required parameter 'departmentid' when calling DefaultApi->GetPatientLabResults");

            var localVarPath = "/{apivariant}/{practiceid}/chart/{patientId}/labresults";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
			object localVarPostBody = null;

			// to determine the Content-Type header
			string[] localVarHttpContentTypes = new string[] {
            };
			string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
			string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (practiceid != null) localVarPathParams.Add("practiceid", this.Configuration.ApiClient.ParameterToString(practiceid)); // path parameter
            if (apivariant != null) localVarPathParams.Add("apivariant", this.Configuration.ApiClient.ParameterToString(apivariant)); // path parameter
            if (patientId != null) localVarPathParams.Add("patientId", this.Configuration.ApiClient.ParameterToString(patientId)); // path parameter
            if (departmentid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "departmentid", departmentid)); // query parameter
            if (allresultsbyencounterid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "allresultsbyencounterid", allresultsbyencounterid)); // query parameter
            if (analyteresultstatus != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "analyteresultstatus", analyteresultstatus)); // query parameter
            if (enddate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enddate", enddate)); // query parameter
            if (labresultstatus != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "labresultstatus", labresultstatus)); // query parameter
            if (showabnormaldetails != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showabnormaldetails", showabnormaldetails)); // query parameter
            if (showhidden != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showhidden", showhidden)); // query parameter
            if (showtemplate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showtemplate", showtemplate)); // query parameter
            if (startdate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startdate", startdate)); // query parameter
            // authentication (defaultSecurityScheme) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPatientLabResults", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LabResultList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (LabResultList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LabResultList)));
        }

        /// <summary>
        /// Get patient medical history
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="patientId">Id of the patient for which get medications</param>
        /// <param name="departmentid">The athenanet department ID</param>
        /// <returns>PatientMedicalHistory</returns>
        public PatientMedicalHistory GetPatientMedicalHistory (int? practiceid, string apivariant, int? patientId, int? departmentid)
        {
             ApiResponse<PatientMedicalHistory> localVarResponse = GetPatientMedicalHistoryWithHttpInfo(practiceid, apivariant, patientId, departmentid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get patient medical history
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="patientId">Id of the patient for which get medications</param>
        /// <param name="departmentid">The athenanet department ID</param>
        /// <returns>ApiResponse of PatientMedicalHistory</returns>
        public ApiResponse< PatientMedicalHistory > GetPatientMedicalHistoryWithHttpInfo (int? practiceid, string apivariant, int? patientId, int? departmentid)
        {
            // verify the required parameter 'practiceid' is set
            if (practiceid == null)
                throw new ApiException(400, "Missing required parameter 'practiceid' when calling DefaultApi->GetPatientMedicalHistory");
            // verify the required parameter 'apivariant' is set
            if (apivariant == null)
                throw new ApiException(400, "Missing required parameter 'apivariant' when calling DefaultApi->GetPatientMedicalHistory");
            // verify the required parameter 'patientId' is set
            if (patientId == null)
                throw new ApiException(400, "Missing required parameter 'patientId' when calling DefaultApi->GetPatientMedicalHistory");
            // verify the required parameter 'departmentid' is set
            if (departmentid == null)
                throw new ApiException(400, "Missing required parameter 'departmentid' when calling DefaultApi->GetPatientMedicalHistory");

            var localVarPath = "/{apivariant}/{practiceid}/chart/{patientId}/medicalhistory";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
			object localVarPostBody = null;

			// to determine the Content-Type header
			string[] localVarHttpContentTypes = new string[] {
            };
			string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
			string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (practiceid != null) localVarPathParams.Add("practiceid", this.Configuration.ApiClient.ParameterToString(practiceid)); // path parameter
            if (apivariant != null) localVarPathParams.Add("apivariant", this.Configuration.ApiClient.ParameterToString(apivariant)); // path parameter
            if (patientId != null) localVarPathParams.Add("patientId", this.Configuration.ApiClient.ParameterToString(patientId)); // path parameter
            if (departmentid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "departmentid", departmentid)); // query parameter
            // authentication (defaultSecurityScheme) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPatientMedicalHistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PatientMedicalHistory>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PatientMedicalHistory) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PatientMedicalHistory)));
        }

        /// <summary>
        /// Get patient medical history
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="patientId">Id of the patient for which get medications</param>
        /// <param name="departmentid">The athenanet department ID</param>
        /// <returns>Task of PatientMedicalHistory</returns>
        public async System.Threading.Tasks.Task<PatientMedicalHistory> GetPatientMedicalHistoryAsync (int? practiceid, string apivariant, int? patientId, int? departmentid)
        {
             ApiResponse<PatientMedicalHistory> localVarResponse = await GetPatientMedicalHistoryAsyncWithHttpInfo(practiceid, apivariant, patientId, departmentid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get patient medical history
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="patientId">Id of the patient for which get medications</param>
        /// <param name="departmentid">The athenanet department ID</param>
        /// <returns>Task of ApiResponse (PatientMedicalHistory)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PatientMedicalHistory>> GetPatientMedicalHistoryAsyncWithHttpInfo (int? practiceid, string apivariant, int? patientId, int? departmentid)
        {
            // verify the required parameter 'practiceid' is set
            if (practiceid == null)
                throw new ApiException(400, "Missing required parameter 'practiceid' when calling DefaultApi->GetPatientMedicalHistory");
            // verify the required parameter 'apivariant' is set
            if (apivariant == null)
                throw new ApiException(400, "Missing required parameter 'apivariant' when calling DefaultApi->GetPatientMedicalHistory");
            // verify the required parameter 'patientId' is set
            if (patientId == null)
                throw new ApiException(400, "Missing required parameter 'patientId' when calling DefaultApi->GetPatientMedicalHistory");
            // verify the required parameter 'departmentid' is set
            if (departmentid == null)
                throw new ApiException(400, "Missing required parameter 'departmentid' when calling DefaultApi->GetPatientMedicalHistory");

            var localVarPath = "/{apivariant}/{practiceid}/chart/{patientId}/medicalhistory";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
			object localVarPostBody = null;

			// to determine the Content-Type header
			string[] localVarHttpContentTypes = new string[] {
            };
			string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
			string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (practiceid != null) localVarPathParams.Add("practiceid", this.Configuration.ApiClient.ParameterToString(practiceid)); // path parameter
            if (apivariant != null) localVarPathParams.Add("apivariant", this.Configuration.ApiClient.ParameterToString(apivariant)); // path parameter
            if (patientId != null) localVarPathParams.Add("patientId", this.Configuration.ApiClient.ParameterToString(patientId)); // path parameter
            if (departmentid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "departmentid", departmentid)); // query parameter
            // authentication (defaultSecurityScheme) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPatientMedicalHistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PatientMedicalHistory>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PatientMedicalHistory) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PatientMedicalHistory)));
        }

        /// <summary>
        /// Get patient medications
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="patientId">Id of the patient for which get medications</param>
        /// <param name="departmentid">The athenanet department ID</param>
        /// <param name="medicationtype">Historical or Active or Denied. Will return a list of a patient&#x27;s active or historical or denied medications. (optional)</param>
        /// <param name="showndc">Shows the list of NDC numbers related to the medication. (optional)</param>
        /// <param name="showpend">Include pending medications associated with approved future orders. These medications have not yet been submitted. (optional)</param>
        /// <param name="showrxnorm">Shows the list of RxNorm Identifiers related to the medication. The list may contain both branded and generic identifiers. (optional)</param>
        /// <returns>PatientMedication</returns>
        public PatientMedication GetPatientMedications (int? practiceid, string apivariant, int? patientId, int? departmentid, string medicationtype = null, bool? showndc = null, bool? showpend = null, bool? showrxnorm = null)
        {
             ApiResponse<PatientMedication> localVarResponse = GetPatientMedicationsWithHttpInfo(practiceid, apivariant, patientId, departmentid, medicationtype, showndc, showpend, showrxnorm);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get patient medications
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="patientId">Id of the patient for which get medications</param>
        /// <param name="departmentid">The athenanet department ID</param>
        /// <param name="medicationtype">Historical or Active or Denied. Will return a list of a patient&#x27;s active or historical or denied medications. (optional)</param>
        /// <param name="showndc">Shows the list of NDC numbers related to the medication. (optional)</param>
        /// <param name="showpend">Include pending medications associated with approved future orders. These medications have not yet been submitted. (optional)</param>
        /// <param name="showrxnorm">Shows the list of RxNorm Identifiers related to the medication. The list may contain both branded and generic identifiers. (optional)</param>
        /// <returns>ApiResponse of PatientMedication</returns>
        public ApiResponse< PatientMedication > GetPatientMedicationsWithHttpInfo (int? practiceid, string apivariant, int? patientId, int? departmentid, string medicationtype = null, bool? showndc = null, bool? showpend = null, bool? showrxnorm = null)
        {
            // verify the required parameter 'practiceid' is set
            if (practiceid == null)
                throw new ApiException(400, "Missing required parameter 'practiceid' when calling DefaultApi->GetPatientMedications");
            // verify the required parameter 'apivariant' is set
            if (apivariant == null)
                throw new ApiException(400, "Missing required parameter 'apivariant' when calling DefaultApi->GetPatientMedications");
            // verify the required parameter 'patientId' is set
            if (patientId == null)
                throw new ApiException(400, "Missing required parameter 'patientId' when calling DefaultApi->GetPatientMedications");
            // verify the required parameter 'departmentid' is set
            if (departmentid == null)
                throw new ApiException(400, "Missing required parameter 'departmentid' when calling DefaultApi->GetPatientMedications");

            var localVarPath = "/{apivariant}/{practiceid}/chart/{patientId}/medications";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
			object localVarPostBody = null;

			// to determine the Content-Type header
			string[] localVarHttpContentTypes = new string[] {
            };
			string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
			string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (practiceid != null) localVarPathParams.Add("practiceid", this.Configuration.ApiClient.ParameterToString(practiceid)); // path parameter
            if (apivariant != null) localVarPathParams.Add("apivariant", this.Configuration.ApiClient.ParameterToString(apivariant)); // path parameter
            if (patientId != null) localVarPathParams.Add("patientId", this.Configuration.ApiClient.ParameterToString(patientId)); // path parameter
            if (departmentid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "departmentid", departmentid)); // query parameter
            if (medicationtype != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "medicationtype", medicationtype)); // query parameter
            if (showndc != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showndc", showndc)); // query parameter
            if (showpend != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showpend", showpend)); // query parameter
            if (showrxnorm != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showrxnorm", showrxnorm)); // query parameter
            // authentication (defaultSecurityScheme) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPatientMedications", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PatientMedication>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PatientMedication) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PatientMedication)));
        }

        /// <summary>
        /// Get patient medications
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="patientId">Id of the patient for which get medications</param>
        /// <param name="departmentid">The athenanet department ID</param>
        /// <param name="medicationtype">Historical or Active or Denied. Will return a list of a patient&#x27;s active or historical or denied medications. (optional)</param>
        /// <param name="showndc">Shows the list of NDC numbers related to the medication. (optional)</param>
        /// <param name="showpend">Include pending medications associated with approved future orders. These medications have not yet been submitted. (optional)</param>
        /// <param name="showrxnorm">Shows the list of RxNorm Identifiers related to the medication. The list may contain both branded and generic identifiers. (optional)</param>
        /// <returns>Task of PatientMedication</returns>
        public async System.Threading.Tasks.Task<PatientMedication> GetPatientMedicationsAsync (int? practiceid, string apivariant, int? patientId, int? departmentid, string medicationtype = null, bool? showndc = null, bool? showpend = null, bool? showrxnorm = null)
        {
             ApiResponse<PatientMedication> localVarResponse = await GetPatientMedicationsAsyncWithHttpInfo(practiceid, apivariant, patientId, departmentid, medicationtype, showndc, showpend, showrxnorm);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get patient medications
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="patientId">Id of the patient for which get medications</param>
        /// <param name="departmentid">The athenanet department ID</param>
        /// <param name="medicationtype">Historical or Active or Denied. Will return a list of a patient&#x27;s active or historical or denied medications. (optional)</param>
        /// <param name="showndc">Shows the list of NDC numbers related to the medication. (optional)</param>
        /// <param name="showpend">Include pending medications associated with approved future orders. These medications have not yet been submitted. (optional)</param>
        /// <param name="showrxnorm">Shows the list of RxNorm Identifiers related to the medication. The list may contain both branded and generic identifiers. (optional)</param>
        /// <returns>Task of ApiResponse (PatientMedication)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PatientMedication>> GetPatientMedicationsAsyncWithHttpInfo (int? practiceid, string apivariant, int? patientId, int? departmentid, string medicationtype = null, bool? showndc = null, bool? showpend = null, bool? showrxnorm = null)
        {
            // verify the required parameter 'practiceid' is set
            if (practiceid == null)
                throw new ApiException(400, "Missing required parameter 'practiceid' when calling DefaultApi->GetPatientMedications");
            // verify the required parameter 'apivariant' is set
            if (apivariant == null)
                throw new ApiException(400, "Missing required parameter 'apivariant' when calling DefaultApi->GetPatientMedications");
            // verify the required parameter 'patientId' is set
            if (patientId == null)
                throw new ApiException(400, "Missing required parameter 'patientId' when calling DefaultApi->GetPatientMedications");
            // verify the required parameter 'departmentid' is set
            if (departmentid == null)
                throw new ApiException(400, "Missing required parameter 'departmentid' when calling DefaultApi->GetPatientMedications");

            var localVarPath = "/{apivariant}/{practiceid}/chart/{patientId}/medications";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
			object localVarPostBody = null;

			// to determine the Content-Type header
			string[] localVarHttpContentTypes = new string[] {
            };
			string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
			string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (practiceid != null) localVarPathParams.Add("practiceid", this.Configuration.ApiClient.ParameterToString(practiceid)); // path parameter
            if (apivariant != null) localVarPathParams.Add("apivariant", this.Configuration.ApiClient.ParameterToString(apivariant)); // path parameter
            if (patientId != null) localVarPathParams.Add("patientId", this.Configuration.ApiClient.ParameterToString(patientId)); // path parameter
            if (departmentid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "departmentid", departmentid)); // query parameter
            if (medicationtype != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "medicationtype", medicationtype)); // query parameter
            if (showndc != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showndc", showndc)); // query parameter
            if (showpend != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showpend", showpend)); // query parameter
            if (showrxnorm != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showrxnorm", showrxnorm)); // query parameter
            // authentication (defaultSecurityScheme) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPatientMedications", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PatientMedication>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PatientMedication) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PatientMedication)));
        }

        /// <summary>
        /// Get patient medical history
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="patientId">Id of the patient for which get medications</param>
        /// <param name="departmentid">The department for this patient. A patient may have multiple charts, and the department determines which chart to retrieve. </param>
        /// <param name="showdiagnosisinfo">If true, will include every encounter and associated diagnosis with each problem.  Also fills the bestmatchicd10code field with the best conversion from the problem SNOMED  code to ICD10 code if there is no user-selected ICD10 code in an encounter diagnosis event. Please note that the bestmatchicd10code may not always be accurate.  (optional)</param>
        /// <param name="showinactive">Also show inactive (but not soft deleted) problems. (optional)</param>
        /// <returns>ProblemsList</returns>
        public ProblemsList GetPatientProblems (int? practiceid, string apivariant, int? patientId, int? departmentid, bool? showdiagnosisinfo = null, bool? showinactive = null)
        {
             ApiResponse<ProblemsList> localVarResponse = GetPatientProblemsWithHttpInfo(practiceid, apivariant, patientId, departmentid, showdiagnosisinfo, showinactive);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get patient medical history
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="patientId">Id of the patient for which get medications</param>
        /// <param name="departmentid">The department for this patient. A patient may have multiple charts, and the department determines which chart to retrieve. </param>
        /// <param name="showdiagnosisinfo">If true, will include every encounter and associated diagnosis with each problem.  Also fills the bestmatchicd10code field with the best conversion from the problem SNOMED  code to ICD10 code if there is no user-selected ICD10 code in an encounter diagnosis event. Please note that the bestmatchicd10code may not always be accurate.  (optional)</param>
        /// <param name="showinactive">Also show inactive (but not soft deleted) problems. (optional)</param>
        /// <returns>ApiResponse of ProblemsList</returns>
        public ApiResponse< ProblemsList > GetPatientProblemsWithHttpInfo (int? practiceid, string apivariant, int? patientId, int? departmentid, bool? showdiagnosisinfo = null, bool? showinactive = null)
        {
            // verify the required parameter 'practiceid' is set
            if (practiceid == null)
                throw new ApiException(400, "Missing required parameter 'practiceid' when calling DefaultApi->GetPatientProblems");
            // verify the required parameter 'apivariant' is set
            if (apivariant == null)
                throw new ApiException(400, "Missing required parameter 'apivariant' when calling DefaultApi->GetPatientProblems");
            // verify the required parameter 'patientId' is set
            if (patientId == null)
                throw new ApiException(400, "Missing required parameter 'patientId' when calling DefaultApi->GetPatientProblems");
            // verify the required parameter 'departmentid' is set
            if (departmentid == null)
                throw new ApiException(400, "Missing required parameter 'departmentid' when calling DefaultApi->GetPatientProblems");

            var localVarPath = "/{apivariant}/{practiceid}/chart/{patientId}/problems";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
			object localVarPostBody = null;

			// to determine the Content-Type header
			string[] localVarHttpContentTypes = new string[] {
            };
			string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
			string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (practiceid != null) localVarPathParams.Add("practiceid", this.Configuration.ApiClient.ParameterToString(practiceid)); // path parameter
            if (apivariant != null) localVarPathParams.Add("apivariant", this.Configuration.ApiClient.ParameterToString(apivariant)); // path parameter
            if (patientId != null) localVarPathParams.Add("patientId", this.Configuration.ApiClient.ParameterToString(patientId)); // path parameter
            if (departmentid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "departmentid", departmentid)); // query parameter
            if (showdiagnosisinfo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showdiagnosisinfo", showdiagnosisinfo)); // query parameter
            if (showinactive != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showinactive", showinactive)); // query parameter
            // authentication (defaultSecurityScheme) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPatientProblems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProblemsList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProblemsList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProblemsList)));
        }

        /// <summary>
        /// Get patient medical history
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="patientId">Id of the patient for which get medications</param>
        /// <param name="departmentid">The department for this patient. A patient may have multiple charts, and the department determines which chart to retrieve. </param>
        /// <param name="showdiagnosisinfo">If true, will include every encounter and associated diagnosis with each problem.  Also fills the bestmatchicd10code field with the best conversion from the problem SNOMED  code to ICD10 code if there is no user-selected ICD10 code in an encounter diagnosis event. Please note that the bestmatchicd10code may not always be accurate.  (optional)</param>
        /// <param name="showinactive">Also show inactive (but not soft deleted) problems. (optional)</param>
        /// <returns>Task of ProblemsList</returns>
        public async System.Threading.Tasks.Task<ProblemsList> GetPatientProblemsAsync (int? practiceid, string apivariant, int? patientId, int? departmentid, bool? showdiagnosisinfo = null, bool? showinactive = null)
        {
             ApiResponse<ProblemsList> localVarResponse = await GetPatientProblemsAsyncWithHttpInfo(practiceid, apivariant, patientId, departmentid, showdiagnosisinfo, showinactive);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get patient medical history
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="patientId">Id of the patient for which get medications</param>
        /// <param name="departmentid">The department for this patient. A patient may have multiple charts, and the department determines which chart to retrieve. </param>
        /// <param name="showdiagnosisinfo">If true, will include every encounter and associated diagnosis with each problem.  Also fills the bestmatchicd10code field with the best conversion from the problem SNOMED  code to ICD10 code if there is no user-selected ICD10 code in an encounter diagnosis event. Please note that the bestmatchicd10code may not always be accurate.  (optional)</param>
        /// <param name="showinactive">Also show inactive (but not soft deleted) problems. (optional)</param>
        /// <returns>Task of ApiResponse (ProblemsList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProblemsList>> GetPatientProblemsAsyncWithHttpInfo (int? practiceid, string apivariant, int? patientId, int? departmentid, bool? showdiagnosisinfo = null, bool? showinactive = null)
        {
            // verify the required parameter 'practiceid' is set
            if (practiceid == null)
                throw new ApiException(400, "Missing required parameter 'practiceid' when calling DefaultApi->GetPatientProblems");
            // verify the required parameter 'apivariant' is set
            if (apivariant == null)
                throw new ApiException(400, "Missing required parameter 'apivariant' when calling DefaultApi->GetPatientProblems");
            // verify the required parameter 'patientId' is set
            if (patientId == null)
                throw new ApiException(400, "Missing required parameter 'patientId' when calling DefaultApi->GetPatientProblems");
            // verify the required parameter 'departmentid' is set
            if (departmentid == null)
                throw new ApiException(400, "Missing required parameter 'departmentid' when calling DefaultApi->GetPatientProblems");

            var localVarPath = "/{apivariant}/{practiceid}/chart/{patientId}/problems";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
			object localVarPostBody = null;

			// to determine the Content-Type header
			string[] localVarHttpContentTypes = new string[] {
            };
			string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
			string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (practiceid != null) localVarPathParams.Add("practiceid", this.Configuration.ApiClient.ParameterToString(practiceid)); // path parameter
            if (apivariant != null) localVarPathParams.Add("apivariant", this.Configuration.ApiClient.ParameterToString(apivariant)); // path parameter
            if (patientId != null) localVarPathParams.Add("patientId", this.Configuration.ApiClient.ParameterToString(patientId)); // path parameter
            if (departmentid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "departmentid", departmentid)); // query parameter
            if (showdiagnosisinfo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showdiagnosisinfo", showdiagnosisinfo)); // query parameter
            if (showinactive != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showinactive", showinactive)); // query parameter
            // authentication (defaultSecurityScheme) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPatientProblems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProblemsList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProblemsList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProblemsList)));
        }

        /// <summary>
        /// List of social history data for this patient.
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="patientId">Id of the patient for which get medications</param>
        /// <param name="departmentid">The department for this patient. A patient may have multiple charts, and the department determines which chart to retrieve. </param>
        /// <param name="recipientcategory">The intended audience for the data. If given, questions marked as confidential for this audience will be withheld.   (optional)</param>
        /// <param name="shownotperformedquestions">Include questions that the provider did not perform. (optional)</param>
        /// <param name="showunansweredquestions">Include questions where there is no current answer. (optional)</param>
        /// <returns>SocialHistoryList</returns>
        public SocialHistoryList GetPatientSocialHistory (int? practiceid, string apivariant, int? patientId, int? departmentid, string recipientcategory = null, bool? shownotperformedquestions = null, bool? showunansweredquestions = null)
        {
             ApiResponse<SocialHistoryList> localVarResponse = GetPatientSocialHistoryWithHttpInfo(practiceid, apivariant, patientId, departmentid, recipientcategory, shownotperformedquestions, showunansweredquestions);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List of social history data for this patient.
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="patientId">Id of the patient for which get medications</param>
        /// <param name="departmentid">The department for this patient. A patient may have multiple charts, and the department determines which chart to retrieve. </param>
        /// <param name="recipientcategory">The intended audience for the data. If given, questions marked as confidential for this audience will be withheld.   (optional)</param>
        /// <param name="shownotperformedquestions">Include questions that the provider did not perform. (optional)</param>
        /// <param name="showunansweredquestions">Include questions where there is no current answer. (optional)</param>
        /// <returns>ApiResponse of SocialHistoryList</returns>
        public ApiResponse< SocialHistoryList > GetPatientSocialHistoryWithHttpInfo (int? practiceid, string apivariant, int? patientId, int? departmentid, string recipientcategory = null, bool? shownotperformedquestions = null, bool? showunansweredquestions = null)
        {
            // verify the required parameter 'practiceid' is set
            if (practiceid == null)
                throw new ApiException(400, "Missing required parameter 'practiceid' when calling DefaultApi->GetPatientSocialHistory");
            // verify the required parameter 'apivariant' is set
            if (apivariant == null)
                throw new ApiException(400, "Missing required parameter 'apivariant' when calling DefaultApi->GetPatientSocialHistory");
            // verify the required parameter 'patientId' is set
            if (patientId == null)
                throw new ApiException(400, "Missing required parameter 'patientId' when calling DefaultApi->GetPatientSocialHistory");
            // verify the required parameter 'departmentid' is set
            if (departmentid == null)
                throw new ApiException(400, "Missing required parameter 'departmentid' when calling DefaultApi->GetPatientSocialHistory");

            var localVarPath = "/{apivariant}/{practiceid}/chart/{patientId}/socialhistory";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
			object localVarPostBody = null;

			// to determine the Content-Type header
			string[] localVarHttpContentTypes = new string[] {
            };
			string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
			string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (practiceid != null) localVarPathParams.Add("practiceid", this.Configuration.ApiClient.ParameterToString(practiceid)); // path parameter
            if (apivariant != null) localVarPathParams.Add("apivariant", this.Configuration.ApiClient.ParameterToString(apivariant)); // path parameter
            if (patientId != null) localVarPathParams.Add("patientId", this.Configuration.ApiClient.ParameterToString(patientId)); // path parameter
            if (departmentid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "departmentid", departmentid)); // query parameter
            if (recipientcategory != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "recipientcategory", recipientcategory)); // query parameter
            if (shownotperformedquestions != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "shownotperformedquestions", shownotperformedquestions)); // query parameter
            if (showunansweredquestions != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showunansweredquestions", showunansweredquestions)); // query parameter
            // authentication (defaultSecurityScheme) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPatientSocialHistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SocialHistoryList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SocialHistoryList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SocialHistoryList)));
        }

        /// <summary>
        /// List of social history data for this patient.
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="patientId">Id of the patient for which get medications</param>
        /// <param name="departmentid">The department for this patient. A patient may have multiple charts, and the department determines which chart to retrieve. </param>
        /// <param name="recipientcategory">The intended audience for the data. If given, questions marked as confidential for this audience will be withheld.   (optional)</param>
        /// <param name="shownotperformedquestions">Include questions that the provider did not perform. (optional)</param>
        /// <param name="showunansweredquestions">Include questions where there is no current answer. (optional)</param>
        /// <returns>Task of SocialHistoryList</returns>
        public async System.Threading.Tasks.Task<SocialHistoryList> GetPatientSocialHistoryAsync (int? practiceid, string apivariant, int? patientId, int? departmentid, string recipientcategory = null, bool? shownotperformedquestions = null, bool? showunansweredquestions = null)
        {
             ApiResponse<SocialHistoryList> localVarResponse = await GetPatientSocialHistoryAsyncWithHttpInfo(practiceid, apivariant, patientId, departmentid, recipientcategory, shownotperformedquestions, showunansweredquestions);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List of social history data for this patient.
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="patientId">Id of the patient for which get medications</param>
        /// <param name="departmentid">The department for this patient. A patient may have multiple charts, and the department determines which chart to retrieve. </param>
        /// <param name="recipientcategory">The intended audience for the data. If given, questions marked as confidential for this audience will be withheld.   (optional)</param>
        /// <param name="shownotperformedquestions">Include questions that the provider did not perform. (optional)</param>
        /// <param name="showunansweredquestions">Include questions where there is no current answer. (optional)</param>
        /// <returns>Task of ApiResponse (SocialHistoryList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SocialHistoryList>> GetPatientSocialHistoryAsyncWithHttpInfo (int? practiceid, string apivariant, int? patientId, int? departmentid, string recipientcategory = null, bool? shownotperformedquestions = null, bool? showunansweredquestions = null)
        {
            // verify the required parameter 'practiceid' is set
            if (practiceid == null)
                throw new ApiException(400, "Missing required parameter 'practiceid' when calling DefaultApi->GetPatientSocialHistory");
            // verify the required parameter 'apivariant' is set
            if (apivariant == null)
                throw new ApiException(400, "Missing required parameter 'apivariant' when calling DefaultApi->GetPatientSocialHistory");
            // verify the required parameter 'patientId' is set
            if (patientId == null)
                throw new ApiException(400, "Missing required parameter 'patientId' when calling DefaultApi->GetPatientSocialHistory");
            // verify the required parameter 'departmentid' is set
            if (departmentid == null)
                throw new ApiException(400, "Missing required parameter 'departmentid' when calling DefaultApi->GetPatientSocialHistory");

            var localVarPath = "/{apivariant}/{practiceid}/chart/{patientId}/socialhistory";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
			object localVarPostBody = null;

			// to determine the Content-Type header
			string[] localVarHttpContentTypes = new string[] {
            };
			string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
			string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (practiceid != null) localVarPathParams.Add("practiceid", this.Configuration.ApiClient.ParameterToString(practiceid)); // path parameter
            if (apivariant != null) localVarPathParams.Add("apivariant", this.Configuration.ApiClient.ParameterToString(apivariant)); // path parameter
            if (patientId != null) localVarPathParams.Add("patientId", this.Configuration.ApiClient.ParameterToString(patientId)); // path parameter
            if (departmentid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "departmentid", departmentid)); // query parameter
            if (recipientcategory != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "recipientcategory", recipientcategory)); // query parameter
            if (shownotperformedquestions != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "shownotperformedquestions", shownotperformedquestions)); // query parameter
            if (showunansweredquestions != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showunansweredquestions", showunansweredquestions)); // query parameter
            // authentication (defaultSecurityScheme) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPatientSocialHistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SocialHistoryList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SocialHistoryList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SocialHistoryList)));
        }

        /// <summary>
        /// Get patient medical history
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="patientId">Id of the patient for which get medications</param>
        /// <param name="departmentid">The department for this patient. A patient may have multiple charts, and the department determines which chart to retrieve. </param>
        /// <returns>ProceduresList</returns>
        public ProceduresList GetPatientSurgicalHistory (int? practiceid, string apivariant, int? patientId, int? departmentid)
        {
             ApiResponse<ProceduresList> localVarResponse = GetPatientSurgicalHistoryWithHttpInfo(practiceid, apivariant, patientId, departmentid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get patient medical history
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="patientId">Id of the patient for which get medications</param>
        /// <param name="departmentid">The department for this patient. A patient may have multiple charts, and the department determines which chart to retrieve. </param>
        /// <returns>ApiResponse of ProceduresList</returns>
        public ApiResponse< ProceduresList > GetPatientSurgicalHistoryWithHttpInfo (int? practiceid, string apivariant, int? patientId, int? departmentid)
        {
            // verify the required parameter 'practiceid' is set
            if (practiceid == null)
                throw new ApiException(400, "Missing required parameter 'practiceid' when calling DefaultApi->GetPatientSurgicalHistory");
            // verify the required parameter 'apivariant' is set
            if (apivariant == null)
                throw new ApiException(400, "Missing required parameter 'apivariant' when calling DefaultApi->GetPatientSurgicalHistory");
            // verify the required parameter 'patientId' is set
            if (patientId == null)
                throw new ApiException(400, "Missing required parameter 'patientId' when calling DefaultApi->GetPatientSurgicalHistory");
            // verify the required parameter 'departmentid' is set
            if (departmentid == null)
                throw new ApiException(400, "Missing required parameter 'departmentid' when calling DefaultApi->GetPatientSurgicalHistory");

            var localVarPath = "/{apivariant}/{practiceid}/chart/{patientId}/surgicalhistory";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
			object localVarPostBody = null;

			// to determine the Content-Type header
			string[] localVarHttpContentTypes = new string[] {
            };
			string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
			string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (practiceid != null) localVarPathParams.Add("practiceid", this.Configuration.ApiClient.ParameterToString(practiceid)); // path parameter
            if (apivariant != null) localVarPathParams.Add("apivariant", this.Configuration.ApiClient.ParameterToString(apivariant)); // path parameter
            if (patientId != null) localVarPathParams.Add("patientId", this.Configuration.ApiClient.ParameterToString(patientId)); // path parameter
            if (departmentid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "departmentid", departmentid)); // query parameter
            // authentication (defaultSecurityScheme) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPatientSurgicalHistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProceduresList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProceduresList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProceduresList)));
        }

        /// <summary>
        /// Get patient medical history
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="patientId">Id of the patient for which get medications</param>
        /// <param name="departmentid">The department for this patient. A patient may have multiple charts, and the department determines which chart to retrieve. </param>
        /// <returns>Task of ProceduresList</returns>
        public async System.Threading.Tasks.Task<ProceduresList> GetPatientSurgicalHistoryAsync (int? practiceid, string apivariant, int? patientId, int? departmentid)
        {
             ApiResponse<ProceduresList> localVarResponse = await GetPatientSurgicalHistoryAsyncWithHttpInfo(practiceid, apivariant, patientId, departmentid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get patient medical history
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="patientId">Id of the patient for which get medications</param>
        /// <param name="departmentid">The department for this patient. A patient may have multiple charts, and the department determines which chart to retrieve. </param>
        /// <returns>Task of ApiResponse (ProceduresList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProceduresList>> GetPatientSurgicalHistoryAsyncWithHttpInfo (int? practiceid, string apivariant, int? patientId, int? departmentid)
        {
            // verify the required parameter 'practiceid' is set
            if (practiceid == null)
                throw new ApiException(400, "Missing required parameter 'practiceid' when calling DefaultApi->GetPatientSurgicalHistory");
            // verify the required parameter 'apivariant' is set
            if (apivariant == null)
                throw new ApiException(400, "Missing required parameter 'apivariant' when calling DefaultApi->GetPatientSurgicalHistory");
            // verify the required parameter 'patientId' is set
            if (patientId == null)
                throw new ApiException(400, "Missing required parameter 'patientId' when calling DefaultApi->GetPatientSurgicalHistory");
            // verify the required parameter 'departmentid' is set
            if (departmentid == null)
                throw new ApiException(400, "Missing required parameter 'departmentid' when calling DefaultApi->GetPatientSurgicalHistory");

            var localVarPath = "/{apivariant}/{practiceid}/chart/{patientId}/surgicalhistory";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
			object localVarPostBody = null;

			// to determine the Content-Type header
			string[] localVarHttpContentTypes = new string[] {
            };
			string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
			string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (practiceid != null) localVarPathParams.Add("practiceid", this.Configuration.ApiClient.ParameterToString(practiceid)); // path parameter
            if (apivariant != null) localVarPathParams.Add("apivariant", this.Configuration.ApiClient.ParameterToString(apivariant)); // path parameter
            if (patientId != null) localVarPathParams.Add("patientId", this.Configuration.ApiClient.ParameterToString(patientId)); // path parameter
            if (departmentid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "departmentid", departmentid)); // query parameter
            // authentication (defaultSecurityScheme) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPatientSurgicalHistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProceduresList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProceduresList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProceduresList)));
        }

        /// <summary>
        /// Get patient medical history
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="patientId">Id of the patient for which get medications</param>
        /// <param name="departmentid">The department for this patient. A patient may have multiple charts, and the department determines which chart to retrieve. </param>
        /// <param name="enddate">Only retrieve vitals that were taking on or before this date  (optional)</param>
        /// <param name="showemptyvitals">Show configured vitals that have no readings for this patient. (optional)</param>
        /// <param name="startdate">Only retrieve vitals that were taking on or after this date  (optional)</param>
        /// <returns>VitalsList</returns>
        public VitalsList GetPatientVitals (int? practiceid, string apivariant, int? patientId, int? departmentid, string enddate = null, bool? showemptyvitals = null, string startdate = null)
        {
             ApiResponse<VitalsList> localVarResponse = GetPatientVitalsWithHttpInfo(practiceid, apivariant, patientId, departmentid, enddate, showemptyvitals, startdate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get patient medical history
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="patientId">Id of the patient for which get medications</param>
        /// <param name="departmentid">The department for this patient. A patient may have multiple charts, and the department determines which chart to retrieve. </param>
        /// <param name="enddate">Only retrieve vitals that were taking on or before this date  (optional)</param>
        /// <param name="showemptyvitals">Show configured vitals that have no readings for this patient. (optional)</param>
        /// <param name="startdate">Only retrieve vitals that were taking on or after this date  (optional)</param>
        /// <returns>ApiResponse of VitalsList</returns>
        public ApiResponse< VitalsList > GetPatientVitalsWithHttpInfo (int? practiceid, string apivariant, int? patientId, int? departmentid, string enddate = null, bool? showemptyvitals = null, string startdate = null)
        {
            // verify the required parameter 'practiceid' is set
            if (practiceid == null)
                throw new ApiException(400, "Missing required parameter 'practiceid' when calling DefaultApi->GetPatientVitals");
            // verify the required parameter 'apivariant' is set
            if (apivariant == null)
                throw new ApiException(400, "Missing required parameter 'apivariant' when calling DefaultApi->GetPatientVitals");
            // verify the required parameter 'patientId' is set
            if (patientId == null)
                throw new ApiException(400, "Missing required parameter 'patientId' when calling DefaultApi->GetPatientVitals");
            // verify the required parameter 'departmentid' is set
            if (departmentid == null)
                throw new ApiException(400, "Missing required parameter 'departmentid' when calling DefaultApi->GetPatientVitals");

            var localVarPath = "/{apivariant}/{practiceid}/chart/{patientId}/vitals";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
			object localVarPostBody = null;

			// to determine the Content-Type header
			string[] localVarHttpContentTypes = new string[] {
            };
			string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
			string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (practiceid != null) localVarPathParams.Add("practiceid", this.Configuration.ApiClient.ParameterToString(practiceid)); // path parameter
            if (apivariant != null) localVarPathParams.Add("apivariant", this.Configuration.ApiClient.ParameterToString(apivariant)); // path parameter
            if (patientId != null) localVarPathParams.Add("patientId", this.Configuration.ApiClient.ParameterToString(patientId)); // path parameter
            if (departmentid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "departmentid", departmentid)); // query parameter
            if (enddate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enddate", enddate)); // query parameter
            if (showemptyvitals != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showemptyvitals", showemptyvitals)); // query parameter
            if (startdate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startdate", startdate)); // query parameter
            // authentication (defaultSecurityScheme) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPatientVitals", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VitalsList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (VitalsList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VitalsList)));
        }

        /// <summary>
        /// Get patient medical history
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="patientId">Id of the patient for which get medications</param>
        /// <param name="departmentid">The department for this patient. A patient may have multiple charts, and the department determines which chart to retrieve. </param>
        /// <param name="enddate">Only retrieve vitals that were taking on or before this date  (optional)</param>
        /// <param name="showemptyvitals">Show configured vitals that have no readings for this patient. (optional)</param>
        /// <param name="startdate">Only retrieve vitals that were taking on or after this date  (optional)</param>
        /// <returns>Task of VitalsList</returns>
        public async System.Threading.Tasks.Task<VitalsList> GetPatientVitalsAsync (int? practiceid, string apivariant, int? patientId, int? departmentid, string enddate = null, bool? showemptyvitals = null, string startdate = null)
        {
             ApiResponse<VitalsList> localVarResponse = await GetPatientVitalsAsyncWithHttpInfo(practiceid, apivariant, patientId, departmentid, enddate, showemptyvitals, startdate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get patient medical history
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="patientId">Id of the patient for which get medications</param>
        /// <param name="departmentid">The department for this patient. A patient may have multiple charts, and the department determines which chart to retrieve. </param>
        /// <param name="enddate">Only retrieve vitals that were taking on or before this date  (optional)</param>
        /// <param name="showemptyvitals">Show configured vitals that have no readings for this patient. (optional)</param>
        /// <param name="startdate">Only retrieve vitals that were taking on or after this date  (optional)</param>
        /// <returns>Task of ApiResponse (VitalsList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VitalsList>> GetPatientVitalsAsyncWithHttpInfo (int? practiceid, string apivariant, int? patientId, int? departmentid, string enddate = null, bool? showemptyvitals = null, string startdate = null)
        {
            // verify the required parameter 'practiceid' is set
            if (practiceid == null)
                throw new ApiException(400, "Missing required parameter 'practiceid' when calling DefaultApi->GetPatientVitals");
            // verify the required parameter 'apivariant' is set
            if (apivariant == null)
                throw new ApiException(400, "Missing required parameter 'apivariant' when calling DefaultApi->GetPatientVitals");
            // verify the required parameter 'patientId' is set
            if (patientId == null)
                throw new ApiException(400, "Missing required parameter 'patientId' when calling DefaultApi->GetPatientVitals");
            // verify the required parameter 'departmentid' is set
            if (departmentid == null)
                throw new ApiException(400, "Missing required parameter 'departmentid' when calling DefaultApi->GetPatientVitals");

            var localVarPath = "/{apivariant}/{practiceid}/chart/{patientId}/vitals";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
			object localVarPostBody = null;

			// to determine the Content-Type header
			string[] localVarHttpContentTypes = new string[] {
            };
			string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
			string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (practiceid != null) localVarPathParams.Add("practiceid", this.Configuration.ApiClient.ParameterToString(practiceid)); // path parameter
            if (apivariant != null) localVarPathParams.Add("apivariant", this.Configuration.ApiClient.ParameterToString(apivariant)); // path parameter
            if (patientId != null) localVarPathParams.Add("patientId", this.Configuration.ApiClient.ParameterToString(patientId)); // path parameter
            if (departmentid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "departmentid", departmentid)); // query parameter
            if (enddate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "enddate", enddate)); // query parameter
            if (showemptyvitals != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showemptyvitals", showemptyvitals)); // query parameter
            if (startdate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startdate", startdate)); // query parameter
            // authentication (defaultSecurityScheme) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPatientVitals", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VitalsList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (VitalsList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VitalsList)));
        }

        /// <summary>
        /// Search for patients
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="departmentid">Primary (registration) department ID. (optional)</param>
        /// <param name="firstname">First name of the patient to find. (optional)</param>
        /// <param name="lastname">Last name of the patient to find. (optional)</param>
        /// <returns>PatientList</returns>
        public PatientList GetPatients (int? practiceid, string apivariant, int? departmentid = null, string firstname = null, string lastname = null)
        {
             ApiResponse<PatientList> localVarResponse = GetPatientsWithHttpInfo(practiceid, apivariant, departmentid, firstname, lastname);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search for patients
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="departmentid">Primary (registration) department ID. (optional)</param>
        /// <param name="firstname">First name of the patient to find. (optional)</param>
        /// <param name="lastname">Last name of the patient to find. (optional)</param>
        /// <returns>ApiResponse of PatientList</returns>
        public ApiResponse< PatientList > GetPatientsWithHttpInfo (int? practiceid, string apivariant, int? departmentid = null, string firstname = null, string lastname = null)
        {
            // verify the required parameter 'practiceid' is set
            if (practiceid == null)
                throw new ApiException(400, "Missing required parameter 'practiceid' when calling DefaultApi->GetPatients");
            // verify the required parameter 'apivariant' is set
            if (apivariant == null)
                throw new ApiException(400, "Missing required parameter 'apivariant' when calling DefaultApi->GetPatients");

            var localVarPath = "/{apivariant}/{practiceid}/patients";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
			object localVarPostBody = null;

			// to determine the Content-Type header
			string[] localVarHttpContentTypes = new string[] {
            };
			string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
			string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (practiceid != null) localVarPathParams.Add("practiceid", this.Configuration.ApiClient.ParameterToString(practiceid)); // path parameter
            if (apivariant != null) localVarPathParams.Add("apivariant", this.Configuration.ApiClient.ParameterToString(apivariant)); // path parameter
            if (departmentid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "departmentid", departmentid)); // query parameter
            if (firstname != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "firstname", firstname)); // query parameter
            if (lastname != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lastname", lastname)); // query parameter
            // authentication (defaultSecurityScheme) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPatients", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PatientList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PatientList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PatientList)));
        }

        /// <summary>
        /// Search for patients
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="departmentid">Primary (registration) department ID. (optional)</param>
        /// <param name="firstname">First name of the patient to find. (optional)</param>
        /// <param name="lastname">Last name of the patient to find. (optional)</param>
        /// <returns>Task of PatientList</returns>
        public async System.Threading.Tasks.Task<PatientList> GetPatientsAsync (int? practiceid, string apivariant, int? departmentid = null, string firstname = null, string lastname = null)
        {
             ApiResponse<PatientList> localVarResponse = await GetPatientsAsyncWithHttpInfo(practiceid, apivariant, departmentid, firstname, lastname);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search for patients
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="departmentid">Primary (registration) department ID. (optional)</param>
        /// <param name="firstname">First name of the patient to find. (optional)</param>
        /// <param name="lastname">Last name of the patient to find. (optional)</param>
        /// <returns>Task of ApiResponse (PatientList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PatientList>> GetPatientsAsyncWithHttpInfo (int? practiceid, string apivariant, int? departmentid = null, string firstname = null, string lastname = null)
        {
            // verify the required parameter 'practiceid' is set
            if (practiceid == null)
                throw new ApiException(400, "Missing required parameter 'practiceid' when calling DefaultApi->GetPatients");
            // verify the required parameter 'apivariant' is set
            if (apivariant == null)
                throw new ApiException(400, "Missing required parameter 'apivariant' when calling DefaultApi->GetPatients");

            var localVarPath = "/{apivariant}/{practiceid}/patients";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
			object localVarPostBody = null;

			// to determine the Content-Type header
			string[] localVarHttpContentTypes = new string[] {
            };
			string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
			string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (practiceid != null) localVarPathParams.Add("practiceid", this.Configuration.ApiClient.ParameterToString(practiceid)); // path parameter
            if (apivariant != null) localVarPathParams.Add("apivariant", this.Configuration.ApiClient.ParameterToString(apivariant)); // path parameter
            if (departmentid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "departmentid", departmentid)); // query parameter
            if (firstname != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "firstname", firstname)); // query parameter
            if (lastname != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lastname", lastname)); // query parameter
            // authentication (defaultSecurityScheme) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPatients", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PatientList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PatientList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PatientList)));
        }

        /// <summary>
        /// Get available practice IDs
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="limit">Number of entries to return (default 1500, max 5000) (optional)</param>
        /// <param name="offset">Starting point of entries; 0-indexed (optional)</param>
        /// <returns>PracticeList</returns>
        public PracticeList GetPracticeInfo (int? practiceid, string apivariant, int? limit = null, int? offset = null)
        {
             ApiResponse<PracticeList> localVarResponse = GetPracticeInfoWithHttpInfo(practiceid, apivariant, limit, offset);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get available practice IDs
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="limit">Number of entries to return (default 1500, max 5000) (optional)</param>
        /// <param name="offset">Starting point of entries; 0-indexed (optional)</param>
        /// <returns>ApiResponse of PracticeList</returns>
        public ApiResponse< PracticeList > GetPracticeInfoWithHttpInfo (int? practiceid, string apivariant, int? limit = null, int? offset = null)
        {
            // verify the required parameter 'practiceid' is set
            if (practiceid == null)
                throw new ApiException(400, "Missing required parameter 'practiceid' when calling DefaultApi->GetPracticeInfo");
            // verify the required parameter 'apivariant' is set
            if (apivariant == null)
                throw new ApiException(400, "Missing required parameter 'apivariant' when calling DefaultApi->GetPracticeInfo");

            var localVarPath = "/{apivariant}/{practiceid}/practiceinfo";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
			object localVarPostBody = null;

			// to determine the Content-Type header
			string[] localVarHttpContentTypes = new string[] {
            };
			string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
			string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (practiceid != null) localVarPathParams.Add("practiceid", this.Configuration.ApiClient.ParameterToString(practiceid)); // path parameter
            if (apivariant != null) localVarPathParams.Add("apivariant", this.Configuration.ApiClient.ParameterToString(apivariant)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            // authentication (defaultSecurityScheme) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPracticeInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PracticeList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PracticeList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PracticeList)));
        }

        /// <summary>
        /// Get available practice IDs
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="limit">Number of entries to return (default 1500, max 5000) (optional)</param>
        /// <param name="offset">Starting point of entries; 0-indexed (optional)</param>
        /// <returns>Task of PracticeList</returns>
        public async System.Threading.Tasks.Task<PracticeList> GetPracticeInfoAsync (int? practiceid, string apivariant, int? limit = null, int? offset = null)
        {
             ApiResponse<PracticeList> localVarResponse = await GetPracticeInfoAsyncWithHttpInfo(practiceid, apivariant, limit, offset);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get available practice IDs
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="limit">Number of entries to return (default 1500, max 5000) (optional)</param>
        /// <param name="offset">Starting point of entries; 0-indexed (optional)</param>
        /// <returns>Task of ApiResponse (PracticeList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PracticeList>> GetPracticeInfoAsyncWithHttpInfo (int? practiceid, string apivariant, int? limit = null, int? offset = null)
        {
            // verify the required parameter 'practiceid' is set
            if (practiceid == null)
                throw new ApiException(400, "Missing required parameter 'practiceid' when calling DefaultApi->GetPracticeInfo");
            // verify the required parameter 'apivariant' is set
            if (apivariant == null)
                throw new ApiException(400, "Missing required parameter 'apivariant' when calling DefaultApi->GetPracticeInfo");

            var localVarPath = "/{apivariant}/{practiceid}/practiceinfo";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
			object localVarPostBody = null;

			// to determine the Content-Type header
			string[] localVarHttpContentTypes = new string[] {
            };
			string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
			string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (practiceid != null) localVarPathParams.Add("practiceid", this.Configuration.ApiClient.ParameterToString(practiceid)); // path parameter
            if (apivariant != null) localVarPathParams.Add("apivariant", this.Configuration.ApiClient.ParameterToString(apivariant)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            // authentication (defaultSecurityScheme) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPracticeInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PracticeList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PracticeList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PracticeList)));
        }

        /// <summary>
        /// Get a providers
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="providerId">Id of the provider for which get information</param>
        /// <param name="showallproviderids">In athenaNet&#x27;s internal data structures, a single provider can be represented by multiple IDs. These IDs are used in certain external messages (e.g. HL7) and thus these IDs may need to be known by the API user as well. When set to true, a list of all of these ancillary IDs will be provided.  (optional)</param>
        /// <param name="showfederalidnumber">Include the provider&#x27;s federal ID number in results.  (optional)</param>
        /// <param name="showusualdepartmentguessthreshold">There are situations where determining where a provider \&quot;normally\&quot; practices is desired. Unfortuantely, there is no such concept in athenaNet since providers often practice in multiple locations. However, we can use some intelligence to determine this by looking back over the previous few months (90 days) to see actual practice. To enable this, set this value between 0 and 1; it is highly recommended to be at least .5. This is the ratio of appointments in a given department to the total number of appointments for that provider. A value of .5 means \&quot;the provider&#x27;s appointments are 50% in the department guessed.\&quot; Setting this to 1 would only return a department if ALL of the provider&#x27;s appointments were in one department.  (optional)</param>
        /// <returns>List{Provider}</returns>
        public List<Provider> GetProviderById (int? practiceid, string apivariant, int? providerId, bool? showallproviderids = null, int? showfederalidnumber = null, decimal? showusualdepartmentguessthreshold = null)
        {
             ApiResponse<List<Provider>> localVarResponse = GetProviderByIdWithHttpInfo(practiceid, apivariant, providerId, showallproviderids, showfederalidnumber, showusualdepartmentguessthreshold);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a providers
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="providerId">Id of the provider for which get information</param>
        /// <param name="showallproviderids">In athenaNet&#x27;s internal data structures, a single provider can be represented by multiple IDs. These IDs are used in certain external messages (e.g. HL7) and thus these IDs may need to be known by the API user as well. When set to true, a list of all of these ancillary IDs will be provided.  (optional)</param>
        /// <param name="showfederalidnumber">Include the provider&#x27;s federal ID number in results.  (optional)</param>
        /// <param name="showusualdepartmentguessthreshold">There are situations where determining where a provider \&quot;normally\&quot; practices is desired. Unfortuantely, there is no such concept in athenaNet since providers often practice in multiple locations. However, we can use some intelligence to determine this by looking back over the previous few months (90 days) to see actual practice. To enable this, set this value between 0 and 1; it is highly recommended to be at least .5. This is the ratio of appointments in a given department to the total number of appointments for that provider. A value of .5 means \&quot;the provider&#x27;s appointments are 50% in the department guessed.\&quot; Setting this to 1 would only return a department if ALL of the provider&#x27;s appointments were in one department.  (optional)</param>
        /// <returns>ApiResponse of List{Provider}</returns>
        public ApiResponse< List<Provider> > GetProviderByIdWithHttpInfo (int? practiceid, string apivariant, int? providerId, bool? showallproviderids = null, int? showfederalidnumber = null, decimal? showusualdepartmentguessthreshold = null)
        {
            // verify the required parameter 'practiceid' is set
            if (practiceid == null)
                throw new ApiException(400, "Missing required parameter 'practiceid' when calling DefaultApi->GetProviderById");
            // verify the required parameter 'apivariant' is set
            if (apivariant == null)
                throw new ApiException(400, "Missing required parameter 'apivariant' when calling DefaultApi->GetProviderById");
            // verify the required parameter 'providerId' is set
            if (providerId == null)
                throw new ApiException(400, "Missing required parameter 'providerId' when calling DefaultApi->GetProviderById");

            var localVarPath = "/{apivariant}/{practiceid}/providers/{providerId}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
			object localVarPostBody = null;

			// to determine the Content-Type header
			string[] localVarHttpContentTypes = new string[] {
            };
			string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
			string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (practiceid != null) localVarPathParams.Add("practiceid", this.Configuration.ApiClient.ParameterToString(practiceid)); // path parameter
            if (apivariant != null) localVarPathParams.Add("apivariant", this.Configuration.ApiClient.ParameterToString(apivariant)); // path parameter
            if (providerId != null) localVarPathParams.Add("providerId", this.Configuration.ApiClient.ParameterToString(providerId)); // path parameter
            if (showallproviderids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showallproviderids", showallproviderids)); // query parameter
            if (showfederalidnumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showfederalidnumber", showfederalidnumber)); // query parameter
            if (showusualdepartmentguessthreshold != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showusualdepartmentguessthreshold", showusualdepartmentguessthreshold)); // query parameter
            // authentication (defaultSecurityScheme) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProviderById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Provider>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Provider>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Provider>)));
        }

        /// <summary>
        /// Get a providers
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="providerId">Id of the provider for which get information</param>
        /// <param name="showallproviderids">In athenaNet&#x27;s internal data structures, a single provider can be represented by multiple IDs. These IDs are used in certain external messages (e.g. HL7) and thus these IDs may need to be known by the API user as well. When set to true, a list of all of these ancillary IDs will be provided.  (optional)</param>
        /// <param name="showfederalidnumber">Include the provider&#x27;s federal ID number in results.  (optional)</param>
        /// <param name="showusualdepartmentguessthreshold">There are situations where determining where a provider \&quot;normally\&quot; practices is desired. Unfortuantely, there is no such concept in athenaNet since providers often practice in multiple locations. However, we can use some intelligence to determine this by looking back over the previous few months (90 days) to see actual practice. To enable this, set this value between 0 and 1; it is highly recommended to be at least .5. This is the ratio of appointments in a given department to the total number of appointments for that provider. A value of .5 means \&quot;the provider&#x27;s appointments are 50% in the department guessed.\&quot; Setting this to 1 would only return a department if ALL of the provider&#x27;s appointments were in one department.  (optional)</param>
        /// <returns>Task of List{Provider}</returns>
        public async System.Threading.Tasks.Task<List<Provider>> GetProviderByIdAsync (int? practiceid, string apivariant, int? providerId, bool? showallproviderids = null, int? showfederalidnumber = null, decimal? showusualdepartmentguessthreshold = null)
        {
             ApiResponse<List<Provider>> localVarResponse = await GetProviderByIdAsyncWithHttpInfo(practiceid, apivariant, providerId, showallproviderids, showfederalidnumber, showusualdepartmentguessthreshold);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a providers
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="providerId">Id of the provider for which get information</param>
        /// <param name="showallproviderids">In athenaNet&#x27;s internal data structures, a single provider can be represented by multiple IDs. These IDs are used in certain external messages (e.g. HL7) and thus these IDs may need to be known by the API user as well. When set to true, a list of all of these ancillary IDs will be provided.  (optional)</param>
        /// <param name="showfederalidnumber">Include the provider&#x27;s federal ID number in results.  (optional)</param>
        /// <param name="showusualdepartmentguessthreshold">There are situations where determining where a provider \&quot;normally\&quot; practices is desired. Unfortuantely, there is no such concept in athenaNet since providers often practice in multiple locations. However, we can use some intelligence to determine this by looking back over the previous few months (90 days) to see actual practice. To enable this, set this value between 0 and 1; it is highly recommended to be at least .5. This is the ratio of appointments in a given department to the total number of appointments for that provider. A value of .5 means \&quot;the provider&#x27;s appointments are 50% in the department guessed.\&quot; Setting this to 1 would only return a department if ALL of the provider&#x27;s appointments were in one department.  (optional)</param>
        /// <returns>Task of ApiResponse (List{Provider})</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Provider>>> GetProviderByIdAsyncWithHttpInfo (int? practiceid, string apivariant, int? providerId, bool? showallproviderids = null, int? showfederalidnumber = null, decimal? showusualdepartmentguessthreshold = null)
        {
            // verify the required parameter 'practiceid' is set
            if (practiceid == null)
                throw new ApiException(400, "Missing required parameter 'practiceid' when calling DefaultApi->GetProviderById");
            // verify the required parameter 'apivariant' is set
            if (apivariant == null)
                throw new ApiException(400, "Missing required parameter 'apivariant' when calling DefaultApi->GetProviderById");
            // verify the required parameter 'providerId' is set
            if (providerId == null)
                throw new ApiException(400, "Missing required parameter 'providerId' when calling DefaultApi->GetProviderById");

            var localVarPath = "/{apivariant}/{practiceid}/providers/{providerId}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
			object localVarPostBody = null;

			// to determine the Content-Type header
			string[] localVarHttpContentTypes = new string[] {
            };
			string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
			string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (practiceid != null) localVarPathParams.Add("practiceid", this.Configuration.ApiClient.ParameterToString(practiceid)); // path parameter
            if (apivariant != null) localVarPathParams.Add("apivariant", this.Configuration.ApiClient.ParameterToString(apivariant)); // path parameter
            if (providerId != null) localVarPathParams.Add("providerId", this.Configuration.ApiClient.ParameterToString(providerId)); // path parameter
            if (showallproviderids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showallproviderids", showallproviderids)); // query parameter
            if (showfederalidnumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showfederalidnumber", showfederalidnumber)); // query parameter
            if (showusualdepartmentguessthreshold != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showusualdepartmentguessthreshold", showusualdepartmentguessthreshold)); // query parameter
            // authentication (defaultSecurityScheme) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProviderById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Provider>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Provider>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Provider>)));
        }

        /// <summary>
        /// Get a providers
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="name">Id of the patient for which get information (optional)</param>
        /// <param name="providertype">The provider type to filter the results on. Valid provider type values can be found by using GET /reference/providertypes. (optional)</param>
        /// <param name="showallproviderids">In athenaNet&#x27;s internal data structures, a single provider can be represented by multiple IDs. These IDs are used in certain external messages (e.g. HL7) and thus these IDs may need to be known by the API user as well. When set to true, a list of all of these ancillary IDs will be provided.  (optional)</param>
        /// <param name="showusualdepartmentguessthreshold">There are situations where determining where a provider \&quot;normally\&quot; practices is desired. Unfortuantely, there is no such concept in athenaNet since providers often practice in multiple locations. However, we can use some intelligence to determine this by looking back over the previous few months (90 days) to see actual practice. To enable this, set this value between 0 and 1; it is highly recommended to be at least .5. This is the ratio of appointments in a given department to the total number of appointments for that provider. A value of .5 means \&quot;the provider&#x27;s appointments are 50% in the department guessed.\&quot; Setting this to 1 would only return a department if ALL of the provider&#x27;s appointments were in one department.  (optional)</param>
        /// <returns>ProviderList</returns>
        public ProviderList GetProviders (int? practiceid, string apivariant, string name = null, string providertype = null, bool? showallproviderids = null, int? showusualdepartmentguessthreshold = null)
        {
             ApiResponse<ProviderList> localVarResponse = GetProvidersWithHttpInfo(practiceid, apivariant, name, providertype, showallproviderids, showusualdepartmentguessthreshold);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a providers
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="name">Id of the patient for which get information (optional)</param>
        /// <param name="providertype">The provider type to filter the results on. Valid provider type values can be found by using GET /reference/providertypes. (optional)</param>
        /// <param name="showallproviderids">In athenaNet&#x27;s internal data structures, a single provider can be represented by multiple IDs. These IDs are used in certain external messages (e.g. HL7) and thus these IDs may need to be known by the API user as well. When set to true, a list of all of these ancillary IDs will be provided.  (optional)</param>
        /// <param name="showusualdepartmentguessthreshold">There are situations where determining where a provider \&quot;normally\&quot; practices is desired. Unfortuantely, there is no such concept in athenaNet since providers often practice in multiple locations. However, we can use some intelligence to determine this by looking back over the previous few months (90 days) to see actual practice. To enable this, set this value between 0 and 1; it is highly recommended to be at least .5. This is the ratio of appointments in a given department to the total number of appointments for that provider. A value of .5 means \&quot;the provider&#x27;s appointments are 50% in the department guessed.\&quot; Setting this to 1 would only return a department if ALL of the provider&#x27;s appointments were in one department.  (optional)</param>
        /// <returns>ApiResponse of ProviderList</returns>
        public ApiResponse< ProviderList > GetProvidersWithHttpInfo (int? practiceid, string apivariant, string name = null, string providertype = null, bool? showallproviderids = null, int? showusualdepartmentguessthreshold = null)
        {
            // verify the required parameter 'practiceid' is set
            if (practiceid == null)
                throw new ApiException(400, "Missing required parameter 'practiceid' when calling DefaultApi->GetProviders");
            // verify the required parameter 'apivariant' is set
            if (apivariant == null)
                throw new ApiException(400, "Missing required parameter 'apivariant' when calling DefaultApi->GetProviders");

            var localVarPath = "/{apivariant}/{practiceid}/providers";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
			object localVarPostBody = null;

			// to determine the Content-Type header
			string[] localVarHttpContentTypes = new string[] {
            };
			string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
			string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (practiceid != null) localVarPathParams.Add("practiceid", this.Configuration.ApiClient.ParameterToString(practiceid)); // path parameter
            if (apivariant != null) localVarPathParams.Add("apivariant", this.Configuration.ApiClient.ParameterToString(apivariant)); // path parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (providertype != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "providertype", providertype)); // query parameter
            if (showallproviderids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showallproviderids", showallproviderids)); // query parameter
            if (showusualdepartmentguessthreshold != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showusualdepartmentguessthreshold", showusualdepartmentguessthreshold)); // query parameter
            // authentication (defaultSecurityScheme) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProviders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProviderList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProviderList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProviderList)));
        }

        /// <summary>
        /// Get a providers
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="name">Id of the patient for which get information (optional)</param>
        /// <param name="providertype">The provider type to filter the results on. Valid provider type values can be found by using GET /reference/providertypes. (optional)</param>
        /// <param name="showallproviderids">In athenaNet&#x27;s internal data structures, a single provider can be represented by multiple IDs. These IDs are used in certain external messages (e.g. HL7) and thus these IDs may need to be known by the API user as well. When set to true, a list of all of these ancillary IDs will be provided.  (optional)</param>
        /// <param name="showusualdepartmentguessthreshold">There are situations where determining where a provider \&quot;normally\&quot; practices is desired. Unfortuantely, there is no such concept in athenaNet since providers often practice in multiple locations. However, we can use some intelligence to determine this by looking back over the previous few months (90 days) to see actual practice. To enable this, set this value between 0 and 1; it is highly recommended to be at least .5. This is the ratio of appointments in a given department to the total number of appointments for that provider. A value of .5 means \&quot;the provider&#x27;s appointments are 50% in the department guessed.\&quot; Setting this to 1 would only return a department if ALL of the provider&#x27;s appointments were in one department.  (optional)</param>
        /// <returns>Task of ProviderList</returns>
        public async System.Threading.Tasks.Task<ProviderList> GetProvidersAsync (int? practiceid, string apivariant, string name = null, string providertype = null, bool? showallproviderids = null, int? showusualdepartmentguessthreshold = null)
        {
             ApiResponse<ProviderList> localVarResponse = await GetProvidersAsyncWithHttpInfo(practiceid, apivariant, name, providertype, showallproviderids, showusualdepartmentguessthreshold);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a providers
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <param name="name">Id of the patient for which get information (optional)</param>
        /// <param name="providertype">The provider type to filter the results on. Valid provider type values can be found by using GET /reference/providertypes. (optional)</param>
        /// <param name="showallproviderids">In athenaNet&#x27;s internal data structures, a single provider can be represented by multiple IDs. These IDs are used in certain external messages (e.g. HL7) and thus these IDs may need to be known by the API user as well. When set to true, a list of all of these ancillary IDs will be provided.  (optional)</param>
        /// <param name="showusualdepartmentguessthreshold">There are situations where determining where a provider \&quot;normally\&quot; practices is desired. Unfortuantely, there is no such concept in athenaNet since providers often practice in multiple locations. However, we can use some intelligence to determine this by looking back over the previous few months (90 days) to see actual practice. To enable this, set this value between 0 and 1; it is highly recommended to be at least .5. This is the ratio of appointments in a given department to the total number of appointments for that provider. A value of .5 means \&quot;the provider&#x27;s appointments are 50% in the department guessed.\&quot; Setting this to 1 would only return a department if ALL of the provider&#x27;s appointments were in one department.  (optional)</param>
        /// <returns>Task of ApiResponse (ProviderList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProviderList>> GetProvidersAsyncWithHttpInfo (int? practiceid, string apivariant, string name = null, string providertype = null, bool? showallproviderids = null, int? showusualdepartmentguessthreshold = null)
        {
            // verify the required parameter 'practiceid' is set
            if (practiceid == null)
                throw new ApiException(400, "Missing required parameter 'practiceid' when calling DefaultApi->GetProviders");
            // verify the required parameter 'apivariant' is set
            if (apivariant == null)
                throw new ApiException(400, "Missing required parameter 'apivariant' when calling DefaultApi->GetProviders");

            var localVarPath = "/{apivariant}/{practiceid}/providers";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
			object localVarPostBody = null;

			// to determine the Content-Type header
			string[] localVarHttpContentTypes = new string[] {
            };
			string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
			string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (practiceid != null) localVarPathParams.Add("practiceid", this.Configuration.ApiClient.ParameterToString(practiceid)); // path parameter
            if (apivariant != null) localVarPathParams.Add("apivariant", this.Configuration.ApiClient.ParameterToString(apivariant)); // path parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (providertype != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "providertype", providertype)); // query parameter
            if (showallproviderids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showallproviderids", showallproviderids)); // query parameter
            if (showusualdepartmentguessthreshold != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showusualdepartmentguessthreshold", showusualdepartmentguessthreshold)); // query parameter
            // authentication (defaultSecurityScheme) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProviders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProviderList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProviderList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProviderList)));
        }

        /// <summary>
        /// Provides the ability to add new open appointment slots
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appointmentdate"></param>
        /// <param name="appointmenttime"></param>
        /// <param name="appointmenttypeid"></param>
        /// <param name="departmentid"></param>
        /// <param name="providerid"></param>
        /// <param name="reasonid"></param>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <returns>InlineResponse200</returns>
        public InlineResponse200 OpenNewAppointment (string appointmentdate, string appointmenttime, int? appointmenttypeid, int? departmentid, int? providerid, int? reasonid, int? practiceid, string apivariant)
        {
             ApiResponse<InlineResponse200> localVarResponse = OpenNewAppointmentWithHttpInfo(appointmentdate, appointmenttime, appointmenttypeid, departmentid, providerid, reasonid, practiceid, apivariant);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Provides the ability to add new open appointment slots
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appointmentdate"></param>
        /// <param name="appointmenttime"></param>
        /// <param name="appointmenttypeid"></param>
        /// <param name="departmentid"></param>
        /// <param name="providerid"></param>
        /// <param name="reasonid"></param>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        public ApiResponse< InlineResponse200 > OpenNewAppointmentWithHttpInfo (string appointmentdate, string appointmenttime, int? appointmenttypeid, int? departmentid, int? providerid, int? reasonid, int? practiceid, string apivariant)
        {
            // verify the required parameter 'appointmentdate' is set
            if (appointmentdate == null)
                throw new ApiException(400, "Missing required parameter 'appointmentdate' when calling DefaultApi->OpenNewAppointment");
            // verify the required parameter 'appointmenttime' is set
            if (appointmenttime == null)
                throw new ApiException(400, "Missing required parameter 'appointmenttime' when calling DefaultApi->OpenNewAppointment");
            // verify the required parameter 'appointmenttypeid' is set
            if (appointmenttypeid == null)
                throw new ApiException(400, "Missing required parameter 'appointmenttypeid' when calling DefaultApi->OpenNewAppointment");
            // verify the required parameter 'departmentid' is set
            if (departmentid == null)
                throw new ApiException(400, "Missing required parameter 'departmentid' when calling DefaultApi->OpenNewAppointment");
            // verify the required parameter 'providerid' is set
            if (providerid == null)
                throw new ApiException(400, "Missing required parameter 'providerid' when calling DefaultApi->OpenNewAppointment");
            // verify the required parameter 'reasonid' is set
            if (reasonid == null)
                throw new ApiException(400, "Missing required parameter 'reasonid' when calling DefaultApi->OpenNewAppointment");
            // verify the required parameter 'practiceid' is set
            if (practiceid == null)
                throw new ApiException(400, "Missing required parameter 'practiceid' when calling DefaultApi->OpenNewAppointment");
            // verify the required parameter 'apivariant' is set
            if (apivariant == null)
                throw new ApiException(400, "Missing required parameter 'apivariant' when calling DefaultApi->OpenNewAppointment");

            var localVarPath = "/{apivariant}/{practiceid}/appointments/open";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
			object localVarPostBody = null;

			// to determine the Content-Type header
			string[] localVarHttpContentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };
			string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
			string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (practiceid != null) localVarPathParams.Add("practiceid", this.Configuration.ApiClient.ParameterToString(practiceid)); // path parameter
            if (apivariant != null) localVarPathParams.Add("apivariant", this.Configuration.ApiClient.ParameterToString(apivariant)); // path parameter
            if (appointmentdate != null) localVarFormParams.Add("appointmentdate", this.Configuration.ApiClient.ParameterToString(appointmentdate)); // form parameter
            if (appointmenttime != null) localVarFormParams.Add("appointmenttime", this.Configuration.ApiClient.ParameterToString(appointmenttime)); // form parameter
            if (appointmenttypeid != null) localVarFormParams.Add("appointmenttypeid", this.Configuration.ApiClient.ParameterToString(appointmenttypeid)); // form parameter
            if (departmentid != null) localVarFormParams.Add("departmentid", this.Configuration.ApiClient.ParameterToString(departmentid)); // form parameter
            if (providerid != null) localVarFormParams.Add("providerid", this.Configuration.ApiClient.ParameterToString(providerid)); // form parameter
            if (reasonid != null) localVarFormParams.Add("reasonid", this.Configuration.ApiClient.ParameterToString(reasonid)); // form parameter
            // authentication (defaultSecurityScheme) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpenNewAppointment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse200) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
        }

        /// <summary>
        /// Provides the ability to add new open appointment slots
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appointmentdate"></param>
        /// <param name="appointmenttime"></param>
        /// <param name="appointmenttypeid"></param>
        /// <param name="departmentid"></param>
        /// <param name="providerid"></param>
        /// <param name="reasonid"></param>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <returns>Task of InlineResponse200</returns>
        public async System.Threading.Tasks.Task<InlineResponse200> OpenNewAppointmentAsync (string appointmentdate, string appointmenttime, int? appointmenttypeid, int? departmentid, int? providerid, int? reasonid, int? practiceid, string apivariant)
        {
             ApiResponse<InlineResponse200> localVarResponse = await OpenNewAppointmentAsyncWithHttpInfo(appointmentdate, appointmenttime, appointmenttypeid, departmentid, providerid, reasonid, practiceid, apivariant);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Provides the ability to add new open appointment slots
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appointmentdate"></param>
        /// <param name="appointmenttime"></param>
        /// <param name="appointmenttypeid"></param>
        /// <param name="departmentid"></param>
        /// <param name="providerid"></param>
        /// <param name="reasonid"></param>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> OpenNewAppointmentAsyncWithHttpInfo (string appointmentdate, string appointmenttime, int? appointmenttypeid, int? departmentid, int? providerid, int? reasonid, int? practiceid, string apivariant)
        {
            // verify the required parameter 'appointmentdate' is set
            if (appointmentdate == null)
                throw new ApiException(400, "Missing required parameter 'appointmentdate' when calling DefaultApi->OpenNewAppointment");
            // verify the required parameter 'appointmenttime' is set
            if (appointmenttime == null)
                throw new ApiException(400, "Missing required parameter 'appointmenttime' when calling DefaultApi->OpenNewAppointment");
            // verify the required parameter 'appointmenttypeid' is set
            if (appointmenttypeid == null && reasonid == null)
                throw new ApiException(400, "Missing required parameter 'appointmenttypeid' when calling DefaultApi->OpenNewAppointment");
            // verify the required parameter 'departmentid' is set
            if (departmentid == null)
                throw new ApiException(400, "Missing required parameter 'departmentid' when calling DefaultApi->OpenNewAppointment");
            // verify the required parameter 'providerid' is set
            if (providerid == null)
                throw new ApiException(400, "Missing required parameter 'providerid' when calling DefaultApi->OpenNewAppointment");
            // verify the required parameter 'reasonid' is set
            if (reasonid == null && appointmenttypeid == null)
                throw new ApiException(400, "Missing required parameter 'reasonid' when calling DefaultApi->OpenNewAppointment");
            // verify the required parameter 'practiceid' is set
            if (practiceid == null)
                throw new ApiException(400, "Missing required parameter 'practiceid' when calling DefaultApi->OpenNewAppointment");
            // verify the required parameter 'apivariant' is set
            if (apivariant == null)
                throw new ApiException(400, "Missing required parameter 'apivariant' when calling DefaultApi->OpenNewAppointment");

            var localVarPath = "/{apivariant}/{practiceid}/appointments/open";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
			object localVarPostBody = null;

			// to determine the Content-Type header
			string[] localVarHttpContentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };
			string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
			string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (practiceid != null) localVarPathParams.Add("practiceid", this.Configuration.ApiClient.ParameterToString(practiceid)); // path parameter
            if (apivariant != null) localVarPathParams.Add("apivariant", this.Configuration.ApiClient.ParameterToString(apivariant)); // path parameter
            if (appointmentdate != null) localVarFormParams.Add("appointmentdate", this.Configuration.ApiClient.ParameterToString(appointmentdate)); // form parameter
            if (appointmenttime != null) localVarFormParams.Add("appointmenttime", this.Configuration.ApiClient.ParameterToString(appointmenttime)); // form parameter
            if (appointmenttypeid != null) localVarFormParams.Add("appointmenttypeid", this.Configuration.ApiClient.ParameterToString(appointmenttypeid)); // form parameter
            if (departmentid != null) localVarFormParams.Add("departmentid", this.Configuration.ApiClient.ParameterToString(departmentid)); // form parameter
            if (providerid != null) localVarFormParams.Add("providerid", this.Configuration.ApiClient.ParameterToString(providerid)); // form parameter
            if (reasonid != null) localVarFormParams.Add("reasonid", this.Configuration.ApiClient.ParameterToString(reasonid)); // form parameter
            // authentication (defaultSecurityScheme) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OpenNewAppointment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse200) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
        }

        /// <summary>
        /// Update patient
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address1"></param>
        /// <param name="address2"></param>
        /// <param name="city"></param>
        /// <param name="departmentid"></param>
        /// <param name="dob"></param>
        /// <param name="email"></param>
        /// <param name="firstname"></param>
        /// <param name="homephone"></param>
        /// <param name="lastname"></param>
        /// <param name="mobilephone"></param>
        /// <param name="state"></param>
        /// <param name="zip"></param>
        /// <param name="sex"></param>
        /// <param name="race"></param>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <returns>List{PatientCreatedResponse}</returns>
        public List<PatientCreatedResponse> UpdatePatient (string address1, string address2, string city, int? departmentid, string dob, string email, string firstname, string homephone, string lastname, string mobilephone, string state, string zip, string sex, string race, int? practiceid, string apivariant)
        {
             ApiResponse<List<PatientCreatedResponse>> localVarResponse = UpdatePatientWithHttpInfo(address1, address2, city, departmentid, dob, email, firstname, homephone, lastname, mobilephone, state, zip, sex, race, practiceid, apivariant);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update patient
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address1"></param>
        /// <param name="address2"></param>
        /// <param name="city"></param>
        /// <param name="departmentid"></param>
        /// <param name="dob"></param>
        /// <param name="email"></param>
        /// <param name="firstname"></param>
        /// <param name="homephone"></param>
        /// <param name="lastname"></param>
        /// <param name="mobilephone"></param>
        /// <param name="state"></param>
        /// <param name="zip"></param>
        /// <param name="sex"></param>
        /// <param name="race"></param>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <returns>ApiResponse of List{PatientCreatedResponse}</returns>
        public ApiResponse< List<PatientCreatedResponse> > UpdatePatientWithHttpInfo (string address1, string address2, string city, int? departmentid, string dob, string email, string firstname, string homephone, string lastname, string mobilephone, string state, string zip, string sex, string race, int? practiceid, string apivariant)
        {
            // verify the required parameter 'address1' is set
            if (address1 == null)
                throw new ApiException(400, "Missing required parameter 'address1' when calling DefaultApi->CreatePatient");
            // verify the required parameter 'address2' is set
            if (address2 == null)
                throw new ApiException(400, "Missing required parameter 'address2' when calling DefaultApi->CreatePatient");
            // verify the required parameter 'city' is set
            if (city == null)
                throw new ApiException(400, "Missing required parameter 'city' when calling DefaultApi->CreatePatient");
            // verify the required parameter 'departmentid' is set
            if (departmentid == null)
                throw new ApiException(400, "Missing required parameter 'departmentid' when calling DefaultApi->CreatePatient");
            // verify the required parameter 'dob' is set
            if (dob == null)
                throw new ApiException(400, "Missing required parameter 'dob' when calling DefaultApi->CreatePatient");
            // verify the required parameter 'email' is set
            if (email == null)
                throw new ApiException(400, "Missing required parameter 'email' when calling DefaultApi->CreatePatient");
            // verify the required parameter 'firstname' is set
            if (firstname == null)
                throw new ApiException(400, "Missing required parameter 'firstname' when calling DefaultApi->CreatePatient");
            // verify the required parameter 'homephone' is set
            if (homephone == null)
                throw new ApiException(400, "Missing required parameter 'homephone' when calling DefaultApi->CreatePatient");
            // verify the required parameter 'lastname' is set
            if (lastname == null)
                throw new ApiException(400, "Missing required parameter 'lastname' when calling DefaultApi->CreatePatient");
            // verify the required parameter 'mobilephone' is set
            if (mobilephone == null)
                throw new ApiException(400, "Missing required parameter 'mobilephone' when calling DefaultApi->CreatePatient");
            // verify the required parameter 'state' is set
            if (state == null)
                throw new ApiException(400, "Missing required parameter 'state' when calling DefaultApi->CreatePatient");
            // verify the required parameter 'zip' is set
            if (zip == null)
                throw new ApiException(400, "Missing required parameter 'zip' when calling DefaultApi->CreatePatient");
            // verify the required parameter 'sex' is set
            if (sex == null)
                throw new ApiException(400, "Missing required parameter 'sex' when calling DefaultApi->CreatePatient");
            // verify the required parameter 'race' is set
            if (race == null)
                throw new ApiException(400, "Missing required parameter 'race' when calling DefaultApi->CreatePatient");
            // verify the required parameter 'practiceid' is set
            if (practiceid == null)
                throw new ApiException(400, "Missing required parameter 'practiceid' when calling DefaultApi->CreatePatient");
            // verify the required parameter 'apivariant' is set
            if (apivariant == null)
                throw new ApiException(400, "Missing required parameter 'apivariant' when calling DefaultApi->CreatePatient");

            var localVarPath = "/{apivariant}/{practiceid}/patients";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
			object localVarPostBody = null;

			// to determine the Content-Type header
			string[] localVarHttpContentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };
			string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
			string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (practiceid != null) localVarPathParams.Add("practiceid", this.Configuration.ApiClient.ParameterToString(practiceid)); // path parameter
            if (apivariant != null) localVarPathParams.Add("apivariant", this.Configuration.ApiClient.ParameterToString(apivariant)); // path parameter
            if (address1 != null) localVarFormParams.Add("address1", this.Configuration.ApiClient.ParameterToString(address1)); // form parameter
            if (address2 != null) localVarFormParams.Add("address2", this.Configuration.ApiClient.ParameterToString(address2)); // form parameter
            if (city != null) localVarFormParams.Add("city", this.Configuration.ApiClient.ParameterToString(city)); // form parameter
            if (departmentid != null) localVarFormParams.Add("departmentid", this.Configuration.ApiClient.ParameterToString(departmentid)); // form parameter
            if (dob != null) localVarFormParams.Add("dob", this.Configuration.ApiClient.ParameterToString(dob)); // form parameter
            if (email != null) localVarFormParams.Add("email", this.Configuration.ApiClient.ParameterToString(email)); // form parameter
            if (firstname != null) localVarFormParams.Add("firstname", this.Configuration.ApiClient.ParameterToString(firstname)); // form parameter
            if (homephone != null) localVarFormParams.Add("homephone", this.Configuration.ApiClient.ParameterToString(homephone)); // form parameter
            if (lastname != null) localVarFormParams.Add("lastname", this.Configuration.ApiClient.ParameterToString(lastname)); // form parameter
            if (mobilephone != null) localVarFormParams.Add("mobilephone", this.Configuration.ApiClient.ParameterToString(mobilephone)); // form parameter
            if (state != null) localVarFormParams.Add("state", this.Configuration.ApiClient.ParameterToString(state)); // form parameter
            if (zip != null) localVarFormParams.Add("zip", this.Configuration.ApiClient.ParameterToString(zip)); // form parameter
            if (sex != null) localVarFormParams.Add("sex", this.Configuration.ApiClient.ParameterToString(sex)); // form parameter
            if (race != null) localVarFormParams.Add("race", this.Configuration.ApiClient.ParameterToString(race)); // form parameter
            // authentication (defaultSecurityScheme) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePatient", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PatientCreatedResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<PatientCreatedResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PatientCreatedResponse>)));
        }

        /// <summary>
        /// Update patient
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address1"></param>
        /// <param name="address2"></param>
        /// <param name="city"></param>
        /// <param name="departmentid"></param>
        /// <param name="dob"></param>
        /// <param name="email"></param>
        /// <param name="firstname"></param>
        /// <param name="homephone"></param>
        /// <param name="lastname"></param>
        /// <param name="mobilephone"></param>
        /// <param name="state"></param>
        /// <param name="zip"></param>
        /// <param name="sex"></param>
        /// <param name="race"></param>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <returns>Task of List{PatientCreatedResponse}</returns>
        public async System.Threading.Tasks.Task<List<PatientCreatedResponse>> UpdatePatientAsync (string address1, string address2, string city, int? departmentid, string dob, string email, string firstname, string homephone, string lastname, string mobilephone, string state, string zip, string sex, string race, int? practiceid, string apivariant)
        {
             ApiResponse<List<PatientCreatedResponse>> localVarResponse = await UpdatePatientAsyncWithHttpInfo(address1, address2, city, departmentid, dob, email, firstname, homephone, lastname, mobilephone, state, zip, sex, race, practiceid, apivariant);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update patient
        /// </summary>
        /// <exception cref="Jacrys.AthenaSharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address1"></param>
        /// <param name="address2"></param>
        /// <param name="city"></param>
        /// <param name="departmentid"></param>
        /// <param name="dob"></param>
        /// <param name="email"></param>
        /// <param name="firstname"></param>
        /// <param name="homephone"></param>
        /// <param name="lastname"></param>
        /// <param name="mobilephone"></param>
        /// <param name="state"></param>
        /// <param name="zip"></param>
        /// <param name="sex"></param>
        /// <param name="race"></param>
        /// <param name="practiceid">Id of the practice</param>
        /// <param name="apivariant">Variant of the API</param>
        /// <returns>Task of ApiResponse (List{PatientCreatedResponse})</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<PatientCreatedResponse>>> UpdatePatientAsyncWithHttpInfo (string address1, string address2, string city, int? departmentid, string dob, string email, string firstname, string homephone, string lastname, string mobilephone, string state, string zip, string sex, string race, int? practiceid, string apivariant)
        {
            // verify the required parameter 'address1' is set
            if (address1 == null)
                throw new ApiException(400, "Missing required parameter 'address1' when calling DefaultApi->CreatePatient");
            // verify the required parameter 'address2' is set
            if (address2 == null)
                throw new ApiException(400, "Missing required parameter 'address2' when calling DefaultApi->CreatePatient");
            // verify the required parameter 'city' is set
            if (city == null)
                throw new ApiException(400, "Missing required parameter 'city' when calling DefaultApi->CreatePatient");
            // verify the required parameter 'departmentid' is set
            if (departmentid == null)
                throw new ApiException(400, "Missing required parameter 'departmentid' when calling DefaultApi->CreatePatient");
            // verify the required parameter 'dob' is set
            if (dob == null)
                throw new ApiException(400, "Missing required parameter 'dob' when calling DefaultApi->CreatePatient");
            // verify the required parameter 'email' is set
            if (email == null)
                throw new ApiException(400, "Missing required parameter 'email' when calling DefaultApi->CreatePatient");
            // verify the required parameter 'firstname' is set
            if (firstname == null)
                throw new ApiException(400, "Missing required parameter 'firstname' when calling DefaultApi->CreatePatient");
            // verify the required parameter 'homephone' is set
            if (homephone == null)
                throw new ApiException(400, "Missing required parameter 'homephone' when calling DefaultApi->CreatePatient");
            // verify the required parameter 'lastname' is set
            if (lastname == null)
                throw new ApiException(400, "Missing required parameter 'lastname' when calling DefaultApi->CreatePatient");
            // verify the required parameter 'mobilephone' is set
            if (mobilephone == null)
                throw new ApiException(400, "Missing required parameter 'mobilephone' when calling DefaultApi->CreatePatient");
            // verify the required parameter 'state' is set
            if (state == null)
                throw new ApiException(400, "Missing required parameter 'state' when calling DefaultApi->CreatePatient");
            // verify the required parameter 'zip' is set
            if (zip == null)
                throw new ApiException(400, "Missing required parameter 'zip' when calling DefaultApi->CreatePatient");
            // verify the required parameter 'sex' is set
            if (sex == null)
                throw new ApiException(400, "Missing required parameter 'sex' when calling DefaultApi->CreatePatient");
            // verify the required parameter 'race' is set
            if (race == null)
                throw new ApiException(400, "Missing required parameter 'race' when calling DefaultApi->CreatePatient");
            // verify the required parameter 'practiceid' is set
            if (practiceid == null)
                throw new ApiException(400, "Missing required parameter 'practiceid' when calling DefaultApi->CreatePatient");
            // verify the required parameter 'apivariant' is set
            if (apivariant == null)
                throw new ApiException(400, "Missing required parameter 'apivariant' when calling DefaultApi->CreatePatient");

            var localVarPath = "/{apivariant}/{practiceid}/patients";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
			object localVarPostBody = null;

			// to determine the Content-Type header
			string[] localVarHttpContentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };
			string localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

			// to determine the Accept header
			string[] localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
			string localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (practiceid != null) localVarPathParams.Add("practiceid", this.Configuration.ApiClient.ParameterToString(practiceid)); // path parameter
            if (apivariant != null) localVarPathParams.Add("apivariant", this.Configuration.ApiClient.ParameterToString(apivariant)); // path parameter
            if (address1 != null) localVarFormParams.Add("address1", this.Configuration.ApiClient.ParameterToString(address1)); // form parameter
            if (address2 != null) localVarFormParams.Add("address2", this.Configuration.ApiClient.ParameterToString(address2)); // form parameter
            if (city != null) localVarFormParams.Add("city", this.Configuration.ApiClient.ParameterToString(city)); // form parameter
            if (departmentid != null) localVarFormParams.Add("departmentid", this.Configuration.ApiClient.ParameterToString(departmentid)); // form parameter
            if (dob != null) localVarFormParams.Add("dob", this.Configuration.ApiClient.ParameterToString(dob)); // form parameter
            if (email != null) localVarFormParams.Add("email", this.Configuration.ApiClient.ParameterToString(email)); // form parameter
            if (firstname != null) localVarFormParams.Add("firstname", this.Configuration.ApiClient.ParameterToString(firstname)); // form parameter
            if (homephone != null) localVarFormParams.Add("homephone", this.Configuration.ApiClient.ParameterToString(homephone)); // form parameter
            if (lastname != null) localVarFormParams.Add("lastname", this.Configuration.ApiClient.ParameterToString(lastname)); // form parameter
            if (mobilephone != null) localVarFormParams.Add("mobilephone", this.Configuration.ApiClient.ParameterToString(mobilephone)); // form parameter
            if (state != null) localVarFormParams.Add("state", this.Configuration.ApiClient.ParameterToString(state)); // form parameter
            if (zip != null) localVarFormParams.Add("zip", this.Configuration.ApiClient.ParameterToString(zip)); // form parameter
            if (sex != null) localVarFormParams.Add("sex", this.Configuration.ApiClient.ParameterToString(sex)); // form parameter
            if (race != null) localVarFormParams.Add("race", this.Configuration.ApiClient.ParameterToString(race)); // form parameter
            // authentication (defaultSecurityScheme) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + this.Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePatient", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PatientCreatedResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<PatientCreatedResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PatientCreatedResponse>)));
        }
    }
}
